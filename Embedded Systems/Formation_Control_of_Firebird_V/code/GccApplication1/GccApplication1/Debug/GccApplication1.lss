
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800200  00004002  00004096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f8  00800334  00800334  000041ca  2**0
                  ALLOC
  3 .stab         00001f44  00000000  00000000  000041cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000707  00000000  00000000  00006110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000350  00000000  00000000  00006818  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f08  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000330  00000000  00000000  00008a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d7  00000000  00000000  00008da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd4  00000000  00000000  00009e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064c  00000000  00000000  0000aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017df  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000c877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      10:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      14:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__vector_5>
      18:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__vector_6>
      1c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      20:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      24:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      28:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      2c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      30:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      38:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      3c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      40:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      44:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      48:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      4c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      50:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      58:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      5c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      60:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      68:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      6c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      70:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      74:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      78:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      7c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      80:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      84:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      88:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      8c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      90:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      94:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      98:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      9c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      a0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      a4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      a8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      ac:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      b0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      b4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      b8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      bc:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      c0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      c4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      c8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_51>
      d0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      d4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      d8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      dc:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      e0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      e4:	be 02       	muls	r27, r30
      e6:	c2 02       	muls	r28, r18
      e8:	c2 02       	muls	r28, r18
      ea:	c0 02       	muls	r28, r16
      ec:	c2 02       	muls	r28, r18
      ee:	c2 02       	muls	r28, r18
      f0:	c2 02       	muls	r28, r18
      f2:	c2 02       	muls	r28, r18
      f4:	c2 02       	muls	r28, r18
      f6:	c2 02       	muls	r28, r18
      f8:	c2 02       	muls	r28, r18
      fa:	c2 02       	muls	r28, r18
      fc:	c2 02       	muls	r28, r18
      fe:	c2 02       	muls	r28, r18
     100:	c2 02       	muls	r28, r18
     102:	c2 02       	muls	r28, r18
     104:	c2 02       	muls	r28, r18
     106:	c2 02       	muls	r28, r18
     108:	c2 02       	muls	r28, r18
     10a:	c2 02       	muls	r28, r18
     10c:	c2 02       	muls	r28, r18
     10e:	c2 02       	muls	r28, r18
     110:	c2 02       	muls	r28, r18
     112:	c2 02       	muls	r28, r18
     114:	c2 02       	muls	r28, r18
     116:	c2 02       	muls	r28, r18
     118:	c2 02       	muls	r28, r18
     11a:	c2 02       	muls	r28, r18
     11c:	c2 02       	muls	r28, r18
     11e:	c2 02       	muls	r28, r18
     120:	c2 02       	muls	r28, r18
     122:	c2 02       	muls	r28, r18
     124:	c2 02       	muls	r28, r18
     126:	b8 02       	muls	r27, r24
     128:	ae 02       	muls	r26, r30
     12a:	c2 02       	muls	r28, r18
     12c:	b0 02       	muls	r27, r16
     12e:	b2 02       	muls	r27, r18
     130:	9a 02       	muls	r25, r26
     132:	9c 02       	muls	r25, r28
     134:	9e 02       	muls	r25, r30
     136:	a0 02       	muls	r26, r16
     138:	a2 02       	muls	r26, r18
     13a:	a4 02       	muls	r26, r20
     13c:	a6 02       	muls	r26, r22
     13e:	a8 02       	muls	r26, r24
     140:	aa 02       	muls	r26, r26
     142:	ac 02       	muls	r26, r28
     144:	b4 02       	muls	r27, r20
     146:	b6 02       	muls	r27, r22
     148:	c2 02       	muls	r28, r18
     14a:	ba 02       	muls	r27, r26
     14c:	c2 02       	muls	r28, r18
     14e:	bc 02       	muls	r27, r28
     150:	c2 02       	muls	r28, r18
     152:	66 02       	muls	r22, r22
     154:	68 02       	muls	r22, r24
     156:	6a 02       	muls	r22, r26
     158:	6c 02       	muls	r22, r28
     15a:	6e 02       	muls	r22, r30
     15c:	70 02       	muls	r23, r16
     15e:	72 02       	muls	r23, r18
     160:	74 02       	muls	r23, r20
     162:	76 02       	muls	r23, r22
     164:	78 02       	muls	r23, r24
     166:	7a 02       	muls	r23, r26
     168:	7c 02       	muls	r23, r28
     16a:	7e 02       	muls	r23, r30
     16c:	80 02       	muls	r24, r16
     16e:	82 02       	muls	r24, r18
     170:	84 02       	muls	r24, r20
     172:	86 02       	muls	r24, r22
     174:	88 02       	muls	r24, r24
     176:	8a 02       	muls	r24, r26
     178:	8c 02       	muls	r24, r28
     17a:	8e 02       	muls	r24, r30
     17c:	90 02       	muls	r25, r16
     17e:	92 02       	muls	r25, r18
     180:	94 02       	muls	r25, r20
     182:	96 02       	muls	r25, r22
     184:	98 02       	muls	r25, r24

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e2 e0       	ldi	r30, 0x02	; 2
     19e:	f0 e4       	ldi	r31, 0x40	; 64
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a4 33       	cpi	r26, 0x34	; 52
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	14 e0       	ldi	r17, 0x04	; 4
     1b2:	a4 e3       	ldi	r26, 0x34	; 52
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ac 32       	cpi	r26, 0x2C	; 44
     1bc:	b1 07       	cpc	r27, r17
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	0e 94 18 1b 	call	0x3630	; 0x3630 <main>
     1c4:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <_exit>

000001c8 <__bad_interrupt>:
     1c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001cc <uart2_init>:
char data; //to store received data from UDR1
char st[100], num[100];int i=0,j,m=0,check=0,flag=0,cf1=0,cf2=0,cf3=0;
char decode1(char data);
int connectDevice();
void uart2_init(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00; //disable while setting baud rate
     1d4:	81 ed       	ldi	r24, 0xD1	; 209
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     1dc:	80 ed       	ldi	r24, 0xD0	; 208
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	fc 01       	movw	r30, r24
     1e2:	10 82       	st	Z, r1
 UCSR2C = 0x06;
     1e4:	82 ed       	ldi	r24, 0xD2	; 210
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	26 e0       	ldi	r18, 0x06	; 6
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18
 UBRR2L = 0x47; //set baud rate lo
     1ee:	84 ed       	ldi	r24, 0xD4	; 212
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	27 e4       	ldi	r18, 0x47	; 71
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
 UBRR2H = 0x00; //set baud rate hi
     1f8:	85 ed       	ldi	r24, 0xD5	; 213
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	fc 01       	movw	r30, r24
     1fe:	10 82       	st	Z, r1
 UCSR2B = 0x98;
     200:	81 ed       	ldi	r24, 0xD1	; 209
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	28 e9       	ldi	r18, 0x98	; 152
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <__vector_51>:


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	00 90 5b 00 	lds	r0, 0x005B
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	2f 93       	push	r18
     226:	3f 93       	push	r19
     228:	4f 93       	push	r20
     22a:	5f 93       	push	r21
     22c:	6f 93       	push	r22
     22e:	7f 93       	push	r23
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	bf 93       	push	r27
     238:	ef 93       	push	r30
     23a:	ff 93       	push	r31
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	2e 97       	sbiw	r28, 0x0e	; 14
     246:	de bf       	out	0x3e, r29	; 62
     248:	cd bf       	out	0x3d, r28	; 61
	data = UDR2;
     24a:	86 ed       	ldi	r24, 0xD6	; 214
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	80 93 c1 03 	sts	0x03C1, r24
   if(data==':')
     256:	80 91 c1 03 	lds	r24, 0x03C1
     25a:	8a 33       	cpi	r24, 0x3A	; 58
     25c:	31 f4       	brne	.+12     	; 0x26a <__vector_51+0x5a>
   flag=1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 3b 03 	sts	0x033B, r25
     266:	80 93 3a 03 	sts	0x033A, r24
   if(data=='`')
     26a:	80 91 c1 03 	lds	r24, 0x03C1
     26e:	80 36       	cpi	r24, 0x60	; 96
     270:	21 f4       	brne	.+8      	; 0x27a <__vector_51+0x6a>
   flag=0;
     272:	10 92 3b 03 	sts	0x033B, r1
     276:	10 92 3a 03 	sts	0x033A, r1
      
  if (flag==0)
     27a:	80 91 3a 03 	lds	r24, 0x033A
     27e:	90 91 3b 03 	lds	r25, 0x033B
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	39 f5       	brne	.+78     	; 0x2d4 <__vector_51+0xc4>
  {
      if((data>='A'&&data<='Z' )||(data>='0'&& data<='9'))
     286:	80 91 c1 03 	lds	r24, 0x03C1
     28a:	81 34       	cpi	r24, 0x41	; 65
     28c:	20 f0       	brcs	.+8      	; 0x296 <__vector_51+0x86>
     28e:	80 91 c1 03 	lds	r24, 0x03C1
     292:	8b 35       	cpi	r24, 0x5B	; 91
     294:	50 f0       	brcs	.+20     	; 0x2aa <__vector_51+0x9a>
     296:	80 91 c1 03 	lds	r24, 0x03C1
     29a:	80 33       	cpi	r24, 0x30	; 48
     29c:	08 f4       	brcc	.+2      	; 0x2a0 <__vector_51+0x90>
     29e:	c0 c0       	rjmp	.+384    	; 0x420 <__vector_51+0x210>
     2a0:	80 91 c1 03 	lds	r24, 0x03C1
     2a4:	8a 33       	cpi	r24, 0x3A	; 58
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <__vector_51+0x9a>
     2a8:	bb c0       	rjmp	.+374    	; 0x420 <__vector_51+0x210>
       {
        st[i++]=decode1(data);
     2aa:	00 91 34 03 	lds	r16, 0x0334
     2ae:	10 91 35 03 	lds	r17, 0x0335
     2b2:	80 91 c1 03 	lds	r24, 0x03C1
     2b6:	0e 94 46 02 	call	0x48c	; 0x48c <decode1>
     2ba:	28 2f       	mov	r18, r24
     2bc:	c8 01       	movw	r24, r16
     2be:	88 53       	subi	r24, 0x38	; 56
     2c0:	9c 4f       	sbci	r25, 0xFC	; 252
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
     2c6:	c8 01       	movw	r24, r16
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	90 93 35 03 	sts	0x0335, r25
     2ce:	80 93 34 03 	sts	0x0334, r24
     2d2:	a6 c0       	rjmp	.+332    	; 0x420 <__vector_51+0x210>
       }	   		      
  }
	else
	{
		if((data>='A'&&data<='Z' )||(data>='0'&& data<='9'))
     2d4:	80 91 c1 03 	lds	r24, 0x03C1
     2d8:	81 34       	cpi	r24, 0x41	; 65
     2da:	20 f0       	brcs	.+8      	; 0x2e4 <__vector_51+0xd4>
     2dc:	80 91 c1 03 	lds	r24, 0x03C1
     2e0:	8b 35       	cpi	r24, 0x5B	; 91
     2e2:	50 f0       	brcs	.+20     	; 0x2f8 <__vector_51+0xe8>
     2e4:	80 91 c1 03 	lds	r24, 0x03C1
     2e8:	80 33       	cpi	r24, 0x30	; 48
     2ea:	08 f4       	brcc	.+2      	; 0x2ee <__vector_51+0xde>
     2ec:	99 c0       	rjmp	.+306    	; 0x420 <__vector_51+0x210>
     2ee:	80 91 c1 03 	lds	r24, 0x03C1
     2f2:	8a 33       	cpi	r24, 0x3A	; 58
     2f4:	08 f0       	brcs	.+2      	; 0x2f8 <__vector_51+0xe8>
     2f6:	94 c0       	rjmp	.+296    	; 0x420 <__vector_51+0x210>
		{
			num[m++]=decode1(data);
     2f8:	00 91 36 03 	lds	r16, 0x0336
     2fc:	10 91 37 03 	lds	r17, 0x0337
     300:	80 91 c1 03 	lds	r24, 0x03C1
     304:	0e 94 46 02 	call	0x48c	; 0x48c <decode1>
     308:	28 2f       	mov	r18, r24
     30a:	c8 01       	movw	r24, r16
     30c:	83 5a       	subi	r24, 0xA3	; 163
     30e:	9c 4f       	sbci	r25, 0xFC	; 252
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
     314:	c8 01       	movw	r24, r16
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	90 93 37 03 	sts	0x0337, r25
     31c:	80 93 36 03 	sts	0x0336, r24
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	a0 e8       	ldi	r26, 0x80	; 128
     326:	bf e3       	ldi	r27, 0x3F	; 63
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	ab 83       	std	Y+3, r26	; 0x03
     32e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     330:	69 81       	ldd	r22, Y+1	; 0x01
     332:	7a 81       	ldd	r23, Y+2	; 0x02
     334:	8b 81       	ldd	r24, Y+3	; 0x03
     336:	9c 81       	ldd	r25, Y+4	; 0x04
     338:	26 e6       	ldi	r18, 0x66	; 102
     33a:	36 e6       	ldi	r19, 0x66	; 102
     33c:	46 e6       	ldi	r20, 0x66	; 102
     33e:	55 e4       	ldi	r21, 0x45	; 69
     340:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     344:	dc 01       	movw	r26, r24
     346:	cb 01       	movw	r24, r22
     348:	8d 83       	std	Y+5, r24	; 0x05
     34a:	9e 83       	std	Y+6, r25	; 0x06
     34c:	af 83       	std	Y+7, r26	; 0x07
     34e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     350:	11 e0       	ldi	r17, 0x01	; 1
     352:	6d 81       	ldd	r22, Y+5	; 0x05
     354:	7e 81       	ldd	r23, Y+6	; 0x06
     356:	8f 81       	ldd	r24, Y+7	; 0x07
     358:	98 85       	ldd	r25, Y+8	; 0x08
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e8       	ldi	r20, 0x80	; 128
     360:	5f e3       	ldi	r21, 0x3F	; 63
     362:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     366:	88 23       	and	r24, r24
     368:	0c f0       	brlt	.+2      	; 0x36c <__vector_51+0x15c>
     36a:	10 e0       	ldi	r17, 0x00	; 0
     36c:	11 23       	and	r17, r17
     36e:	29 f0       	breq	.+10     	; 0x37a <__vector_51+0x16a>
		__ticks = 1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	9a 87       	std	Y+10, r25	; 0x0a
     376:	89 87       	std	Y+9, r24	; 0x09
     378:	46 c0       	rjmp	.+140    	; 0x406 <__vector_51+0x1f6>
	else if (__tmp > 65535)
     37a:	11 e0       	ldi	r17, 0x01	; 1
     37c:	6d 81       	ldd	r22, Y+5	; 0x05
     37e:	7e 81       	ldd	r23, Y+6	; 0x06
     380:	8f 81       	ldd	r24, Y+7	; 0x07
     382:	98 85       	ldd	r25, Y+8	; 0x08
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	3f ef       	ldi	r19, 0xFF	; 255
     388:	4f e7       	ldi	r20, 0x7F	; 127
     38a:	57 e4       	ldi	r21, 0x47	; 71
     38c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     390:	18 16       	cp	r1, r24
     392:	0c f0       	brlt	.+2      	; 0x396 <__vector_51+0x186>
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	11 23       	and	r17, r17
     398:	61 f1       	breq	.+88     	; 0x3f2 <__vector_51+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39a:	69 81       	ldd	r22, Y+1	; 0x01
     39c:	7a 81       	ldd	r23, Y+2	; 0x02
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e2       	ldi	r20, 0x20	; 32
     3a8:	51 e4       	ldi	r21, 0x41	; 65
     3aa:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	bc 01       	movw	r22, r24
     3b4:	cd 01       	movw	r24, r26
     3b6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	9a 87       	std	Y+10, r25	; 0x0a
     3c0:	89 87       	std	Y+9, r24	; 0x09
     3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <__vector_51+0x1d8>
     3c4:	80 e7       	ldi	r24, 0x70	; 112
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	9c 87       	std	Y+12, r25	; 0x0c
     3ca:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     3d0:	8c 01       	movw	r16, r24
     3d2:	c8 01       	movw	r24, r16
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <__vector_51+0x1c4>
     3d8:	8c 01       	movw	r16, r24
     3da:	1c 87       	std	Y+12, r17	; 0x0c
     3dc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3de:	89 85       	ldd	r24, Y+9	; 0x09
     3e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	9a 87       	std	Y+10, r25	; 0x0a
     3e6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e8:	89 85       	ldd	r24, Y+9	; 0x09
     3ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	51 f7       	brne	.-44     	; 0x3c4 <__vector_51+0x1b4>
     3f0:	17 c0       	rjmp	.+46     	; 0x420 <__vector_51+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f2:	6d 81       	ldd	r22, Y+5	; 0x05
     3f4:	7e 81       	ldd	r23, Y+6	; 0x06
     3f6:	8f 81       	ldd	r24, Y+7	; 0x07
     3f8:	98 85       	ldd	r25, Y+8	; 0x08
     3fa:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	9a 87       	std	Y+10, r25	; 0x0a
     404:	89 87       	std	Y+9, r24	; 0x09
     406:	89 85       	ldd	r24, Y+9	; 0x09
     408:	9a 85       	ldd	r25, Y+10	; 0x0a
     40a:	9e 87       	std	Y+14, r25	; 0x0e
     40c:	8d 87       	std	Y+13, r24	; 0x0d
     40e:	8d 85       	ldd	r24, Y+13	; 0x0d
     410:	9e 85       	ldd	r25, Y+14	; 0x0e
     412:	8c 01       	movw	r16, r24
     414:	f8 01       	movw	r30, r16
     416:	31 97       	sbiw	r30, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__vector_51+0x206>
     41a:	8f 01       	movw	r16, r30
     41c:	1e 87       	std	Y+14, r17	; 0x0e
     41e:	0d 87       	std	Y+13, r16	; 0x0d
			_delay_ms(1);
		}
	}
	
}
     420:	2e 96       	adiw	r28, 0x0e	; 14
     422:	de bf       	out	0x3e, r29	; 62
     424:	cd bf       	out	0x3d, r28	; 61
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	0f 90       	pop	r0
     448:	00 92 5b 00 	sts	0x005B, r0
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <resetCon>:

void resetCon()
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
	cf1=cf2=cf3=0;
     45e:	10 92 41 03 	sts	0x0341, r1
     462:	10 92 40 03 	sts	0x0340, r1
     466:	80 91 40 03 	lds	r24, 0x0340
     46a:	90 91 41 03 	lds	r25, 0x0341
     46e:	90 93 3f 03 	sts	0x033F, r25
     472:	80 93 3e 03 	sts	0x033E, r24
     476:	80 91 3e 03 	lds	r24, 0x033E
     47a:	90 91 3f 03 	lds	r25, 0x033F
     47e:	90 93 3d 03 	sts	0x033D, r25
     482:	80 93 3c 03 	sts	0x033C, r24
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <decode1>:

char decode1(char data)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	0f 92       	push	r0
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	89 83       	std	Y+1, r24	; 0x01
 switch(data)
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	aa 27       	eor	r26, r26
     4a0:	97 fd       	sbrc	r25, 7
     4a2:	a0 95       	com	r26
     4a4:	ba 2f       	mov	r27, r26
     4a6:	4a e0       	ldi	r20, 0x0A	; 10
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	20 e5       	ldi	r18, 0x50	; 80
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	84 1b       	sub	r24, r20
     4b0:	95 0b       	sbc	r25, r21
     4b2:	28 17       	cp	r18, r24
     4b4:	39 07       	cpc	r19, r25
     4b6:	08 f4       	brcc	.+2      	; 0x4ba <decode1+0x2e>
     4b8:	65 c0       	rjmp	.+202    	; 0x584 <decode1+0xf8>
     4ba:	8e 58       	subi	r24, 0x8E	; 142
     4bc:	9f 4f       	sbci	r25, 0xFF	; 255
     4be:	fc 01       	movw	r30, r24
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	05 90       	lpm	r0, Z+
     4c6:	f4 91       	lpm	r31, Z
     4c8:	e0 2d       	mov	r30, r0
     4ca:	19 94       	eijmp
 {
  case 'A':return 'A';
     4cc:	81 e4       	ldi	r24, 0x41	; 65
     4ce:	5b c0       	rjmp	.+182    	; 0x586 <decode1+0xfa>
           break;
  case 'B':return 'B';
     4d0:	82 e4       	ldi	r24, 0x42	; 66
     4d2:	59 c0       	rjmp	.+178    	; 0x586 <decode1+0xfa>
           break;
  case 'C':return 'C';
     4d4:	83 e4       	ldi	r24, 0x43	; 67
     4d6:	57 c0       	rjmp	.+174    	; 0x586 <decode1+0xfa>
           break;
  case 'D':return 'D';
     4d8:	84 e4       	ldi	r24, 0x44	; 68
     4da:	55 c0       	rjmp	.+170    	; 0x586 <decode1+0xfa>
           break;
  case 'E':return 'E';
     4dc:	85 e4       	ldi	r24, 0x45	; 69
     4de:	53 c0       	rjmp	.+166    	; 0x586 <decode1+0xfa>
           break;
  case 'F':return 'F';
     4e0:	86 e4       	ldi	r24, 0x46	; 70
     4e2:	51 c0       	rjmp	.+162    	; 0x586 <decode1+0xfa>
           break;
  case 'G':return 'G';
     4e4:	87 e4       	ldi	r24, 0x47	; 71
     4e6:	4f c0       	rjmp	.+158    	; 0x586 <decode1+0xfa>
           break;
  case 'H':return 'H';
     4e8:	88 e4       	ldi	r24, 0x48	; 72
     4ea:	4d c0       	rjmp	.+154    	; 0x586 <decode1+0xfa>
           break;
  case 'I':return 'I';
     4ec:	89 e4       	ldi	r24, 0x49	; 73
     4ee:	4b c0       	rjmp	.+150    	; 0x586 <decode1+0xfa>
           break; 
  case 'J':return 'J';
     4f0:	8a e4       	ldi	r24, 0x4A	; 74
     4f2:	49 c0       	rjmp	.+146    	; 0x586 <decode1+0xfa>
           break;
  case 'K':return 'K';
     4f4:	8b e4       	ldi	r24, 0x4B	; 75
     4f6:	47 c0       	rjmp	.+142    	; 0x586 <decode1+0xfa>
           break;
  case 'L':return 'L';
     4f8:	8c e4       	ldi	r24, 0x4C	; 76
     4fa:	45 c0       	rjmp	.+138    	; 0x586 <decode1+0xfa>
           break;
  case 'M':return 'M';
     4fc:	8d e4       	ldi	r24, 0x4D	; 77
     4fe:	43 c0       	rjmp	.+134    	; 0x586 <decode1+0xfa>
           break;
  case 'N':return 'N';
     500:	8e e4       	ldi	r24, 0x4E	; 78
     502:	41 c0       	rjmp	.+130    	; 0x586 <decode1+0xfa>
           break;
  case 'O':return 'O';
     504:	8f e4       	ldi	r24, 0x4F	; 79
     506:	3f c0       	rjmp	.+126    	; 0x586 <decode1+0xfa>
            break;
  case 'P':return 'P';
     508:	80 e5       	ldi	r24, 0x50	; 80
     50a:	3d c0       	rjmp	.+122    	; 0x586 <decode1+0xfa>
            break;
  case 'Q':return 'Q';
     50c:	81 e5       	ldi	r24, 0x51	; 81
     50e:	3b c0       	rjmp	.+118    	; 0x586 <decode1+0xfa>
            break;
  case 'R':return 'R';
     510:	82 e5       	ldi	r24, 0x52	; 82
     512:	39 c0       	rjmp	.+114    	; 0x586 <decode1+0xfa>
            break;
  case 'S':return 'S';
     514:	83 e5       	ldi	r24, 0x53	; 83
     516:	37 c0       	rjmp	.+110    	; 0x586 <decode1+0xfa>
            break;
  case 'T':return 'T';
     518:	84 e5       	ldi	r24, 0x54	; 84
     51a:	35 c0       	rjmp	.+106    	; 0x586 <decode1+0xfa>
            break;
  case 'U':return 'U';
     51c:	85 e5       	ldi	r24, 0x55	; 85
     51e:	33 c0       	rjmp	.+102    	; 0x586 <decode1+0xfa>
            break;
  case 'V':return 'V';
     520:	86 e5       	ldi	r24, 0x56	; 86
     522:	31 c0       	rjmp	.+98     	; 0x586 <decode1+0xfa>
            break;
  case 'W':return 'W';
     524:	87 e5       	ldi	r24, 0x57	; 87
     526:	2f c0       	rjmp	.+94     	; 0x586 <decode1+0xfa>
            break;
  case 'X':return 'X';
     528:	88 e5       	ldi	r24, 0x58	; 88
     52a:	2d c0       	rjmp	.+90     	; 0x586 <decode1+0xfa>
            break;
  case 'Y':return 'Y';
     52c:	89 e5       	ldi	r24, 0x59	; 89
     52e:	2b c0       	rjmp	.+86     	; 0x586 <decode1+0xfa>
            break;
  case 'Z':return 'Z';
     530:	8a e5       	ldi	r24, 0x5A	; 90
     532:	29 c0       	rjmp	.+82     	; 0x586 <decode1+0xfa>
            break;
  case '0':return '0';
     534:	80 e3       	ldi	r24, 0x30	; 48
     536:	27 c0       	rjmp	.+78     	; 0x586 <decode1+0xfa>
            break;
  case '1':return '1';
     538:	81 e3       	ldi	r24, 0x31	; 49
     53a:	25 c0       	rjmp	.+74     	; 0x586 <decode1+0xfa>
            break;
  case '2':return '2';
     53c:	82 e3       	ldi	r24, 0x32	; 50
     53e:	23 c0       	rjmp	.+70     	; 0x586 <decode1+0xfa>
            break;
  case '3':return '3';
     540:	83 e3       	ldi	r24, 0x33	; 51
     542:	21 c0       	rjmp	.+66     	; 0x586 <decode1+0xfa>
            break;
  case '4':return '4';
     544:	84 e3       	ldi	r24, 0x34	; 52
     546:	1f c0       	rjmp	.+62     	; 0x586 <decode1+0xfa>
            break;
  case '5':return '5';
     548:	85 e3       	ldi	r24, 0x35	; 53
     54a:	1d c0       	rjmp	.+58     	; 0x586 <decode1+0xfa>
            break;
  case '6':return '6';
     54c:	86 e3       	ldi	r24, 0x36	; 54
     54e:	1b c0       	rjmp	.+54     	; 0x586 <decode1+0xfa>
            break;
  case '7':return '7';
     550:	87 e3       	ldi	r24, 0x37	; 55
     552:	19 c0       	rjmp	.+50     	; 0x586 <decode1+0xfa>
            break;
  case '8':return '8';
     554:	88 e3       	ldi	r24, 0x38	; 56
     556:	17 c0       	rjmp	.+46     	; 0x586 <decode1+0xfa>
            break;
  case '9':return '9';
     558:	89 e3       	ldi	r24, 0x39	; 57
     55a:	15 c0       	rjmp	.+42     	; 0x586 <decode1+0xfa>
            break;
  case ',':return ',';
     55c:	8c e2       	ldi	r24, 0x2C	; 44
     55e:	13 c0       	rjmp	.+38     	; 0x586 <decode1+0xfa>
            break;
  case '.':return '.';
     560:	8e e2       	ldi	r24, 0x2E	; 46
     562:	11 c0       	rjmp	.+34     	; 0x586 <decode1+0xfa>
            break;
  case '/':return '/';
     564:	8f e2       	ldi	r24, 0x2F	; 47
     566:	0f c0       	rjmp	.+30     	; 0x586 <decode1+0xfa>
            break;
  case ':':return ':';
     568:	8a e3       	ldi	r24, 0x3A	; 58
     56a:	0d c0       	rjmp	.+26     	; 0x586 <decode1+0xfa>
            break;
  case ';':return ';';
     56c:	8b e3       	ldi	r24, 0x3B	; 59
     56e:	0b c0       	rjmp	.+22     	; 0x586 <decode1+0xfa>
            break;
  case '+':return '+';
     570:	8b e2       	ldi	r24, 0x2B	; 43
     572:	09 c0       	rjmp	.+18     	; 0x586 <decode1+0xfa>
            break;
  case '=':return '=';
     574:	8d e3       	ldi	r24, 0x3D	; 61
     576:	07 c0       	rjmp	.+14     	; 0x586 <decode1+0xfa>
            break; 
  case '?':return '?';
     578:	8f e3       	ldi	r24, 0x3F	; 63
     57a:	05 c0       	rjmp	.+10     	; 0x586 <decode1+0xfa>
            break;
  case '\n':return '#';
     57c:	83 e2       	ldi	r24, 0x23	; 35
     57e:	03 c0       	rjmp	.+6      	; 0x586 <decode1+0xfa>
    
	        break;
  case '\r':return '#';
     580:	83 e2       	ldi	r24, 0x23	; 35
     582:	01 c0       	rjmp	.+2      	; 0x586 <decode1+0xfa>
  case 'A':return 'A';
            break;
*/


 default: return 'm';
     584:	8d e6       	ldi	r24, 0x6D	; 109
 }


}
     586:	0f 90       	pop	r0
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <checkDevice>:


int checkDevice()
{
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	aa 97       	sbiw	r28, 0x2a	; 42
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
 init_devices5(); //housekeeping stuff
     5a6:	88 e4       	ldi	r24, 0x48	; 72
     5a8:	97 e0       	ldi	r25, 0x07	; 7
     5aa:	fc 01       	movw	r30, r24
     5ac:	19 95       	eicall
    while(check!=1)
     5ae:	a7 c1       	rjmp	.+846    	; 0x8fe <checkDevice+0x370>
	{
    
	 UDR2 = 0x41 ;
     5b0:	86 ed       	ldi	r24, 0xD6	; 214
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	21 e4       	ldi	r18, 0x41	; 65
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
	 UDR2 = 0x54;
     5ba:	86 ed       	ldi	r24, 0xD6	; 214
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	24 e5       	ldi	r18, 0x54	; 84
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	a8 ec       	ldi	r26, 0xC8	; 200
     5ca:	b2 e4       	ldi	r27, 0x42	; 66
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	ab 83       	std	Y+3, r26	; 0x03
     5d2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5d4:	69 81       	ldd	r22, Y+1	; 0x01
     5d6:	7a 81       	ldd	r23, Y+2	; 0x02
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
     5da:	9c 81       	ldd	r25, Y+4	; 0x04
     5dc:	26 e6       	ldi	r18, 0x66	; 102
     5de:	36 e6       	ldi	r19, 0x66	; 102
     5e0:	46 e6       	ldi	r20, 0x66	; 102
     5e2:	55 e4       	ldi	r21, 0x45	; 69
     5e4:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	8d 83       	std	Y+5, r24	; 0x05
     5ee:	9e 83       	std	Y+6, r25	; 0x06
     5f0:	af 83       	std	Y+7, r26	; 0x07
     5f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5f4:	11 e0       	ldi	r17, 0x01	; 1
     5f6:	6d 81       	ldd	r22, Y+5	; 0x05
     5f8:	7e 81       	ldd	r23, Y+6	; 0x06
     5fa:	8f 81       	ldd	r24, Y+7	; 0x07
     5fc:	98 85       	ldd	r25, Y+8	; 0x08
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e8       	ldi	r20, 0x80	; 128
     604:	5f e3       	ldi	r21, 0x3F	; 63
     606:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     60a:	88 23       	and	r24, r24
     60c:	0c f0       	brlt	.+2      	; 0x610 <checkDevice+0x82>
     60e:	10 e0       	ldi	r17, 0x00	; 0
     610:	11 23       	and	r17, r17
     612:	29 f0       	breq	.+10     	; 0x61e <checkDevice+0x90>
		__ticks = 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	9a 87       	std	Y+10, r25	; 0x0a
     61a:	89 87       	std	Y+9, r24	; 0x09
     61c:	46 c0       	rjmp	.+140    	; 0x6aa <checkDevice+0x11c>
	else if (__tmp > 65535)
     61e:	11 e0       	ldi	r17, 0x01	; 1
     620:	6d 81       	ldd	r22, Y+5	; 0x05
     622:	7e 81       	ldd	r23, Y+6	; 0x06
     624:	8f 81       	ldd	r24, Y+7	; 0x07
     626:	98 85       	ldd	r25, Y+8	; 0x08
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3f ef       	ldi	r19, 0xFF	; 255
     62c:	4f e7       	ldi	r20, 0x7F	; 127
     62e:	57 e4       	ldi	r21, 0x47	; 71
     630:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     634:	18 16       	cp	r1, r24
     636:	0c f0       	brlt	.+2      	; 0x63a <checkDevice+0xac>
     638:	10 e0       	ldi	r17, 0x00	; 0
     63a:	11 23       	and	r17, r17
     63c:	61 f1       	breq	.+88     	; 0x696 <checkDevice+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63e:	69 81       	ldd	r22, Y+1	; 0x01
     640:	7a 81       	ldd	r23, Y+2	; 0x02
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	9c 81       	ldd	r25, Y+4	; 0x04
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e2       	ldi	r20, 0x20	; 32
     64c:	51 e4       	ldi	r21, 0x41	; 65
     64e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	9a 87       	std	Y+10, r25	; 0x0a
     664:	89 87       	std	Y+9, r24	; 0x09
     666:	12 c0       	rjmp	.+36     	; 0x68c <checkDevice+0xfe>
     668:	80 e7       	ldi	r24, 0x70	; 112
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	9c 87       	std	Y+12, r25	; 0x0c
     66e:	8b 87       	std	Y+11, r24	; 0x0b
     670:	8b 85       	ldd	r24, Y+11	; 0x0b
     672:	9c 85       	ldd	r25, Y+12	; 0x0c
     674:	8c 01       	movw	r16, r24
     676:	c8 01       	movw	r24, r16
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <checkDevice+0xea>
     67c:	8c 01       	movw	r16, r24
     67e:	1c 87       	std	Y+12, r17	; 0x0c
     680:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     682:	89 85       	ldd	r24, Y+9	; 0x09
     684:	9a 85       	ldd	r25, Y+10	; 0x0a
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	9a 87       	std	Y+10, r25	; 0x0a
     68a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     68c:	89 85       	ldd	r24, Y+9	; 0x09
     68e:	9a 85       	ldd	r25, Y+10	; 0x0a
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	51 f7       	brne	.-44     	; 0x668 <checkDevice+0xda>
     694:	17 c0       	rjmp	.+46     	; 0x6c4 <checkDevice+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     696:	6d 81       	ldd	r22, Y+5	; 0x05
     698:	7e 81       	ldd	r23, Y+6	; 0x06
     69a:	8f 81       	ldd	r24, Y+7	; 0x07
     69c:	98 85       	ldd	r25, Y+8	; 0x08
     69e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	9a 87       	std	Y+10, r25	; 0x0a
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	89 85       	ldd	r24, Y+9	; 0x09
     6ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ae:	9e 87       	std	Y+14, r25	; 0x0e
     6b0:	8d 87       	std	Y+13, r24	; 0x0d
     6b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b6:	8c 01       	movw	r16, r24
     6b8:	f8 01       	movw	r30, r16
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <checkDevice+0x12c>
     6be:	8f 01       	movw	r16, r30
     6c0:	1e 87       	std	Y+14, r17	; 0x0e
     6c2:	0d 87       	std	Y+13, r16	; 0x0d
	 _delay_ms(100);
	 UDR2== 0xA;
     6c4:	86 ed       	ldi	r24, 0xD6	; 214
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	a8 ec       	ldi	r26, 0xC8	; 200
     6d2:	b2 e4       	ldi	r27, 0x42	; 66
     6d4:	8f 87       	std	Y+15, r24	; 0x0f
     6d6:	98 8b       	std	Y+16, r25	; 0x10
     6d8:	a9 8b       	std	Y+17, r26	; 0x11
     6da:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     6dc:	6f 85       	ldd	r22, Y+15	; 0x0f
     6de:	78 89       	ldd	r23, Y+16	; 0x10
     6e0:	89 89       	ldd	r24, Y+17	; 0x11
     6e2:	9a 89       	ldd	r25, Y+18	; 0x12
     6e4:	26 e6       	ldi	r18, 0x66	; 102
     6e6:	36 e6       	ldi	r19, 0x66	; 102
     6e8:	46 e6       	ldi	r20, 0x66	; 102
     6ea:	55 e4       	ldi	r21, 0x45	; 69
     6ec:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	8b 8b       	std	Y+19, r24	; 0x13
     6f6:	9c 8b       	std	Y+20, r25	; 0x14
     6f8:	ad 8b       	std	Y+21, r26	; 0x15
     6fa:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     6fc:	11 e0       	ldi	r17, 0x01	; 1
     6fe:	6b 89       	ldd	r22, Y+19	; 0x13
     700:	7c 89       	ldd	r23, Y+20	; 0x14
     702:	8d 89       	ldd	r24, Y+21	; 0x15
     704:	9e 89       	ldd	r25, Y+22	; 0x16
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e8       	ldi	r20, 0x80	; 128
     70c:	5f e3       	ldi	r21, 0x3F	; 63
     70e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     712:	88 23       	and	r24, r24
     714:	0c f0       	brlt	.+2      	; 0x718 <checkDevice+0x18a>
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	11 23       	and	r17, r17
     71a:	29 f0       	breq	.+10     	; 0x726 <checkDevice+0x198>
		__ticks = 1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	98 8f       	std	Y+24, r25	; 0x18
     722:	8f 8b       	std	Y+23, r24	; 0x17
     724:	46 c0       	rjmp	.+140    	; 0x7b2 <checkDevice+0x224>
	else if (__tmp > 65535)
     726:	11 e0       	ldi	r17, 0x01	; 1
     728:	6b 89       	ldd	r22, Y+19	; 0x13
     72a:	7c 89       	ldd	r23, Y+20	; 0x14
     72c:	8d 89       	ldd	r24, Y+21	; 0x15
     72e:	9e 89       	ldd	r25, Y+22	; 0x16
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	3f ef       	ldi	r19, 0xFF	; 255
     734:	4f e7       	ldi	r20, 0x7F	; 127
     736:	57 e4       	ldi	r21, 0x47	; 71
     738:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     73c:	18 16       	cp	r1, r24
     73e:	0c f0       	brlt	.+2      	; 0x742 <checkDevice+0x1b4>
     740:	10 e0       	ldi	r17, 0x00	; 0
     742:	11 23       	and	r17, r17
     744:	61 f1       	breq	.+88     	; 0x79e <checkDevice+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     746:	6f 85       	ldd	r22, Y+15	; 0x0f
     748:	78 89       	ldd	r23, Y+16	; 0x10
     74a:	89 89       	ldd	r24, Y+17	; 0x11
     74c:	9a 89       	ldd	r25, Y+18	; 0x12
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e2       	ldi	r20, 0x20	; 32
     754:	51 e4       	ldi	r21, 0x41	; 65
     756:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	bc 01       	movw	r22, r24
     760:	cd 01       	movw	r24, r26
     762:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	98 8f       	std	Y+24, r25	; 0x18
     76c:	8f 8b       	std	Y+23, r24	; 0x17
     76e:	12 c0       	rjmp	.+36     	; 0x794 <checkDevice+0x206>
     770:	80 e7       	ldi	r24, 0x70	; 112
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	9a 8f       	std	Y+26, r25	; 0x1a
     776:	89 8f       	std	Y+25, r24	; 0x19
     778:	89 8d       	ldd	r24, Y+25	; 0x19
     77a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     77c:	8c 01       	movw	r16, r24
     77e:	c8 01       	movw	r24, r16
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <checkDevice+0x1f2>
     784:	8c 01       	movw	r16, r24
     786:	1a 8f       	std	Y+26, r17	; 0x1a
     788:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     78a:	8f 89       	ldd	r24, Y+23	; 0x17
     78c:	98 8d       	ldd	r25, Y+24	; 0x18
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	98 8f       	std	Y+24, r25	; 0x18
     792:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     794:	8f 89       	ldd	r24, Y+23	; 0x17
     796:	98 8d       	ldd	r25, Y+24	; 0x18
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	51 f7       	brne	.-44     	; 0x770 <checkDevice+0x1e2>
     79c:	17 c0       	rjmp	.+46     	; 0x7cc <checkDevice+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79e:	6b 89       	ldd	r22, Y+19	; 0x13
     7a0:	7c 89       	ldd	r23, Y+20	; 0x14
     7a2:	8d 89       	ldd	r24, Y+21	; 0x15
     7a4:	9e 89       	ldd	r25, Y+22	; 0x16
     7a6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	98 8f       	std	Y+24, r25	; 0x18
     7b0:	8f 8b       	std	Y+23, r24	; 0x17
     7b2:	8f 89       	ldd	r24, Y+23	; 0x17
     7b4:	98 8d       	ldd	r25, Y+24	; 0x18
     7b6:	9c 8f       	std	Y+28, r25	; 0x1c
     7b8:	8b 8f       	std	Y+27, r24	; 0x1b
     7ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7be:	8c 01       	movw	r16, r24
     7c0:	f8 01       	movw	r30, r16
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <checkDevice+0x234>
     7c6:	8f 01       	movw	r16, r30
     7c8:	1c 8f       	std	Y+28, r17	; 0x1c
     7ca:	0b 8f       	std	Y+27, r16	; 0x1b
	 _delay_ms(100);
	 UDR2=0xD;
     7cc:	86 ed       	ldi	r24, 0xD6	; 214
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2d e0       	ldi	r18, 0x0D	; 13
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
	 UDR2=0xA;
     7d6:	86 ed       	ldi	r24, 0xD6	; 214
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	2a e0       	ldi	r18, 0x0A	; 10
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a8 ec       	ldi	r26, 0xC8	; 200
     7e6:	b3 e4       	ldi	r27, 0x43	; 67
     7e8:	8d 8f       	std	Y+29, r24	; 0x1d
     7ea:	9e 8f       	std	Y+30, r25	; 0x1e
     7ec:	af 8f       	std	Y+31, r26	; 0x1f
     7ee:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7f6:	98 a1       	lds	r25, 0x48
     7f8:	26 e6       	ldi	r18, 0x66	; 102
     7fa:	36 e6       	ldi	r19, 0x66	; 102
     7fc:	46 e6       	ldi	r20, 0x66	; 102
     7fe:	55 e4       	ldi	r21, 0x45	; 69
     800:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	89 a3       	lds	r24, 0x59
     80a:	9a a3       	lds	r25, 0x5a
     80c:	ab a3       	lds	r26, 0x5b
     80e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     810:	11 e0       	ldi	r17, 0x01	; 1
     812:	69 a1       	lds	r22, 0x49
     814:	7a a1       	lds	r23, 0x4a
     816:	8b a1       	lds	r24, 0x4b
     818:	9c a1       	lds	r25, 0x4c
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e8       	ldi	r20, 0x80	; 128
     820:	5f e3       	ldi	r21, 0x3F	; 63
     822:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     826:	88 23       	and	r24, r24
     828:	0c f0       	brlt	.+2      	; 0x82c <checkDevice+0x29e>
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	11 23       	and	r17, r17
     82e:	29 f0       	breq	.+10     	; 0x83a <checkDevice+0x2ac>
		__ticks = 1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	9e a3       	lds	r25, 0x5e
     836:	8d a3       	lds	r24, 0x5d
     838:	46 c0       	rjmp	.+140    	; 0x8c6 <checkDevice+0x338>
	else if (__tmp > 65535)
     83a:	11 e0       	ldi	r17, 0x01	; 1
     83c:	69 a1       	lds	r22, 0x49
     83e:	7a a1       	lds	r23, 0x4a
     840:	8b a1       	lds	r24, 0x4b
     842:	9c a1       	lds	r25, 0x4c
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	3f ef       	ldi	r19, 0xFF	; 255
     848:	4f e7       	ldi	r20, 0x7F	; 127
     84a:	57 e4       	ldi	r21, 0x47	; 71
     84c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	0c f0       	brlt	.+2      	; 0x856 <checkDevice+0x2c8>
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	11 23       	and	r17, r17
     858:	61 f1       	breq	.+88     	; 0x8b2 <checkDevice+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     85c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     85e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     860:	98 a1       	lds	r25, 0x48
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e2       	ldi	r20, 0x20	; 32
     868:	51 e4       	ldi	r21, 0x41	; 65
     86a:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	bc 01       	movw	r22, r24
     874:	cd 01       	movw	r24, r26
     876:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	9e a3       	lds	r25, 0x5e
     880:	8d a3       	lds	r24, 0x5d
     882:	12 c0       	rjmp	.+36     	; 0x8a8 <checkDevice+0x31a>
     884:	80 e7       	ldi	r24, 0x70	; 112
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	98 a7       	lds	r25, 0x78
     88a:	8f a3       	lds	r24, 0x5f
     88c:	8f a1       	lds	r24, 0x4f
     88e:	98 a5       	lds	r25, 0x68
     890:	8c 01       	movw	r16, r24
     892:	c8 01       	movw	r24, r16
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <checkDevice+0x306>
     898:	8c 01       	movw	r16, r24
     89a:	18 a7       	lds	r17, 0x78
     89c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89e:	8d a1       	lds	r24, 0x4d
     8a0:	9e a1       	lds	r25, 0x4e
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	9e a3       	lds	r25, 0x5e
     8a6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a8:	8d a1       	lds	r24, 0x4d
     8aa:	9e a1       	lds	r25, 0x4e
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	51 f7       	brne	.-44     	; 0x884 <checkDevice+0x2f6>
     8b0:	17 c0       	rjmp	.+46     	; 0x8e0 <checkDevice+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8b2:	69 a1       	lds	r22, 0x49
     8b4:	7a a1       	lds	r23, 0x4a
     8b6:	8b a1       	lds	r24, 0x4b
     8b8:	9c a1       	lds	r25, 0x4c
     8ba:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	9e a3       	lds	r25, 0x5e
     8c4:	8d a3       	lds	r24, 0x5d
     8c6:	8d a1       	lds	r24, 0x4d
     8c8:	9e a1       	lds	r25, 0x4e
     8ca:	9a a7       	lds	r25, 0x7a
     8cc:	89 a7       	lds	r24, 0x79
     8ce:	89 a5       	lds	r24, 0x69
     8d0:	9a a5       	lds	r25, 0x6a
     8d2:	8c 01       	movw	r16, r24
     8d4:	f8 01       	movw	r30, r16
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <checkDevice+0x348>
     8da:	8f 01       	movw	r16, r30
     8dc:	1a a7       	lds	r17, 0x7a
     8de:	09 a7       	lds	r16, 0x79

     _delay_ms(400);

	 
	 if(strcmp(st,"ATOK")==0)
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	32 e0       	ldi	r19, 0x02	; 2
     8e8:	b9 01       	movw	r22, r18
     8ea:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <strcmp>
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	31 f4       	brne	.+12     	; 0x8fe <checkDevice+0x370>
	 check=1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 39 03 	sts	0x0339, r25
     8fa:	80 93 38 03 	sts	0x0338, r24


int checkDevice()
{
 init_devices5(); //housekeeping stuff
    while(check!=1)
     8fe:	80 91 38 03 	lds	r24, 0x0338
     902:	90 91 39 03 	lds	r25, 0x0339
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	91 05       	cpc	r25, r1
     90a:	09 f0       	breq	.+2      	; 0x90e <checkDevice+0x380>
     90c:	51 ce       	rjmp	.-862    	; 0x5b0 <checkDevice+0x22>

	 
	 if(strcmp(st,"ATOK")==0)
	 check=1;
	}
	return 1;  
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
}
     912:	aa 96       	adiw	r28, 0x2a	; 42
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <reset>:

void reset()
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     for(j=0;j<=i;j++)
     930:	10 92 51 03 	sts	0x0351, r1
     934:	10 92 50 03 	sts	0x0350, r1
     938:	11 c0       	rjmp	.+34     	; 0x95c <reset+0x34>
	 {
	  st[j]='\0'; 
     93a:	80 91 50 03 	lds	r24, 0x0350
     93e:	90 91 51 03 	lds	r25, 0x0351
     942:	88 53       	subi	r24, 0x38	; 56
     944:	9c 4f       	sbci	r25, 0xFC	; 252
     946:	fc 01       	movw	r30, r24
     948:	10 82       	st	Z, r1
	return 1;  
}

void reset()
{
     for(j=0;j<=i;j++)
     94a:	80 91 50 03 	lds	r24, 0x0350
     94e:	90 91 51 03 	lds	r25, 0x0351
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	90 93 51 03 	sts	0x0351, r25
     958:	80 93 50 03 	sts	0x0350, r24
     95c:	20 91 50 03 	lds	r18, 0x0350
     960:	30 91 51 03 	lds	r19, 0x0351
     964:	80 91 34 03 	lds	r24, 0x0334
     968:	90 91 35 03 	lds	r25, 0x0335
     96c:	82 17       	cp	r24, r18
     96e:	93 07       	cpc	r25, r19
     970:	24 f7       	brge	.-56     	; 0x93a <reset+0x12>
	 {
	  st[j]='\0'; 
	 }
	 i=0;	
     972:	10 92 35 03 	sts	0x0335, r1
     976:	10 92 34 03 	sts	0x0334, r1
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <numreset>:
void numreset()
{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	0f 92       	push	r0
     986:	0f 92       	push	r0
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
	int j;
	for(j=0;j<=m;j++)
     98c:	1a 82       	std	Y+2, r1	; 0x02
     98e:	19 82       	std	Y+1, r1	; 0x01
     990:	0b c0       	rjmp	.+22     	; 0x9a8 <numreset+0x28>
	{
		num[j]='\0';
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	83 5a       	subi	r24, 0xA3	; 163
     998:	9c 4f       	sbci	r25, 0xFC	; 252
     99a:	fc 01       	movw	r30, r24
     99c:	10 82       	st	Z, r1
	 i=0;	
}
void numreset()
{
	int j;
	for(j=0;j<=m;j++)
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	80 91 36 03 	lds	r24, 0x0336
     9ac:	90 91 37 03 	lds	r25, 0x0337
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	3a 81       	ldd	r19, Y+2	; 0x02
     9b4:	82 17       	cp	r24, r18
     9b6:	93 07       	cpc	r25, r19
     9b8:	64 f7       	brge	.-40     	; 0x992 <numreset+0x12>
	{
		num[j]='\0';
	}
	m=0;
     9ba:	10 92 37 03 	sts	0x0337, r1
     9be:	10 92 36 03 	sts	0x0336, r1
}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <receiveData>:

char receiveData()
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
 return st;
     9d4:	88 ec       	ldi	r24, 0xC8	; 200
     9d6:	93 e0       	ldi	r25, 0x03	; 3
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <parseOK>:




int parseOK(char *ch)
{
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	ea 97       	sbiw	r28, 0x3a	; 58
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	9a af       	sts	0x7a, r25
     9f8:	89 af       	sts	0x79, r24
 //asm("wdr");
  reset();
     9fa:	0e 94 94 04 	call	0x928	; 0x928 <reset>
  while(*ch != '\0')
     9fe:	8d c0       	rjmp	.+282    	; 0xb1a <parseOK+0x13c>
	{
		UDR2=*ch;
     a00:	86 ed       	ldi	r24, 0xD6	; 214
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	29 ad       	sts	0x69, r18
     a06:	3a ad       	sts	0x6a, r19
     a08:	f9 01       	movw	r30, r18
     a0a:	20 81       	ld	r18, Z
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
		ch++;
     a10:	89 ad       	sts	0x69, r24
     a12:	9a ad       	sts	0x6a, r25
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	9a af       	sts	0x7a, r25
     a18:	89 af       	sts	0x79, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e8       	ldi	r26, 0x80	; 128
     a20:	bf e3       	ldi	r27, 0x3F	; 63
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	9a 83       	std	Y+2, r25	; 0x02
     a26:	ab 83       	std	Y+3, r26	; 0x03
     a28:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a2a:	69 81       	ldd	r22, Y+1	; 0x01
     a2c:	7a 81       	ldd	r23, Y+2	; 0x02
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	26 e6       	ldi	r18, 0x66	; 102
     a34:	36 e6       	ldi	r19, 0x66	; 102
     a36:	46 e6       	ldi	r20, 0x66	; 102
     a38:	55 e4       	ldi	r21, 0x45	; 69
     a3a:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	8d 83       	std	Y+5, r24	; 0x05
     a44:	9e 83       	std	Y+6, r25	; 0x06
     a46:	af 83       	std	Y+7, r26	; 0x07
     a48:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a4a:	11 e0       	ldi	r17, 0x01	; 1
     a4c:	6d 81       	ldd	r22, Y+5	; 0x05
     a4e:	7e 81       	ldd	r23, Y+6	; 0x06
     a50:	8f 81       	ldd	r24, Y+7	; 0x07
     a52:	98 85       	ldd	r25, Y+8	; 0x08
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e8       	ldi	r20, 0x80	; 128
     a5a:	5f e3       	ldi	r21, 0x3F	; 63
     a5c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     a60:	88 23       	and	r24, r24
     a62:	0c f0       	brlt	.+2      	; 0xa66 <parseOK+0x88>
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	11 23       	and	r17, r17
     a68:	29 f0       	breq	.+10     	; 0xa74 <parseOK+0x96>
		__ticks = 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	9a 87       	std	Y+10, r25	; 0x0a
     a70:	89 87       	std	Y+9, r24	; 0x09
     a72:	46 c0       	rjmp	.+140    	; 0xb00 <parseOK+0x122>
	else if (__tmp > 65535)
     a74:	11 e0       	ldi	r17, 0x01	; 1
     a76:	6d 81       	ldd	r22, Y+5	; 0x05
     a78:	7e 81       	ldd	r23, Y+6	; 0x06
     a7a:	8f 81       	ldd	r24, Y+7	; 0x07
     a7c:	98 85       	ldd	r25, Y+8	; 0x08
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	3f ef       	ldi	r19, 0xFF	; 255
     a82:	4f e7       	ldi	r20, 0x7F	; 127
     a84:	57 e4       	ldi	r21, 0x47	; 71
     a86:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     a8a:	18 16       	cp	r1, r24
     a8c:	0c f0       	brlt	.+2      	; 0xa90 <parseOK+0xb2>
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	11 23       	and	r17, r17
     a92:	61 f1       	breq	.+88     	; 0xaec <parseOK+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a94:	69 81       	ldd	r22, Y+1	; 0x01
     a96:	7a 81       	ldd	r23, Y+2	; 0x02
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e2       	ldi	r20, 0x20	; 32
     aa2:	51 e4       	ldi	r21, 0x41	; 65
     aa4:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	bc 01       	movw	r22, r24
     aae:	cd 01       	movw	r24, r26
     ab0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	9a 87       	std	Y+10, r25	; 0x0a
     aba:	89 87       	std	Y+9, r24	; 0x09
     abc:	12 c0       	rjmp	.+36     	; 0xae2 <parseOK+0x104>
     abe:	80 e7       	ldi	r24, 0x70	; 112
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	9c 87       	std	Y+12, r25	; 0x0c
     ac4:	8b 87       	std	Y+11, r24	; 0x0b
     ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aca:	8c 01       	movw	r16, r24
     acc:	c8 01       	movw	r24, r16
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <parseOK+0xf0>
     ad2:	8c 01       	movw	r16, r24
     ad4:	1c 87       	std	Y+12, r17	; 0x0c
     ad6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad8:	89 85       	ldd	r24, Y+9	; 0x09
     ada:	9a 85       	ldd	r25, Y+10	; 0x0a
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	9a 87       	std	Y+10, r25	; 0x0a
     ae0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae2:	89 85       	ldd	r24, Y+9	; 0x09
     ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae6:	00 97       	sbiw	r24, 0x00	; 0
     ae8:	51 f7       	brne	.-44     	; 0xabe <parseOK+0xe0>
     aea:	17 c0       	rjmp	.+46     	; 0xb1a <parseOK+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aec:	6d 81       	ldd	r22, Y+5	; 0x05
     aee:	7e 81       	ldd	r23, Y+6	; 0x06
     af0:	8f 81       	ldd	r24, Y+7	; 0x07
     af2:	98 85       	ldd	r25, Y+8	; 0x08
     af4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	9a 87       	std	Y+10, r25	; 0x0a
     afe:	89 87       	std	Y+9, r24	; 0x09
     b00:	89 85       	ldd	r24, Y+9	; 0x09
     b02:	9a 85       	ldd	r25, Y+10	; 0x0a
     b04:	9e 87       	std	Y+14, r25	; 0x0e
     b06:	8d 87       	std	Y+13, r24	; 0x0d
     b08:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b0c:	8c 01       	movw	r16, r24
     b0e:	f8 01       	movw	r30, r16
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <parseOK+0x132>
     b14:	8f 01       	movw	r16, r30
     b16:	1e 87       	std	Y+14, r17	; 0x0e
     b18:	0d 87       	std	Y+13, r16	; 0x0d

int parseOK(char *ch)
{
 //asm("wdr");
  reset();
  while(*ch != '\0')
     b1a:	89 ad       	sts	0x69, r24
     b1c:	9a ad       	sts	0x6a, r25
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	88 23       	and	r24, r24
     b24:	09 f0       	breq	.+2      	; 0xb28 <parseOK+0x14a>
     b26:	6c cf       	rjmp	.-296    	; 0xa00 <parseOK+0x22>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a8 ec       	ldi	r26, 0xC8	; 200
     b2e:	b2 e4       	ldi	r27, 0x42	; 66
     b30:	8f 87       	std	Y+15, r24	; 0x0f
     b32:	98 8b       	std	Y+16, r25	; 0x10
     b34:	a9 8b       	std	Y+17, r26	; 0x11
     b36:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b38:	6f 85       	ldd	r22, Y+15	; 0x0f
     b3a:	78 89       	ldd	r23, Y+16	; 0x10
     b3c:	89 89       	ldd	r24, Y+17	; 0x11
     b3e:	9a 89       	ldd	r25, Y+18	; 0x12
     b40:	26 e6       	ldi	r18, 0x66	; 102
     b42:	36 e6       	ldi	r19, 0x66	; 102
     b44:	46 e6       	ldi	r20, 0x66	; 102
     b46:	55 e4       	ldi	r21, 0x45	; 69
     b48:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	8b 8b       	std	Y+19, r24	; 0x13
     b52:	9c 8b       	std	Y+20, r25	; 0x14
     b54:	ad 8b       	std	Y+21, r26	; 0x15
     b56:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     b58:	11 e0       	ldi	r17, 0x01	; 1
     b5a:	6b 89       	ldd	r22, Y+19	; 0x13
     b5c:	7c 89       	ldd	r23, Y+20	; 0x14
     b5e:	8d 89       	ldd	r24, Y+21	; 0x15
     b60:	9e 89       	ldd	r25, Y+22	; 0x16
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	40 e8       	ldi	r20, 0x80	; 128
     b68:	5f e3       	ldi	r21, 0x3F	; 63
     b6a:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     b6e:	88 23       	and	r24, r24
     b70:	0c f0       	brlt	.+2      	; 0xb74 <parseOK+0x196>
     b72:	10 e0       	ldi	r17, 0x00	; 0
     b74:	11 23       	and	r17, r17
     b76:	29 f0       	breq	.+10     	; 0xb82 <parseOK+0x1a4>
		__ticks = 1;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	98 8f       	std	Y+24, r25	; 0x18
     b7e:	8f 8b       	std	Y+23, r24	; 0x17
     b80:	46 c0       	rjmp	.+140    	; 0xc0e <parseOK+0x230>
	else if (__tmp > 65535)
     b82:	11 e0       	ldi	r17, 0x01	; 1
     b84:	6b 89       	ldd	r22, Y+19	; 0x13
     b86:	7c 89       	ldd	r23, Y+20	; 0x14
     b88:	8d 89       	ldd	r24, Y+21	; 0x15
     b8a:	9e 89       	ldd	r25, Y+22	; 0x16
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	3f ef       	ldi	r19, 0xFF	; 255
     b90:	4f e7       	ldi	r20, 0x7F	; 127
     b92:	57 e4       	ldi	r21, 0x47	; 71
     b94:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     b98:	18 16       	cp	r1, r24
     b9a:	0c f0       	brlt	.+2      	; 0xb9e <parseOK+0x1c0>
     b9c:	10 e0       	ldi	r17, 0x00	; 0
     b9e:	11 23       	and	r17, r17
     ba0:	61 f1       	breq	.+88     	; 0xbfa <parseOK+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba2:	6f 85       	ldd	r22, Y+15	; 0x0f
     ba4:	78 89       	ldd	r23, Y+16	; 0x10
     ba6:	89 89       	ldd	r24, Y+17	; 0x11
     ba8:	9a 89       	ldd	r25, Y+18	; 0x12
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e2       	ldi	r20, 0x20	; 32
     bb0:	51 e4       	ldi	r21, 0x41	; 65
     bb2:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	98 8f       	std	Y+24, r25	; 0x18
     bc8:	8f 8b       	std	Y+23, r24	; 0x17
     bca:	12 c0       	rjmp	.+36     	; 0xbf0 <parseOK+0x212>
     bcc:	80 e7       	ldi	r24, 0x70	; 112
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	9a 8f       	std	Y+26, r25	; 0x1a
     bd2:	89 8f       	std	Y+25, r24	; 0x19
     bd4:	89 8d       	ldd	r24, Y+25	; 0x19
     bd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bd8:	8c 01       	movw	r16, r24
     bda:	c8 01       	movw	r24, r16
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <parseOK+0x1fe>
     be0:	8c 01       	movw	r16, r24
     be2:	1a 8f       	std	Y+26, r17	; 0x1a
     be4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be6:	8f 89       	ldd	r24, Y+23	; 0x17
     be8:	98 8d       	ldd	r25, Y+24	; 0x18
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	98 8f       	std	Y+24, r25	; 0x18
     bee:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf0:	8f 89       	ldd	r24, Y+23	; 0x17
     bf2:	98 8d       	ldd	r25, Y+24	; 0x18
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	51 f7       	brne	.-44     	; 0xbcc <parseOK+0x1ee>
     bf8:	17 c0       	rjmp	.+46     	; 0xc28 <parseOK+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bfa:	6b 89       	ldd	r22, Y+19	; 0x13
     bfc:	7c 89       	ldd	r23, Y+20	; 0x14
     bfe:	8d 89       	ldd	r24, Y+21	; 0x15
     c00:	9e 89       	ldd	r25, Y+22	; 0x16
     c02:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	98 8f       	std	Y+24, r25	; 0x18
     c0c:	8f 8b       	std	Y+23, r24	; 0x17
     c0e:	8f 89       	ldd	r24, Y+23	; 0x17
     c10:	98 8d       	ldd	r25, Y+24	; 0x18
     c12:	9c 8f       	std	Y+28, r25	; 0x1c
     c14:	8b 8f       	std	Y+27, r24	; 0x1b
     c16:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c18:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c1a:	8c 01       	movw	r16, r24
     c1c:	f8 01       	movw	r30, r16
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <parseOK+0x240>
     c22:	8f 01       	movw	r16, r30
     c24:	1c 8f       	std	Y+28, r17	; 0x1c
     c26:	0b 8f       	std	Y+27, r16	; 0x1b
		ch++;
		_delay_ms(1);

	}
	_delay_ms(100);
	 UDR2== 0xA;
     c28:	86 ed       	ldi	r24, 0xD6	; 214
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a8 ec       	ldi	r26, 0xC8	; 200
     c36:	b2 e4       	ldi	r27, 0x42	; 66
     c38:	8d 8f       	std	Y+29, r24	; 0x1d
     c3a:	9e 8f       	std	Y+30, r25	; 0x1e
     c3c:	af 8f       	std	Y+31, r26	; 0x1f
     c3e:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     c40:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c42:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c46:	98 a1       	lds	r25, 0x48
     c48:	26 e6       	ldi	r18, 0x66	; 102
     c4a:	36 e6       	ldi	r19, 0x66	; 102
     c4c:	46 e6       	ldi	r20, 0x66	; 102
     c4e:	55 e4       	ldi	r21, 0x45	; 69
     c50:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	89 a3       	lds	r24, 0x59
     c5a:	9a a3       	lds	r25, 0x5a
     c5c:	ab a3       	lds	r26, 0x5b
     c5e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     c60:	11 e0       	ldi	r17, 0x01	; 1
     c62:	69 a1       	lds	r22, 0x49
     c64:	7a a1       	lds	r23, 0x4a
     c66:	8b a1       	lds	r24, 0x4b
     c68:	9c a1       	lds	r25, 0x4c
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e8       	ldi	r20, 0x80	; 128
     c70:	5f e3       	ldi	r21, 0x3F	; 63
     c72:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     c76:	88 23       	and	r24, r24
     c78:	0c f0       	brlt	.+2      	; 0xc7c <parseOK+0x29e>
     c7a:	10 e0       	ldi	r17, 0x00	; 0
     c7c:	11 23       	and	r17, r17
     c7e:	29 f0       	breq	.+10     	; 0xc8a <parseOK+0x2ac>
		__ticks = 1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9e a3       	lds	r25, 0x5e
     c86:	8d a3       	lds	r24, 0x5d
     c88:	46 c0       	rjmp	.+140    	; 0xd16 <parseOK+0x338>
	else if (__tmp > 65535)
     c8a:	11 e0       	ldi	r17, 0x01	; 1
     c8c:	69 a1       	lds	r22, 0x49
     c8e:	7a a1       	lds	r23, 0x4a
     c90:	8b a1       	lds	r24, 0x4b
     c92:	9c a1       	lds	r25, 0x4c
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	4f e7       	ldi	r20, 0x7F	; 127
     c9a:	57 e4       	ldi	r21, 0x47	; 71
     c9c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	0c f0       	brlt	.+2      	; 0xca6 <parseOK+0x2c8>
     ca4:	10 e0       	ldi	r17, 0x00	; 0
     ca6:	11 23       	and	r17, r17
     ca8:	61 f1       	breq	.+88     	; 0xd02 <parseOK+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     caa:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cac:	7e 8d       	ldd	r23, Y+30	; 0x1e
     cae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cb0:	98 a1       	lds	r25, 0x48
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e2       	ldi	r20, 0x20	; 32
     cb8:	51 e4       	ldi	r21, 0x41	; 65
     cba:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	9e a3       	lds	r25, 0x5e
     cd0:	8d a3       	lds	r24, 0x5d
     cd2:	12 c0       	rjmp	.+36     	; 0xcf8 <parseOK+0x31a>
     cd4:	80 e7       	ldi	r24, 0x70	; 112
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	98 a7       	lds	r25, 0x78
     cda:	8f a3       	lds	r24, 0x5f
     cdc:	8f a1       	lds	r24, 0x4f
     cde:	98 a5       	lds	r25, 0x68
     ce0:	8c 01       	movw	r16, r24
     ce2:	c8 01       	movw	r24, r16
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <parseOK+0x306>
     ce8:	8c 01       	movw	r16, r24
     cea:	18 a7       	lds	r17, 0x78
     cec:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cee:	8d a1       	lds	r24, 0x4d
     cf0:	9e a1       	lds	r25, 0x4e
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	9e a3       	lds	r25, 0x5e
     cf6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf8:	8d a1       	lds	r24, 0x4d
     cfa:	9e a1       	lds	r25, 0x4e
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	51 f7       	brne	.-44     	; 0xcd4 <parseOK+0x2f6>
     d00:	17 c0       	rjmp	.+46     	; 0xd30 <parseOK+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d02:	69 a1       	lds	r22, 0x49
     d04:	7a a1       	lds	r23, 0x4a
     d06:	8b a1       	lds	r24, 0x4b
     d08:	9c a1       	lds	r25, 0x4c
     d0a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9e a3       	lds	r25, 0x5e
     d14:	8d a3       	lds	r24, 0x5d
     d16:	8d a1       	lds	r24, 0x4d
     d18:	9e a1       	lds	r25, 0x4e
     d1a:	9a a7       	lds	r25, 0x7a
     d1c:	89 a7       	lds	r24, 0x79
     d1e:	89 a5       	lds	r24, 0x69
     d20:	9a a5       	lds	r25, 0x6a
     d22:	8c 01       	movw	r16, r24
     d24:	f8 01       	movw	r30, r16
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <parseOK+0x348>
     d2a:	8f 01       	movw	r16, r30
     d2c:	1a a7       	lds	r17, 0x7a
     d2e:	09 a7       	lds	r16, 0x79
	 _delay_ms(100);
	 UDR2=0xD;
     d30:	86 ed       	ldi	r24, 0xD6	; 214
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	2d e0       	ldi	r18, 0x0D	; 13
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
	 UDR2=0xA;
     d3a:	86 ed       	ldi	r24, 0xD6	; 214
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	2a e0       	ldi	r18, 0x0A	; 10
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	aa ef       	ldi	r26, 0xFA	; 250
     d4a:	b3 e4       	ldi	r27, 0x43	; 67
     d4c:	8b a7       	lds	r24, 0x7b
     d4e:	9c a7       	lds	r25, 0x7c
     d50:	ad a7       	lds	r26, 0x7d
     d52:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b a5       	lds	r22, 0x6b
     d56:	7c a5       	lds	r23, 0x6c
     d58:	8d a5       	lds	r24, 0x6d
     d5a:	9e a5       	lds	r25, 0x6e
     d5c:	26 e6       	ldi	r18, 0x66	; 102
     d5e:	36 e6       	ldi	r19, 0x66	; 102
     d60:	46 e6       	ldi	r20, 0x66	; 102
     d62:	55 e4       	ldi	r21, 0x45	; 69
     d64:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f a7       	lds	r24, 0x7f
     d6e:	98 ab       	sts	0x58, r25
     d70:	a9 ab       	sts	0x59, r26
     d72:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     d74:	11 e0       	ldi	r17, 0x01	; 1
     d76:	6f a5       	lds	r22, 0x6f
     d78:	78 a9       	sts	0x48, r23
     d7a:	89 a9       	sts	0x49, r24
     d7c:	9a a9       	sts	0x4a, r25
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     d8a:	88 23       	and	r24, r24
     d8c:	0c f0       	brlt	.+2      	; 0xd90 <parseOK+0x3b2>
     d8e:	10 e0       	ldi	r17, 0x00	; 0
     d90:	11 23       	and	r17, r17
     d92:	29 f0       	breq	.+10     	; 0xd9e <parseOK+0x3c0>
		__ticks = 1;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9c ab       	sts	0x5c, r25
     d9a:	8b ab       	sts	0x5b, r24
     d9c:	46 c0       	rjmp	.+140    	; 0xe2a <parseOK+0x44c>
	else if (__tmp > 65535)
     d9e:	11 e0       	ldi	r17, 0x01	; 1
     da0:	6f a5       	lds	r22, 0x6f
     da2:	78 a9       	sts	0x48, r23
     da4:	89 a9       	sts	0x49, r24
     da6:	9a a9       	sts	0x4a, r25
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     db4:	18 16       	cp	r1, r24
     db6:	0c f0       	brlt	.+2      	; 0xdba <parseOK+0x3dc>
     db8:	10 e0       	ldi	r17, 0x00	; 0
     dba:	11 23       	and	r17, r17
     dbc:	61 f1       	breq	.+88     	; 0xe16 <parseOK+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbe:	6b a5       	lds	r22, 0x6b
     dc0:	7c a5       	lds	r23, 0x6c
     dc2:	8d a5       	lds	r24, 0x6d
     dc4:	9e a5       	lds	r25, 0x6e
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9c ab       	sts	0x5c, r25
     de4:	8b ab       	sts	0x5b, r24
     de6:	12 c0       	rjmp	.+36     	; 0xe0c <parseOK+0x42e>
     de8:	80 e7       	ldi	r24, 0x70	; 112
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	9e ab       	sts	0x5e, r25
     dee:	8d ab       	sts	0x5d, r24
     df0:	8d a9       	sts	0x4d, r24
     df2:	9e a9       	sts	0x4e, r25
     df4:	8c 01       	movw	r16, r24
     df6:	c8 01       	movw	r24, r16
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <parseOK+0x41a>
     dfc:	8c 01       	movw	r16, r24
     dfe:	1e ab       	sts	0x5e, r17
     e00:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e02:	8b a9       	sts	0x4b, r24
     e04:	9c a9       	sts	0x4c, r25
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	9c ab       	sts	0x5c, r25
     e0a:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0c:	8b a9       	sts	0x4b, r24
     e0e:	9c a9       	sts	0x4c, r25
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	51 f7       	brne	.-44     	; 0xde8 <parseOK+0x40a>
     e14:	17 c0       	rjmp	.+46     	; 0xe44 <parseOK+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e16:	6f a5       	lds	r22, 0x6f
     e18:	78 a9       	sts	0x48, r23
     e1a:	89 a9       	sts	0x49, r24
     e1c:	9a a9       	sts	0x4a, r25
     e1e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	9c ab       	sts	0x5c, r25
     e28:	8b ab       	sts	0x5b, r24
     e2a:	8b a9       	sts	0x4b, r24
     e2c:	9c a9       	sts	0x4c, r25
     e2e:	98 af       	sts	0x78, r25
     e30:	8f ab       	sts	0x5f, r24
     e32:	8f a9       	sts	0x4f, r24
     e34:	98 ad       	sts	0x68, r25
     e36:	8c 01       	movw	r16, r24
     e38:	f8 01       	movw	r30, r16
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <parseOK+0x45c>
     e3e:	8f 01       	movw	r16, r30
     e40:	18 af       	sts	0x78, r17
     e42:	0f ab       	sts	0x5f, r16
	 _delay_ms(500); 

    if(st[i-2]=='O'&&st[i-1]=='K')
     e44:	80 91 34 03 	lds	r24, 0x0334
     e48:	90 91 35 03 	lds	r25, 0x0335
     e4c:	02 97       	sbiw	r24, 0x02	; 2
     e4e:	88 53       	subi	r24, 0x38	; 56
     e50:	9c 4f       	sbci	r25, 0xFC	; 252
     e52:	fc 01       	movw	r30, r24
     e54:	80 81       	ld	r24, Z
     e56:	8f 34       	cpi	r24, 0x4F	; 79
     e58:	71 f4       	brne	.+28     	; 0xe76 <parseOK+0x498>
     e5a:	80 91 34 03 	lds	r24, 0x0334
     e5e:	90 91 35 03 	lds	r25, 0x0335
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	88 53       	subi	r24, 0x38	; 56
     e66:	9c 4f       	sbci	r25, 0xFC	; 252
     e68:	fc 01       	movw	r30, r24
     e6a:	80 81       	ld	r24, Z
     e6c:	8b 34       	cpi	r24, 0x4B	; 75
     e6e:	19 f4       	brne	.+6      	; 0xe76 <parseOK+0x498>
	return 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <parseOK+0x49c>
	else
	return 0;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0

}
     e7a:	ea 96       	adiw	r28, 0x3a	; 58
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <init_devices5>:



//Function To Initialize all The Devices
void init_devices5()
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
     e98:	f8 94       	cli
 uart2_init(); //Initailize UART1 for serial communiaction
     e9a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart2_init>
 sei();   //Enables the global interrupts
     e9e:	78 94       	sei
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <connectDevice>:


int connectDevice()
{
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	2e 97       	sbiw	r28, 0x0e	; 14
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
  init_devices5();
     ebe:	0e 94 48 07 	call	0xe90	; 0xe90 <init_devices5>
  if(parseOK("AT"))
     ec2:	85 e0       	ldi	r24, 0x05	; 5
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	09 f4       	brne	.+2      	; 0xed0 <connectDevice+0x2a>
     ece:	8a c0       	rjmp	.+276    	; 0xfe4 <connectDevice+0x13e>
   {
     if(parseOK("AT+CIPMUX=1"))
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	09 f4       	brne	.+2      	; 0xede <connectDevice+0x38>
     edc:	83 c0       	rjmp	.+262    	; 0xfe4 <connectDevice+0x13e>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	aa e7       	ldi	r26, 0x7A	; 122
     ee4:	b4 e4       	ldi	r27, 0x44	; 68
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	ab 83       	std	Y+3, r26	; 0x03
     eec:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     eee:	69 81       	ldd	r22, Y+1	; 0x01
     ef0:	7a 81       	ldd	r23, Y+2	; 0x02
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	26 e6       	ldi	r18, 0x66	; 102
     ef8:	36 e6       	ldi	r19, 0x66	; 102
     efa:	46 e6       	ldi	r20, 0x66	; 102
     efc:	55 e4       	ldi	r21, 0x45	; 69
     efe:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	af 83       	std	Y+7, r26	; 0x07
     f0c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f0e:	11 e0       	ldi	r17, 0x01	; 1
     f10:	6d 81       	ldd	r22, Y+5	; 0x05
     f12:	7e 81       	ldd	r23, Y+6	; 0x06
     f14:	8f 81       	ldd	r24, Y+7	; 0x07
     f16:	98 85       	ldd	r25, Y+8	; 0x08
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
     f24:	88 23       	and	r24, r24
     f26:	0c f0       	brlt	.+2      	; 0xf2a <connectDevice+0x84>
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	11 23       	and	r17, r17
     f2c:	29 f0       	breq	.+10     	; 0xf38 <connectDevice+0x92>
		__ticks = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9a 87       	std	Y+10, r25	; 0x0a
     f34:	89 87       	std	Y+9, r24	; 0x09
     f36:	46 c0       	rjmp	.+140    	; 0xfc4 <connectDevice+0x11e>
	else if (__tmp > 65535)
     f38:	11 e0       	ldi	r17, 0x01	; 1
     f3a:	6d 81       	ldd	r22, Y+5	; 0x05
     f3c:	7e 81       	ldd	r23, Y+6	; 0x06
     f3e:	8f 81       	ldd	r24, Y+7	; 0x07
     f40:	98 85       	ldd	r25, Y+8	; 0x08
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	3f ef       	ldi	r19, 0xFF	; 255
     f46:	4f e7       	ldi	r20, 0x7F	; 127
     f48:	57 e4       	ldi	r21, 0x47	; 71
     f4a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
     f4e:	18 16       	cp	r1, r24
     f50:	0c f0       	brlt	.+2      	; 0xf54 <connectDevice+0xae>
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	11 23       	and	r17, r17
     f56:	61 f1       	breq	.+88     	; 0xfb0 <connectDevice+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f58:	69 81       	ldd	r22, Y+1	; 0x01
     f5a:	7a 81       	ldd	r23, Y+2	; 0x02
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9a 87       	std	Y+10, r25	; 0x0a
     f7e:	89 87       	std	Y+9, r24	; 0x09
     f80:	12 c0       	rjmp	.+36     	; 0xfa6 <connectDevice+0x100>
     f82:	80 e7       	ldi	r24, 0x70	; 112
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	9c 87       	std	Y+12, r25	; 0x0c
     f88:	8b 87       	std	Y+11, r24	; 0x0b
     f8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f8e:	8c 01       	movw	r16, r24
     f90:	c8 01       	movw	r24, r16
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <connectDevice+0xec>
     f96:	8c 01       	movw	r16, r24
     f98:	1c 87       	std	Y+12, r17	; 0x0c
     f9a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	89 85       	ldd	r24, Y+9	; 0x09
     f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9a 87       	std	Y+10, r25	; 0x0a
     fa4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	89 85       	ldd	r24, Y+9	; 0x09
     fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	51 f7       	brne	.-44     	; 0xf82 <connectDevice+0xdc>
     fae:	17 c0       	rjmp	.+46     	; 0xfde <connectDevice+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6d 81       	ldd	r22, Y+5	; 0x05
     fb2:	7e 81       	ldd	r23, Y+6	; 0x06
     fb4:	8f 81       	ldd	r24, Y+7	; 0x07
     fb6:	98 85       	ldd	r25, Y+8	; 0x08
     fb8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9a 87       	std	Y+10, r25	; 0x0a
     fc2:	89 87       	std	Y+9, r24	; 0x09
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	9e 87       	std	Y+14, r25	; 0x0e
     fca:	8d 87       	std	Y+13, r24	; 0x0d
     fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fce:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd0:	8c 01       	movw	r16, r24
     fd2:	c8 01       	movw	r24, r16
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <connectDevice+0x12e>
     fd8:	8c 01       	movw	r16, r24
     fda:	1e 87       	std	Y+14, r17	; 0x0e
     fdc:	0d 87       	std	Y+13, r16	; 0x0d
     {
      //disp("WIFI SETUP COMPL");
	  _delay_ms(1000);
	  return 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <connectDevice+0x142>
	   }
    }
   else;
   {
   // disp("ESP CONN. ERROR");
     return 0;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
   }
   
  //parseOK("AT+CIPSTART=2,\"TCP\",\"192.168.0.8\",80")
  //parseOK("AT+CIPSEND=2,10")
}
     fe8:	2e 96       	adiw	r28, 0x0e	; 14
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <connectIP1>:

int connectIP1()//char *ch)       //L
{
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
 return parseOK("AT+CIPSTART=2,\"TCP\",\"192.168.0.6\",80");
    1006:	84 e1       	ldi	r24, 0x14	; 20
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
 cf1=1;
 _delay_ms(500);
 
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	08 95       	ret

00001014 <connectIP2>:

int connectIP2()//char *ch)     // Bot2
{
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	return parseOK("AT+CIPSTART=2,\"TCP\",\"192.168.0.3\",80");
    101c:	89 e3       	ldi	r24, 0x39	; 57
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
	cf1=1;
	_delay_ms(500);
	
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <connectIP3>:

int connectIP3()//char *ch)    // Bot3
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	return parseOK("AT+CIPSTART=2,\"TCP\",\"192.168.0.5\",80");
    1032:	8e e5       	ldi	r24, 0x5E	; 94
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
	cf1=1;
	_delay_ms(500);
	
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <connectIP4>:

int connectIP4()//char *ch)     // Bot 4
{
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
	return parseOK("AT+CIPSTART=2,\"TCP\",\"192.168.0.7\",80");
    1048:	83 e8       	ldi	r24, 0x83	; 131
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
	cf1=1;
	_delay_ms(500);
	
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <connectIP5>:

int connectIP5()//char *ch)
{
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	return parseOK("AT+CIPSTART=2,\"TCP\",\"192.168.0.9\",80");
    105e:	88 ea       	ldi	r24, 0xA8	; 168
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
	cf1=1;
	_delay_ms(500);
	
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <startServer>:

int startServer()
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	return parseOK("AT+CIPSERVER=1,80");
    1074:	8d ec       	ldi	r24, 0xCD	; 205
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
	_delay_ms(500);
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <sendmsg1>:

void sendmsg1(char q[])
{ 
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	6f 97       	sbiw	r28, 0x1f	; 31
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	9f 8f       	std	Y+31, r25	; 0x1f
    109c:	8e 8f       	std	Y+30, r24	; 0x1e
 char p[]="AT+CIPSEND=0,4";
    109e:	ce 01       	movw	r24, r28
    10a0:	0f 96       	adiw	r24, 0x0f	; 15
    10a2:	2f ed       	ldi	r18, 0xDF	; 223
    10a4:	32 e0       	ldi	r19, 0x02	; 2
    10a6:	4f e0       	ldi	r20, 0x0F	; 15
    10a8:	f9 01       	movw	r30, r18
    10aa:	00 80       	ld	r0, Z
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	fc 01       	movw	r30, r24
    10b2:	00 82       	st	Z, r0
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	41 50       	subi	r20, 0x01	; 1
    10b8:	44 23       	and	r20, r20
    10ba:	b1 f7       	brne	.-20     	; 0x10a8 <sendmsg1+0x26>
 parseOK(p);
    10bc:	ce 01       	movw	r24, r28
    10be:	0f 96       	adiw	r24, 0x0f	; 15
    10c0:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a8 ec       	ldi	r26, 0xC8	; 200
    10ca:	b3 e4       	ldi	r27, 0x43	; 67
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	ab 83       	std	Y+3, r26	; 0x03
    10d2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    10d4:	69 81       	ldd	r22, Y+1	; 0x01
    10d6:	7a 81       	ldd	r23, Y+2	; 0x02
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	26 e6       	ldi	r18, 0x66	; 102
    10de:	36 e6       	ldi	r19, 0x66	; 102
    10e0:	46 e6       	ldi	r20, 0x66	; 102
    10e2:	55 e4       	ldi	r21, 0x45	; 69
    10e4:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	af 83       	std	Y+7, r26	; 0x07
    10f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    10f4:	11 e0       	ldi	r17, 0x01	; 1
    10f6:	6d 81       	ldd	r22, Y+5	; 0x05
    10f8:	7e 81       	ldd	r23, Y+6	; 0x06
    10fa:	8f 81       	ldd	r24, Y+7	; 0x07
    10fc:	98 85       	ldd	r25, Y+8	; 0x08
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    110a:	88 23       	and	r24, r24
    110c:	0c f0       	brlt	.+2      	; 0x1110 <sendmsg1+0x8e>
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	11 23       	and	r17, r17
    1112:	29 f0       	breq	.+10     	; 0x111e <sendmsg1+0x9c>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9a 87       	std	Y+10, r25	; 0x0a
    111a:	89 87       	std	Y+9, r24	; 0x09
    111c:	46 c0       	rjmp	.+140    	; 0x11aa <sendmsg1+0x128>
	else if (__tmp > 65535)
    111e:	11 e0       	ldi	r17, 0x01	; 1
    1120:	6d 81       	ldd	r22, Y+5	; 0x05
    1122:	7e 81       	ldd	r23, Y+6	; 0x06
    1124:	8f 81       	ldd	r24, Y+7	; 0x07
    1126:	98 85       	ldd	r25, Y+8	; 0x08
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	3f ef       	ldi	r19, 0xFF	; 255
    112c:	4f e7       	ldi	r20, 0x7F	; 127
    112e:	57 e4       	ldi	r21, 0x47	; 71
    1130:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	0c f0       	brlt	.+2      	; 0x113a <sendmsg1+0xb8>
    1138:	10 e0       	ldi	r17, 0x00	; 0
    113a:	11 23       	and	r17, r17
    113c:	61 f1       	breq	.+88     	; 0x1196 <sendmsg1+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	69 81       	ldd	r22, Y+1	; 0x01
    1140:	7a 81       	ldd	r23, Y+2	; 0x02
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9a 87       	std	Y+10, r25	; 0x0a
    1164:	89 87       	std	Y+9, r24	; 0x09
    1166:	12 c0       	rjmp	.+36     	; 0x118c <sendmsg1+0x10a>
    1168:	80 e7       	ldi	r24, 0x70	; 112
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	9c 87       	std	Y+12, r25	; 0x0c
    116e:	8b 87       	std	Y+11, r24	; 0x0b
    1170:	8b 85       	ldd	r24, Y+11	; 0x0b
    1172:	9c 85       	ldd	r25, Y+12	; 0x0c
    1174:	8c 01       	movw	r16, r24
    1176:	c8 01       	movw	r24, r16
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <sendmsg1+0xf6>
    117c:	8c 01       	movw	r16, r24
    117e:	1c 87       	std	Y+12, r17	; 0x0c
    1180:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a 87       	std	Y+10, r25	; 0x0a
    118a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	51 f7       	brne	.-44     	; 0x1168 <sendmsg1+0xe6>
    1194:	17 c0       	rjmp	.+46     	; 0x11c4 <sendmsg1+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6d 81       	ldd	r22, Y+5	; 0x05
    1198:	7e 81       	ldd	r23, Y+6	; 0x06
    119a:	8f 81       	ldd	r24, Y+7	; 0x07
    119c:	98 85       	ldd	r25, Y+8	; 0x08
    119e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a 87       	std	Y+10, r25	; 0x0a
    11a8:	89 87       	std	Y+9, r24	; 0x09
    11aa:	89 85       	ldd	r24, Y+9	; 0x09
    11ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ae:	9e 87       	std	Y+14, r25	; 0x0e
    11b0:	8d 87       	std	Y+13, r24	; 0x0d
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	8c 01       	movw	r16, r24
    11b8:	f8 01       	movw	r30, r16
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <sendmsg1+0x138>
    11be:	8f 01       	movw	r16, r30
    11c0:	1e 87       	std	Y+14, r17	; 0x0e
    11c2:	0d 87       	std	Y+13, r16	; 0x0d
 _delay_ms(400); 
 parseOK(q);
    11c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11c8:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
}
    11cc:	6f 96       	adiw	r28, 0x1f	; 31
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <sendmsgs>:
void sendmsgs(char q[])
{
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	6f 97       	sbiw	r28, 0x1f	; 31
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	9f 8f       	std	Y+31, r25	; 0x1f
    11fc:	8e 8f       	std	Y+30, r24	; 0x1e
	char p[]="AT+CIPSEND=2,4";
    11fe:	ce 01       	movw	r24, r28
    1200:	0f 96       	adiw	r24, 0x0f	; 15
    1202:	2e ee       	ldi	r18, 0xEE	; 238
    1204:	32 e0       	ldi	r19, 0x02	; 2
    1206:	4f e0       	ldi	r20, 0x0F	; 15
    1208:	f9 01       	movw	r30, r18
    120a:	00 80       	ld	r0, Z
    120c:	2f 5f       	subi	r18, 0xFF	; 255
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	fc 01       	movw	r30, r24
    1212:	00 82       	st	Z, r0
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	41 50       	subi	r20, 0x01	; 1
    1218:	44 23       	and	r20, r20
    121a:	b1 f7       	brne	.-20     	; 0x1208 <sendmsgs+0x26>
	parseOK(p);
    121c:	ce 01       	movw	r24, r28
    121e:	0f 96       	adiw	r24, 0x0f	; 15
    1220:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a8 ec       	ldi	r26, 0xC8	; 200
    122a:	b3 e4       	ldi	r27, 0x43	; 67
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	ab 83       	std	Y+3, r26	; 0x03
    1232:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1234:	69 81       	ldd	r22, Y+1	; 0x01
    1236:	7a 81       	ldd	r23, Y+2	; 0x02
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	26 e6       	ldi	r18, 0x66	; 102
    123e:	36 e6       	ldi	r19, 0x66	; 102
    1240:	46 e6       	ldi	r20, 0x66	; 102
    1242:	55 e4       	ldi	r21, 0x45	; 69
    1244:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	af 83       	std	Y+7, r26	; 0x07
    1252:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1254:	11 e0       	ldi	r17, 0x01	; 1
    1256:	6d 81       	ldd	r22, Y+5	; 0x05
    1258:	7e 81       	ldd	r23, Y+6	; 0x06
    125a:	8f 81       	ldd	r24, Y+7	; 0x07
    125c:	98 85       	ldd	r25, Y+8	; 0x08
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e8       	ldi	r20, 0x80	; 128
    1264:	5f e3       	ldi	r21, 0x3F	; 63
    1266:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    126a:	88 23       	and	r24, r24
    126c:	0c f0       	brlt	.+2      	; 0x1270 <sendmsgs+0x8e>
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	11 23       	and	r17, r17
    1272:	29 f0       	breq	.+10     	; 0x127e <sendmsgs+0x9c>
		__ticks = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9a 87       	std	Y+10, r25	; 0x0a
    127a:	89 87       	std	Y+9, r24	; 0x09
    127c:	46 c0       	rjmp	.+140    	; 0x130a <sendmsgs+0x128>
	else if (__tmp > 65535)
    127e:	11 e0       	ldi	r17, 0x01	; 1
    1280:	6d 81       	ldd	r22, Y+5	; 0x05
    1282:	7e 81       	ldd	r23, Y+6	; 0x06
    1284:	8f 81       	ldd	r24, Y+7	; 0x07
    1286:	98 85       	ldd	r25, Y+8	; 0x08
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    1294:	18 16       	cp	r1, r24
    1296:	0c f0       	brlt	.+2      	; 0x129a <sendmsgs+0xb8>
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	11 23       	and	r17, r17
    129c:	61 f1       	breq	.+88     	; 0x12f6 <sendmsgs+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129e:	69 81       	ldd	r22, Y+1	; 0x01
    12a0:	7a 81       	ldd	r23, Y+2	; 0x02
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9a 87       	std	Y+10, r25	; 0x0a
    12c4:	89 87       	std	Y+9, r24	; 0x09
    12c6:	12 c0       	rjmp	.+36     	; 0x12ec <sendmsgs+0x10a>
    12c8:	80 e7       	ldi	r24, 0x70	; 112
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	9c 87       	std	Y+12, r25	; 0x0c
    12ce:	8b 87       	std	Y+11, r24	; 0x0b
    12d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d4:	8c 01       	movw	r16, r24
    12d6:	c8 01       	movw	r24, r16
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <sendmsgs+0xf6>
    12dc:	8c 01       	movw	r16, r24
    12de:	1c 87       	std	Y+12, r17	; 0x0c
    12e0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	9a 87       	std	Y+10, r25	; 0x0a
    12ea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	51 f7       	brne	.-44     	; 0x12c8 <sendmsgs+0xe6>
    12f4:	17 c0       	rjmp	.+46     	; 0x1324 <sendmsgs+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f6:	6d 81       	ldd	r22, Y+5	; 0x05
    12f8:	7e 81       	ldd	r23, Y+6	; 0x06
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	98 85       	ldd	r25, Y+8	; 0x08
    12fe:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9a 87       	std	Y+10, r25	; 0x0a
    1308:	89 87       	std	Y+9, r24	; 0x09
    130a:	89 85       	ldd	r24, Y+9	; 0x09
    130c:	9a 85       	ldd	r25, Y+10	; 0x0a
    130e:	9e 87       	std	Y+14, r25	; 0x0e
    1310:	8d 87       	std	Y+13, r24	; 0x0d
    1312:	8d 85       	ldd	r24, Y+13	; 0x0d
    1314:	9e 85       	ldd	r25, Y+14	; 0x0e
    1316:	8c 01       	movw	r16, r24
    1318:	f8 01       	movw	r30, r16
    131a:	31 97       	sbiw	r30, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <sendmsgs+0x138>
    131e:	8f 01       	movw	r16, r30
    1320:	1e 87       	std	Y+14, r17	; 0x0e
    1322:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(400);
	parseOK(q);
    1324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1326:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1328:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
}
    132c:	6f 96       	adiw	r28, 0x1f	; 31
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <IPDParseBegin>:
void IPDParseBegin()
{
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	flag=1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	90 93 3b 03 	sts	0x033B, r25
    1352:	80 93 3a 03 	sts	0x033A, r24
}	
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <IPDParseEnd>:
void IPDParseEnd()
{
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	flag=0;
    1364:	10 92 3b 03 	sts	0x033B, r1
    1368:	10 92 3a 03 	sts	0x033A, r1
	numreset();
    136c:	0e 94 c0 04 	call	0x980	; 0x980 <numreset>
}
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <motors_delay>:
void velocity(unsigned char, unsigned char);
void motion_pin_config (void);
void port_init();
int dark_vision_flag;
void motors_delay()
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    137e:	81 e2       	ldi	r24, 0x21	; 33
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	21 e2       	ldi	r18, 0x21	; 33
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	f9 01       	movw	r30, r18
    1388:	20 81       	ld	r18, Z
    138a:	2f 60       	ori	r18, 0x0F	; 15
    138c:	fc 01       	movw	r30, r24
    138e:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    1390:	82 e2       	ldi	r24, 0x22	; 34
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	22 e2       	ldi	r18, 0x22	; 34
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	f9 01       	movw	r30, r18
    139a:	20 81       	ld	r18, Z
    139c:	20 7f       	andi	r18, 0xF0	; 240
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    13a2:	8a e0       	ldi	r24, 0x0A	; 10
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	2a e0       	ldi	r18, 0x0A	; 10
    13a8:	31 e0       	ldi	r19, 0x01	; 1
    13aa:	f9 01       	movw	r30, r18
    13ac:	20 81       	ld	r18, Z
    13ae:	28 61       	ori	r18, 0x18	; 24
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    13b4:	8b e0       	ldi	r24, 0x0B	; 11
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	2b e0       	ldi	r18, 0x0B	; 11
    13ba:	31 e0       	ldi	r19, 0x01	; 1
    13bc:	f9 01       	movw	r30, r18
    13be:	20 81       	ld	r18, Z
    13c0:	28 61       	ori	r18, 0x18	; 24
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

000013cc <motion_pin_config>:

void motion_pin_config (void)
{
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    13d4:	81 e2       	ldi	r24, 0x21	; 33
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	21 e2       	ldi	r18, 0x21	; 33
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	2f 60       	ori	r18, 0x0F	; 15
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    13e6:	82 e2       	ldi	r24, 0x22	; 34
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	22 e2       	ldi	r18, 0x22	; 34
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	f9 01       	movw	r30, r18
    13f0:	20 81       	ld	r18, Z
    13f2:	20 7f       	andi	r18, 0xF0	; 240
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	2a e0       	ldi	r18, 0x0A	; 10
    13fe:	31 e0       	ldi	r19, 0x01	; 1
    1400:	f9 01       	movw	r30, r18
    1402:	20 81       	ld	r18, Z
    1404:	28 61       	ori	r18, 0x18	; 24
    1406:	fc 01       	movw	r30, r24
    1408:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    140a:	8b e0       	ldi	r24, 0x0B	; 11
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	2b e0       	ldi	r18, 0x0B	; 11
    1410:	31 e0       	ldi	r19, 0x01	; 1
    1412:	f9 01       	movw	r30, r18
    1414:	20 81       	ld	r18, Z
    1416:	28 61       	ori	r18, 0x18	; 24
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <init_ports>:

//Function to initialize ports
void init_ports()
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config();
    142a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <motion_pin_config>
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <timer5_init>:

void timer5_init()
{
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
  TCCR5B = 0x00;  //Stop
    143c:	81 e2       	ldi	r24, 0x21	; 33
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	fc 01       	movw	r30, r24
    1442:	10 82       	st	Z, r1
  TCNT5H = 0xFF;  //Counter higher 8-bit value to which OCR5xH value is compared with
    1444:	85 e2       	ldi	r24, 0x25	; 37
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	2f ef       	ldi	r18, 0xFF	; 255
    144a:	fc 01       	movw	r30, r24
    144c:	20 83       	st	Z, r18
  TCNT5L = 0x01;  //Counter lower 8-bit value to which OCR5xH value is compared with
    144e:	84 e2       	ldi	r24, 0x24	; 36
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
  OCR5AH = 0x00;  //Output compare register high value for Left Motor
    1458:	89 e2       	ldi	r24, 0x29	; 41
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	fc 01       	movw	r30, r24
    145e:	10 82       	st	Z, r1
  OCR5AL = 0xFF;  //Output compare register low value for Left Motor
    1460:	88 e2       	ldi	r24, 0x28	; 40
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	2f ef       	ldi	r18, 0xFF	; 255
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
  OCR5BH = 0x00;  //Output compare register high value for Right Motor
    146a:	8b e2       	ldi	r24, 0x2B	; 43
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	fc 01       	movw	r30, r24
    1470:	10 82       	st	Z, r1
  OCR5BL = 0xFF;  //Output compare register low value for Right Motor
    1472:	8a e2       	ldi	r24, 0x2A	; 42
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	2f ef       	ldi	r18, 0xFF	; 255
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
  OCR5CH = 0x00;  //Output compare register high value for Motor C1
    147c:	8d e2       	ldi	r24, 0x2D	; 45
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	fc 01       	movw	r30, r24
    1482:	10 82       	st	Z, r1
  OCR5CL = 0xFF;  //Output compare register low value for Motor C1
    1484:	8c e2       	ldi	r24, 0x2C	; 44
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	2f ef       	ldi	r18, 0xFF	; 255
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
  TCCR5A = 0xA9;  /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    148e:	80 e2       	ldi	r24, 0x20	; 32
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	29 ea       	ldi	r18, 0xA9	; 169
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
            For Overriding normal port functionality to OCRnA outputs.
              {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

  TCCR5B = 0x0B;  //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1498:	81 e2       	ldi	r24, 0x21	; 33
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	2b e0       	ldi	r18, 0x0B	; 11
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <set_velocity>:

// Function for robot velocity control
void set_velocity (unsigned char left_motor, unsigned char right_motor)
{
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	0f 92       	push	r0
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	6a 83       	std	Y+2, r22	; 0x02
  OCR5AL = (unsigned char)left_motor;
    14b8:	88 e2       	ldi	r24, 0x28	; 40
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	29 81       	ldd	r18, Y+1	; 0x01
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
  OCR5BL = (unsigned char)right_motor;
    14c2:	8a e2       	ldi	r24, 0x2A	; 42
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	2a 81       	ldd	r18, Y+2	; 0x02
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
}
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <set_samevelocity>:
void set_samevelocity (unsigned char motor)
{
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	89 83       	std	Y+1, r24	; 0x01
  OCR5AL=OCR5BL=(unsigned char)motor;
    14e2:	88 e2       	ldi	r24, 0x28	; 40
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	2a e2       	ldi	r18, 0x2A	; 42
    14e8:	31 e0       	ldi	r19, 0x01	; 1
    14ea:	49 81       	ldd	r20, Y+1	; 0x01
    14ec:	f9 01       	movw	r30, r18
    14ee:	40 83       	st	Z, r20
    14f0:	fc 01       	movw	r30, r24
    14f2:	40 83       	st	Z, r20
}
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <delay>:


void delay(int ms)
{
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	60 97       	sbiw	r28, 0x10	; 16
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	98 8b       	std	Y+16, r25	; 0x10
    1516:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(ms);
    1518:	8f 85       	ldd	r24, Y+15	; 0x0f
    151a:	98 89       	ldd	r25, Y+16	; 0x10
    151c:	aa 27       	eor	r26, r26
    151e:	97 fd       	sbrc	r25, 7
    1520:	a0 95       	com	r26
    1522:	ba 2f       	mov	r27, r26
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__floatsisf>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	ab 83       	std	Y+3, r26	; 0x03
    1536:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1538:	69 81       	ldd	r22, Y+1	; 0x01
    153a:	7a 81       	ldd	r23, Y+2	; 0x02
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	26 e6       	ldi	r18, 0x66	; 102
    1542:	36 e6       	ldi	r19, 0x66	; 102
    1544:	46 e6       	ldi	r20, 0x66	; 102
    1546:	55 e4       	ldi	r21, 0x45	; 69
    1548:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	af 83       	std	Y+7, r26	; 0x07
    1556:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1558:	11 e0       	ldi	r17, 0x01	; 1
    155a:	6d 81       	ldd	r22, Y+5	; 0x05
    155c:	7e 81       	ldd	r23, Y+6	; 0x06
    155e:	8f 81       	ldd	r24, Y+7	; 0x07
    1560:	98 85       	ldd	r25, Y+8	; 0x08
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    156e:	88 23       	and	r24, r24
    1570:	0c f0       	brlt	.+2      	; 0x1574 <delay+0x78>
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	11 23       	and	r17, r17
    1576:	29 f0       	breq	.+10     	; 0x1582 <delay+0x86>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9a 87       	std	Y+10, r25	; 0x0a
    157e:	89 87       	std	Y+9, r24	; 0x09
    1580:	46 c0       	rjmp	.+140    	; 0x160e <delay+0x112>
	else if (__tmp > 65535)
    1582:	11 e0       	ldi	r17, 0x01	; 1
    1584:	6d 81       	ldd	r22, Y+5	; 0x05
    1586:	7e 81       	ldd	r23, Y+6	; 0x06
    1588:	8f 81       	ldd	r24, Y+7	; 0x07
    158a:	98 85       	ldd	r25, Y+8	; 0x08
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	4f e7       	ldi	r20, 0x7F	; 127
    1592:	57 e4       	ldi	r21, 0x47	; 71
    1594:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    1598:	18 16       	cp	r1, r24
    159a:	0c f0       	brlt	.+2      	; 0x159e <delay+0xa2>
    159c:	10 e0       	ldi	r17, 0x00	; 0
    159e:	11 23       	and	r17, r17
    15a0:	61 f1       	breq	.+88     	; 0x15fa <delay+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a2:	69 81       	ldd	r22, Y+1	; 0x01
    15a4:	7a 81       	ldd	r23, Y+2	; 0x02
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e2       	ldi	r20, 0x20	; 32
    15b0:	51 e4       	ldi	r21, 0x41	; 65
    15b2:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	9a 87       	std	Y+10, r25	; 0x0a
    15c8:	89 87       	std	Y+9, r24	; 0x09
    15ca:	12 c0       	rjmp	.+36     	; 0x15f0 <delay+0xf4>
    15cc:	80 e7       	ldi	r24, 0x70	; 112
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	9c 87       	std	Y+12, r25	; 0x0c
    15d2:	8b 87       	std	Y+11, r24	; 0x0b
    15d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d8:	8c 01       	movw	r16, r24
    15da:	c8 01       	movw	r24, r16
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <delay+0xe0>
    15e0:	8c 01       	movw	r16, r24
    15e2:	1c 87       	std	Y+12, r17	; 0x0c
    15e4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	9a 87       	std	Y+10, r25	; 0x0a
    15ee:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	51 f7       	brne	.-44     	; 0x15cc <delay+0xd0>
    15f8:	17 c0       	rjmp	.+46     	; 0x1628 <delay+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fa:	6d 81       	ldd	r22, Y+5	; 0x05
    15fc:	7e 81       	ldd	r23, Y+6	; 0x06
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
    1602:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9a 87       	std	Y+10, r25	; 0x0a
    160c:	89 87       	std	Y+9, r24	; 0x09
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	9e 87       	std	Y+14, r25	; 0x0e
    1614:	8d 87       	std	Y+13, r24	; 0x0d
    1616:	8d 85       	ldd	r24, Y+13	; 0x0d
    1618:	9e 85       	ldd	r25, Y+14	; 0x0e
    161a:	8c 01       	movw	r16, r24
    161c:	c8 01       	movw	r24, r16
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <delay+0x122>
    1622:	8c 01       	movw	r16, r24
    1624:	1e 87       	std	Y+14, r17	; 0x0e
    1626:	0d 87       	std	Y+13, r16	; 0x0d
}
    1628:	60 96       	adiw	r28, 0x10	; 16
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	08 95       	ret

0000163e <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	0f 92       	push	r0
    1644:	0f 92       	push	r0
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    164c:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	8f 70       	andi	r24, 0x0F	; 15
    1652:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA;      // reading the PORTA's original status
    1654:	82 e2       	ldi	r24, 0x22	; 34
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	fc 01       	movw	r30, r24
    165a:	80 81       	ld	r24, Z
    165c:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0;      // setting lower direction nibbel to 0
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	80 7f       	andi	r24, 0xF0	; 240
    1662:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTA status
    1664:	99 81       	ldd	r25, Y+1	; 0x01
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	89 2b       	or	r24, r25
    166a:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore;      // setting the command to the port
    166c:	82 e2       	ldi	r24, 0x22	; 34
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	29 81       	ldd	r18, Y+1	; 0x01
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <forward>:


void forward (void) //both wheels forward
{
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    1688:	86 e0       	ldi	r24, 0x06	; 6
    168a:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <forwardx>:
void forwardx (unsigned char motor) //both wheels forward
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	0f 92       	push	r0
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	89 83       	std	Y+1, r24	; 0x01
  set_velocity((unsigned char)motor,(unsigned char)motor);
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	69 81       	ldd	r22, Y+1	; 0x01
    16a4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
  motion_set(0x06);
    16a8:	86 e0       	ldi	r24, 0x06	; 6
    16aa:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    16ae:	0f 90       	pop	r0
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <back>:

void back (void) //both wheels backward
{
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62

  motion_set(0x09);
    16be:	89 e0       	ldi	r24, 0x09	; 9
    16c0:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <backx>:
void backx (unsigned char motor) //both wheels backward
{
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	89 83       	std	Y+1, r24	; 0x01
  set_velocity((unsigned char)motor,(unsigned char)motor);
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
  motion_set(0x09);
    16de:	89 e0       	ldi	r24, 0x09	; 9
    16e0:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    16e4:	0f 90       	pop	r0
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    16f4:	85 e0       	ldi	r24, 0x05	; 5
    16f6:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <leftxy>:
void leftxy (unsigned char left_motor, unsigned char right_motor) //Left wheel backward, Right wheel forward
{
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	0f 92       	push	r0
    1706:	0f 92       	push	r0
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	6a 83       	std	Y+2, r22	; 0x02
  set_velocity((unsigned char)left_motor,(unsigned char)right_motor);
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	6a 81       	ldd	r22, Y+2	; 0x02
    1714:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
  motion_set(0x05);
    1718:	85 e0       	ldi	r24, 0x05	; 5
    171a:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <leftx>:
void leftx (unsigned char motor) //Left wheel backward, Right wheel forward
{
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
  set_velocity((unsigned char)motor,(unsigned char)motor);
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	69 81       	ldd	r22, Y+1	; 0x01
    1738:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
  motion_set(0x05);
    173c:	85 e0       	ldi	r24, 0x05	; 5
    173e:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    1742:	0f 90       	pop	r0
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    1752:	8a e0       	ldi	r24, 0x0A	; 10
    1754:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <rightx>:
void rightx (unsigned char motor) //Left wheel forward, Right wheel backward
{
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
  set_velocity((unsigned char)motor,(unsigned char)motor);
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	69 81       	ldd	r22, Y+1	; 0x01
    176e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
  motion_set(0x0A);
    1772:	8a e0       	ldi	r24, 0x0A	; 10
    1774:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    1778:	0f 90       	pop	r0
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <rightxy>:
void rightxy (unsigned char left_motor, unsigned char right_motor) //Left wheel forward, Right wheel backward
{
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	0f 92       	push	r0
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	6a 83       	std	Y+2, r22	; 0x02
    set_velocity((unsigned char)left_motor,(unsigned char)right_motor);
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	6a 81       	ldd	r22, Y+2	; 0x02
    1794:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
  motion_set(0x0A);
    1798:	8a e0       	ldi	r24, 0x0A	; 10
    179a:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    17ec:	88 e0       	ldi	r24, 0x08	; 8
    17ee:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <stop>:

void stop (void)
{
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	0e 94 1f 0b 	call	0x163e	; 0x163e <motion_set>
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <init_devices>:

void init_devices (void) //use this function to initialize all devices
{
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    1814:	f8 94       	cli
 init_ports();
    1816:	0e 94 11 0a 	call	0x1422	; 0x1422 <init_ports>
 timer5_init();
    181a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <timer5_init>
 sei(); //re-enable interrupts
    181e:	78 94       	sei
}
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <dmb_drive>:

void dmb_drive()
{
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
  init_devices();
    182e:	0e 94 06 0c 	call	0x180c	; 0x180c <init_devices>
  set_velocity (150, 150); //Set robot velocity here. Smaller the value lesser will be the velocity
    1832:	86 e9       	ldi	r24, 0x96	; 150
    1834:	66 e9       	ldi	r22, 0x96	; 150
    1836:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
             //Try different valuse between 0 to 255
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <adc_pin_config>:



//ADC pin configuration
void adc_pin_config (void)
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00;
    1848:	80 e3       	ldi	r24, 0x30	; 48
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	fc 01       	movw	r30, r24
    184e:	10 82       	st	Z, r1
 PORTF = 0x00;
    1850:	81 e3       	ldi	r24, 0x31	; 49
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	10 82       	st	Z, r1
 DDRK = 0x00;
    1858:	87 e0       	ldi	r24, 0x07	; 7
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	fc 01       	movw	r30, r24
    185e:	10 82       	st	Z, r1
 PORTK = 0x00;
    1860:	88 e0       	ldi	r24, 0x08	; 8
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	fc 01       	movw	r30, r24
    1866:	10 82       	st	Z, r1
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <buzzer_pin_config>:


//Function to initialize Buzzer
void buzzer_pin_config (void)
{
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    1876:	87 e2       	ldi	r24, 0x27	; 39
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	27 e2       	ldi	r18, 0x27	; 39
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	f9 01       	movw	r30, r18
    1880:	20 81       	ld	r18, Z
    1882:	28 60       	ori	r18, 0x08	; 8
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1888:	88 e2       	ldi	r24, 0x28	; 40
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	28 e2       	ldi	r18, 0x28	; 40
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	f9 01       	movw	r30, r18
    1892:	20 81       	ld	r18, Z
    1894:	27 7f       	andi	r18, 0xF7	; 247
    1896:	fc 01       	movw	r30, r24
    1898:	20 83       	st	Z, r18
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	adc_pin_config();
    18a8:	0e 94 20 0c 	call	0x1840	; 0x1840 <adc_pin_config>
	motion_pin_config();
    18ac:	0e 94 e6 09 	call	0x13cc	; 0x13cc <motion_pin_config>
	buzzer_pin_config();
    18b0:	0e 94 37 0c 	call	0x186e	; 0x186e <buzzer_pin_config>
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <buzzer_on>:


void buzzer_on (void)
{
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    18c4:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    18c6:	86 e2       	ldi	r24, 0x26	; 38
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	88 60       	ori	r24, 0x08	; 8
    18d4:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    18d6:	88 e2       	ldi	r24, 0x28	; 40
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	29 81       	ldd	r18, Y+1	; 0x01
    18dc:	fc 01       	movw	r30, r24
    18de:	20 83       	st	Z, r18
}
    18e0:	0f 90       	pop	r0
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <buzzer_off>:

void buzzer_off (void)
{
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    18f2:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    18f4:	86 e2       	ldi	r24, 0x26	; 38
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	87 7f       	andi	r24, 0xF7	; 247
    1902:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1904:	88 e2       	ldi	r24, 0x28	; 40
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	29 81       	ldd	r18, Y+1	; 0x01
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
}
    190e:	0f 90       	pop	r0
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <adc_init>:

void adc_init()
{
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    191e:	8a e7       	ldi	r24, 0x7A	; 122
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	fc 01       	movw	r30, r24
    1924:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1926:	8b e7       	ldi	r24, 0x7B	; 123
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    192e:	8c e7       	ldi	r24, 0x7C	; 124
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	20 e2       	ldi	r18, 0x20	; 32
    1934:	fc 01       	movw	r30, r24
    1936:	20 83       	st	Z, r18
	ACSR = 0x80;
    1938:	80 e5       	ldi	r24, 0x50	; 80
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	20 e8       	ldi	r18, 0x80	; 128
    193e:	fc 01       	movw	r30, r24
    1940:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1942:	8a e7       	ldi	r24, 0x7A	; 122
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	26 e8       	ldi	r18, 0x86	; 134
    1948:	fc 01       	movw	r30, r24
    194a:	20 83       	st	Z, r18
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	0f 92       	push	r0
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	28 f0       	brcs	.+10     	; 0x1970 <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    1966:	8b e7       	ldi	r24, 0x7B	; 123
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	28 e0       	ldi	r18, 0x08	; 8
    196c:	fc 01       	movw	r30, r24
    196e:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	87 70       	andi	r24, 0x07	; 7
    1974:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;
    1976:	8c e7       	ldi	r24, 0x7C	; 124
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	2a 81       	ldd	r18, Y+2	; 0x02
    197c:	20 62       	ori	r18, 0x20	; 32
    197e:	fc 01       	movw	r30, r24
    1980:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1982:	8a e7       	ldi	r24, 0x7A	; 122
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	2a e7       	ldi	r18, 0x7A	; 122
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	f9 01       	movw	r30, r18
    198c:	20 81       	ld	r18, Z
    198e:	20 64       	ori	r18, 0x40	; 64
    1990:	fc 01       	movw	r30, r24
    1992:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1994:	00 00       	nop
    1996:	8a e7       	ldi	r24, 0x7A	; 122
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	fc 01       	movw	r30, r24
    199c:	80 81       	ld	r24, Z
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	80 71       	andi	r24, 0x10	; 16
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	b1 f3       	breq	.-20     	; 0x1996 <ADC_Conversion+0x44>
	a=ADCH;
    19aa:	89 e7       	ldi	r24, 0x79	; 121
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	fc 01       	movw	r30, r24
    19b0:	80 81       	ld	r24, Z
    19b2:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    19b4:	8a e7       	ldi	r24, 0x7A	; 122
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	2a e7       	ldi	r18, 0x7A	; 122
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	20 61       	ori	r18, 0x10	; 16
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    19c6:	8b e7       	ldi	r24, 0x7B	; 123
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	fc 01       	movw	r30, r24
    19cc:	10 82       	st	Z, r1
	return a;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <init_devices1>:


void init_devices1 (void)
{
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    19e2:	f8 94       	cli
	port_init();
    19e4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <port_init>
	adc_init();
    19e8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <adc_init>
	sei();   //Enables the global interrupts
    19ec:	78 94       	sei
}
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <dark_vision_on>:

void dark_vision_on()
{
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
   init_devices1();
    19fc:	0e 94 ed 0c 	call	0x19da	; 0x19da <init_devices1>
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <obstacle>:

int obstacle()
{
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    Front_Sharp_Sensor = ADC_Conversion(11);
    1a0e:	8b e0       	ldi	r24, 0x0B	; 11
    1a10:	0e 94 a9 0c 	call	0x1952	; 0x1952 <ADC_Conversion>
    1a14:	80 93 44 03 	sts	0x0344, r24
    Front_IR_Sensor = ADC_Conversion(6);
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <ADC_Conversion>
    1a1e:	80 93 45 03 	sts	0x0345, r24
    flag1=0;
    1a22:	10 92 42 03 	sts	0x0342, r1
	flag2=0;
    1a26:	10 92 43 03 	sts	0x0343, r1
	if(Front_Sharp_Sensor>0x82|| Front_IR_Sensor<0xF0)
    1a2a:	80 91 44 03 	lds	r24, 0x0344
    1a2e:	83 38       	cpi	r24, 0x83	; 131
    1a30:	20 f4       	brcc	.+8      	; 0x1a3a <obstacle+0x34>
    1a32:	80 91 45 03 	lds	r24, 0x0345
    1a36:	80 3f       	cpi	r24, 0xF0	; 240
    1a38:	60 f4       	brcc	.+24     	; 0x1a52 <obstacle+0x4c>
	{
			flag2=1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 43 03 	sts	0x0343, r24
			dark_vision_flag=1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	90 93 57 03 	sts	0x0357, r25
    1a48:	80 93 56 03 	sts	0x0356, r24
			buzzer_on();
    1a4c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <buzzer_on>
    1a50:	09 c0       	rjmp	.+18     	; 0x1a64 <obstacle+0x5e>

	}
	else
		{
		flag1=1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 42 03 	sts	0x0342, r24
		dark_vision_flag=0;
    1a58:	10 92 57 03 	sts	0x0357, r1
    1a5c:	10 92 56 03 	sts	0x0356, r1
		buzzer_off();
    1a60:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <buzzer_off>

		}
		return dark_vision_flag;
    1a64:	80 91 56 03 	lds	r24, 0x0356
    1a68:	90 91 57 03 	lds	r25, 0x0357

}
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <lcd_port_config>:
/*****************************************************************************************************************
LCD INTERFACING // AUTHOR: ADITYA MUKHERJEE
*****************************************************************************************************************/

void lcd_port_config (void)
{
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1a7a:	87 e2       	ldi	r24, 0x27	; 39
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	27 e2       	ldi	r18, 0x27	; 39
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	27 6f       	ori	r18, 0xF7	; 247
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1a8c:	88 e2       	ldi	r24, 0x28	; 40
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	28 e2       	ldi	r18, 0x28	; 40
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	f9 01       	movw	r30, r18
    1a96:	20 81       	ld	r18, Z
    1a98:	20 78       	andi	r18, 0x80	; 128
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 83       	st	Z, r18
}
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	08 95       	ret

00001aa4 <init_devices2>:
void init_devices2 (void)
{
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    1aac:	f8 94       	cli
 lcd_port_config();
    1aae:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <lcd_port_config>
 sei();   //Enables the global interrupts
    1ab2:	78 94       	sei
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <lcd_set_4bit>:
void lcd_set_4bit()
{
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	c0 57       	subi	r28, 0x70	; 112
    1ac8:	d0 40       	sbci	r29, 0x00	; 0
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	a0 e8       	ldi	r26, 0x80	; 128
    1ada:	bf e3       	ldi	r27, 0x3F	; 63
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	ab 83       	std	Y+3, r26	; 0x03
    1ae2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ae4:	69 81       	ldd	r22, Y+1	; 0x01
    1ae6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	26 e6       	ldi	r18, 0x66	; 102
    1aee:	36 e6       	ldi	r19, 0x66	; 102
    1af0:	46 e6       	ldi	r20, 0x66	; 102
    1af2:	55 e4       	ldi	r21, 0x45	; 69
    1af4:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	af 83       	std	Y+7, r26	; 0x07
    1b02:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1b04:	11 e0       	ldi	r17, 0x01	; 1
    1b06:	6d 81       	ldd	r22, Y+5	; 0x05
    1b08:	7e 81       	ldd	r23, Y+6	; 0x06
    1b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0c:	98 85       	ldd	r25, Y+8	; 0x08
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <lcd_set_4bit+0x66>
    1b1e:	10 e0       	ldi	r17, 0x00	; 0
    1b20:	11 23       	and	r17, r17
    1b22:	29 f0       	breq	.+10     	; 0x1b2e <lcd_set_4bit+0x74>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9a 87       	std	Y+10, r25	; 0x0a
    1b2a:	89 87       	std	Y+9, r24	; 0x09
    1b2c:	46 c0       	rjmp	.+140    	; 0x1bba <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
    1b2e:	11 e0       	ldi	r17, 0x01	; 1
    1b30:	6d 81       	ldd	r22, Y+5	; 0x05
    1b32:	7e 81       	ldd	r23, Y+6	; 0x06
    1b34:	8f 81       	ldd	r24, Y+7	; 0x07
    1b36:	98 85       	ldd	r25, Y+8	; 0x08
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <lcd_set_4bit+0x90>
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	11 23       	and	r17, r17
    1b4c:	61 f1       	breq	.+88     	; 0x1ba6 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	69 81       	ldd	r22, Y+1	; 0x01
    1b50:	7a 81       	ldd	r23, Y+2	; 0x02
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9a 87       	std	Y+10, r25	; 0x0a
    1b74:	89 87       	std	Y+9, r24	; 0x09
    1b76:	12 c0       	rjmp	.+36     	; 0x1b9c <lcd_set_4bit+0xe2>
    1b78:	80 e7       	ldi	r24, 0x70	; 112
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	9c 87       	std	Y+12, r25	; 0x0c
    1b7e:	8b 87       	std	Y+11, r24	; 0x0b
    1b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b82:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b84:	8c 01       	movw	r16, r24
    1b86:	c8 01       	movw	r24, r16
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <lcd_set_4bit+0xce>
    1b8c:	8c 01       	movw	r16, r24
    1b8e:	1c 87       	std	Y+12, r17	; 0x0c
    1b90:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	89 85       	ldd	r24, Y+9	; 0x09
    1b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	9a 87       	std	Y+10, r25	; 0x0a
    1b9a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9c:	89 85       	ldd	r24, Y+9	; 0x09
    1b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	51 f7       	brne	.-44     	; 0x1b78 <lcd_set_4bit+0xbe>
    1ba4:	17 c0       	rjmp	.+46     	; 0x1bd4 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ba8:	7e 81       	ldd	r23, Y+6	; 0x06
    1baa:	8f 81       	ldd	r24, Y+7	; 0x07
    1bac:	98 85       	ldd	r25, Y+8	; 0x08
    1bae:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9a 87       	std	Y+10, r25	; 0x0a
    1bb8:	89 87       	std	Y+9, r24	; 0x09
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbe:	9e 87       	std	Y+14, r25	; 0x0e
    1bc0:	8d 87       	std	Y+13, r24	; 0x0d
    1bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc6:	8c 01       	movw	r16, r24
    1bc8:	f8 01       	movw	r30, r16
    1bca:	31 97       	sbiw	r30, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <lcd_set_4bit+0x110>
    1bce:	8f 01       	movw	r16, r30
    1bd0:	1e 87       	std	Y+14, r17	; 0x0e
    1bd2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1bd4:	88 e2       	ldi	r24, 0x28	; 40
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	28 e2       	ldi	r18, 0x28	; 40
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	f9 01       	movw	r30, r18
    1bde:	20 81       	ld	r18, Z
    1be0:	2e 7f       	andi	r18, 0xFE	; 254
    1be2:	fc 01       	movw	r30, r24
    1be4:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1be6:	88 e2       	ldi	r24, 0x28	; 40
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	28 e2       	ldi	r18, 0x28	; 40
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	f9 01       	movw	r30, r18
    1bf0:	20 81       	ld	r18, Z
    1bf2:	2d 7f       	andi	r18, 0xFD	; 253
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
    1bf8:	88 e2       	ldi	r24, 0x28	; 40
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	20 e3       	ldi	r18, 0x30	; 48
    1bfe:	fc 01       	movw	r30, r24
    1c00:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
    1c02:	88 e2       	ldi	r24, 0x28	; 40
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	28 e2       	ldi	r18, 0x28	; 40
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	20 81       	ld	r18, Z
    1c0e:	24 60       	ori	r18, 0x04	; 4
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 ea       	ldi	r26, 0xA0	; 160
    1c1a:	b0 e4       	ldi	r27, 0x40	; 64
    1c1c:	8f 87       	std	Y+15, r24	; 0x0f
    1c1e:	98 8b       	std	Y+16, r25	; 0x10
    1c20:	a9 8b       	std	Y+17, r26	; 0x11
    1c22:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c26:	78 89       	ldd	r23, Y+16	; 0x10
    1c28:	89 89       	ldd	r24, Y+17	; 0x11
    1c2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2c:	26 e6       	ldi	r18, 0x66	; 102
    1c2e:	36 e6       	ldi	r19, 0x66	; 102
    1c30:	46 e6       	ldi	r20, 0x66	; 102
    1c32:	55 e4       	ldi	r21, 0x45	; 69
    1c34:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8b 8b       	std	Y+19, r24	; 0x13
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	ad 8b       	std	Y+21, r26	; 0x15
    1c42:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1c44:	11 e0       	ldi	r17, 0x01	; 1
    1c46:	6b 89       	ldd	r22, Y+19	; 0x13
    1c48:	7c 89       	ldd	r23, Y+20	; 0x14
    1c4a:	8d 89       	ldd	r24, Y+21	; 0x15
    1c4c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	0c f0       	brlt	.+2      	; 0x1c60 <lcd_set_4bit+0x1a6>
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	11 23       	and	r17, r17
    1c62:	29 f0       	breq	.+10     	; 0x1c6e <lcd_set_4bit+0x1b4>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	98 8f       	std	Y+24, r25	; 0x18
    1c6a:	8f 8b       	std	Y+23, r24	; 0x17
    1c6c:	46 c0       	rjmp	.+140    	; 0x1cfa <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
    1c6e:	11 e0       	ldi	r17, 0x01	; 1
    1c70:	6b 89       	ldd	r22, Y+19	; 0x13
    1c72:	7c 89       	ldd	r23, Y+20	; 0x14
    1c74:	8d 89       	ldd	r24, Y+21	; 0x15
    1c76:	9e 89       	ldd	r25, Y+22	; 0x16
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	57 e4       	ldi	r21, 0x47	; 71
    1c80:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	0c f0       	brlt	.+2      	; 0x1c8a <lcd_set_4bit+0x1d0>
    1c88:	10 e0       	ldi	r17, 0x00	; 0
    1c8a:	11 23       	and	r17, r17
    1c8c:	61 f1       	breq	.+88     	; 0x1ce6 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c90:	78 89       	ldd	r23, Y+16	; 0x10
    1c92:	89 89       	ldd	r24, Y+17	; 0x11
    1c94:	9a 89       	ldd	r25, Y+18	; 0x12
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	98 8f       	std	Y+24, r25	; 0x18
    1cb4:	8f 8b       	std	Y+23, r24	; 0x17
    1cb6:	12 c0       	rjmp	.+36     	; 0x1cdc <lcd_set_4bit+0x222>
    1cb8:	80 e7       	ldi	r24, 0x70	; 112
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cbe:	89 8f       	std	Y+25, r24	; 0x19
    1cc0:	89 8d       	ldd	r24, Y+25	; 0x19
    1cc2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	c8 01       	movw	r24, r16
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <lcd_set_4bit+0x20e>
    1ccc:	8c 01       	movw	r16, r24
    1cce:	1a 8f       	std	Y+26, r17	; 0x1a
    1cd0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	98 8f       	std	Y+24, r25	; 0x18
    1cda:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cde:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	51 f7       	brne	.-44     	; 0x1cb8 <lcd_set_4bit+0x1fe>
    1ce4:	17 c0       	rjmp	.+46     	; 0x1d14 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6b 89       	ldd	r22, Y+19	; 0x13
    1ce8:	7c 89       	ldd	r23, Y+20	; 0x14
    1cea:	8d 89       	ldd	r24, Y+21	; 0x15
    1cec:	9e 89       	ldd	r25, Y+22	; 0x16
    1cee:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	98 8f       	std	Y+24, r25	; 0x18
    1cf8:	8f 8b       	std	Y+23, r24	; 0x17
    1cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfe:	9c 8f       	std	Y+28, r25	; 0x1c
    1d00:	8b 8f       	std	Y+27, r24	; 0x1b
    1d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d06:	8c 01       	movw	r16, r24
    1d08:	f8 01       	movw	r30, r16
    1d0a:	31 97       	sbiw	r30, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <lcd_set_4bit+0x250>
    1d0e:	8f 01       	movw	r16, r30
    1d10:	1c 8f       	std	Y+28, r17	; 0x1c
    1d12:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1d14:	88 e2       	ldi	r24, 0x28	; 40
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	28 e2       	ldi	r18, 0x28	; 40
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	20 81       	ld	r18, Z
    1d20:	2b 7f       	andi	r18, 0xFB	; 251
    1d22:	fc 01       	movw	r30, r24
    1d24:	20 83       	st	Z, r18
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e8       	ldi	r26, 0x80	; 128
    1d2c:	bf e3       	ldi	r27, 0x3F	; 63
    1d2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d30:	9e 8f       	std	Y+30, r25	; 0x1e
    1d32:	af 8f       	std	Y+31, r26	; 0x1f
    1d34:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d3c:	98 a1       	lds	r25, 0x48
    1d3e:	26 e6       	ldi	r18, 0x66	; 102
    1d40:	36 e6       	ldi	r19, 0x66	; 102
    1d42:	46 e6       	ldi	r20, 0x66	; 102
    1d44:	55 e4       	ldi	r21, 0x45	; 69
    1d46:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	89 a3       	lds	r24, 0x59
    1d50:	9a a3       	lds	r25, 0x5a
    1d52:	ab a3       	lds	r26, 0x5b
    1d54:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    1d56:	11 e0       	ldi	r17, 0x01	; 1
    1d58:	69 a1       	lds	r22, 0x49
    1d5a:	7a a1       	lds	r23, 0x4a
    1d5c:	8b a1       	lds	r24, 0x4b
    1d5e:	9c a1       	lds	r25, 0x4c
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	0c f0       	brlt	.+2      	; 0x1d72 <lcd_set_4bit+0x2b8>
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	11 23       	and	r17, r17
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <lcd_set_4bit+0x2c6>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9e a3       	lds	r25, 0x5e
    1d7c:	8d a3       	lds	r24, 0x5d
    1d7e:	46 c0       	rjmp	.+140    	; 0x1e0c <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
    1d80:	11 e0       	ldi	r17, 0x01	; 1
    1d82:	69 a1       	lds	r22, 0x49
    1d84:	7a a1       	lds	r23, 0x4a
    1d86:	8b a1       	lds	r24, 0x4b
    1d88:	9c a1       	lds	r25, 0x4c
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	0c f0       	brlt	.+2      	; 0x1d9c <lcd_set_4bit+0x2e2>
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	11 23       	and	r17, r17
    1d9e:	61 f1       	breq	.+88     	; 0x1df8 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1da2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1da4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1da6:	98 a1       	lds	r25, 0x48
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9e a3       	lds	r25, 0x5e
    1dc6:	8d a3       	lds	r24, 0x5d
    1dc8:	12 c0       	rjmp	.+36     	; 0x1dee <lcd_set_4bit+0x334>
    1dca:	80 e7       	ldi	r24, 0x70	; 112
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	98 a7       	lds	r25, 0x78
    1dd0:	8f a3       	lds	r24, 0x5f
    1dd2:	8f a1       	lds	r24, 0x4f
    1dd4:	98 a5       	lds	r25, 0x68
    1dd6:	8c 01       	movw	r16, r24
    1dd8:	c8 01       	movw	r24, r16
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <lcd_set_4bit+0x320>
    1dde:	8c 01       	movw	r16, r24
    1de0:	18 a7       	lds	r17, 0x78
    1de2:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	8d a1       	lds	r24, 0x4d
    1de6:	9e a1       	lds	r25, 0x4e
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9e a3       	lds	r25, 0x5e
    1dec:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	8d a1       	lds	r24, 0x4d
    1df0:	9e a1       	lds	r25, 0x4e
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	51 f7       	brne	.-44     	; 0x1dca <lcd_set_4bit+0x310>
    1df6:	17 c0       	rjmp	.+46     	; 0x1e26 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	69 a1       	lds	r22, 0x49
    1dfa:	7a a1       	lds	r23, 0x4a
    1dfc:	8b a1       	lds	r24, 0x4b
    1dfe:	9c a1       	lds	r25, 0x4c
    1e00:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9e a3       	lds	r25, 0x5e
    1e0a:	8d a3       	lds	r24, 0x5d
    1e0c:	8d a1       	lds	r24, 0x4d
    1e0e:	9e a1       	lds	r25, 0x4e
    1e10:	9a a7       	lds	r25, 0x7a
    1e12:	89 a7       	lds	r24, 0x79
    1e14:	89 a5       	lds	r24, 0x69
    1e16:	9a a5       	lds	r25, 0x6a
    1e18:	8c 01       	movw	r16, r24
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	31 97       	sbiw	r30, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <lcd_set_4bit+0x362>
    1e20:	8f 01       	movw	r16, r30
    1e22:	1a a7       	lds	r17, 0x7a
    1e24:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1e26:	88 e2       	ldi	r24, 0x28	; 40
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	28 e2       	ldi	r18, 0x28	; 40
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	f9 01       	movw	r30, r18
    1e30:	20 81       	ld	r18, Z
    1e32:	2e 7f       	andi	r18, 0xFE	; 254
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1e38:	88 e2       	ldi	r24, 0x28	; 40
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	28 e2       	ldi	r18, 0x28	; 40
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	f9 01       	movw	r30, r18
    1e42:	20 81       	ld	r18, Z
    1e44:	2d 7f       	andi	r18, 0xFD	; 253
    1e46:	fc 01       	movw	r30, r24
    1e48:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
    1e4a:	88 e2       	ldi	r24, 0x28	; 40
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	20 e3       	ldi	r18, 0x30	; 48
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
    1e54:	88 e2       	ldi	r24, 0x28	; 40
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	28 e2       	ldi	r18, 0x28	; 40
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	20 81       	ld	r18, Z
    1e60:	24 60       	ori	r18, 0x04	; 4
    1e62:	fc 01       	movw	r30, r24
    1e64:	20 83       	st	Z, r18
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 ea       	ldi	r26, 0xA0	; 160
    1e6c:	b0 e4       	ldi	r27, 0x40	; 64
    1e6e:	8b a7       	lds	r24, 0x7b
    1e70:	9c a7       	lds	r25, 0x7c
    1e72:	ad a7       	lds	r26, 0x7d
    1e74:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	6b a5       	lds	r22, 0x6b
    1e78:	7c a5       	lds	r23, 0x6c
    1e7a:	8d a5       	lds	r24, 0x6d
    1e7c:	9e a5       	lds	r25, 0x6e
    1e7e:	26 e6       	ldi	r18, 0x66	; 102
    1e80:	36 e6       	ldi	r19, 0x66	; 102
    1e82:	46 e6       	ldi	r20, 0x66	; 102
    1e84:	55 e4       	ldi	r21, 0x45	; 69
    1e86:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8f a7       	lds	r24, 0x7f
    1e90:	98 ab       	sts	0x58, r25
    1e92:	a9 ab       	sts	0x59, r26
    1e94:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    1e96:	11 e0       	ldi	r17, 0x01	; 1
    1e98:	6f a5       	lds	r22, 0x6f
    1e9a:	78 a9       	sts	0x48, r23
    1e9c:	89 a9       	sts	0x49, r24
    1e9e:	9a a9       	sts	0x4a, r25
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <lcd_set_4bit+0x3f8>
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
    1eb2:	11 23       	and	r17, r17
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <lcd_set_4bit+0x406>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9c ab       	sts	0x5c, r25
    1ebc:	8b ab       	sts	0x5b, r24
    1ebe:	46 c0       	rjmp	.+140    	; 0x1f4c <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
    1ec0:	11 e0       	ldi	r17, 0x01	; 1
    1ec2:	6f a5       	lds	r22, 0x6f
    1ec4:	78 a9       	sts	0x48, r23
    1ec6:	89 a9       	sts	0x49, r24
    1ec8:	9a a9       	sts	0x4a, r25
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	0c f0       	brlt	.+2      	; 0x1edc <lcd_set_4bit+0x422>
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	11 23       	and	r17, r17
    1ede:	61 f1       	breq	.+88     	; 0x1f38 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	6b a5       	lds	r22, 0x6b
    1ee2:	7c a5       	lds	r23, 0x6c
    1ee4:	8d a5       	lds	r24, 0x6d
    1ee6:	9e a5       	lds	r25, 0x6e
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9c ab       	sts	0x5c, r25
    1f06:	8b ab       	sts	0x5b, r24
    1f08:	12 c0       	rjmp	.+36     	; 0x1f2e <lcd_set_4bit+0x474>
    1f0a:	80 e7       	ldi	r24, 0x70	; 112
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	9e ab       	sts	0x5e, r25
    1f10:	8d ab       	sts	0x5d, r24
    1f12:	8d a9       	sts	0x4d, r24
    1f14:	9e a9       	sts	0x4e, r25
    1f16:	8c 01       	movw	r16, r24
    1f18:	c8 01       	movw	r24, r16
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <lcd_set_4bit+0x460>
    1f1e:	8c 01       	movw	r16, r24
    1f20:	1e ab       	sts	0x5e, r17
    1f22:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8b a9       	sts	0x4b, r24
    1f26:	9c a9       	sts	0x4c, r25
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9c ab       	sts	0x5c, r25
    1f2c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8b a9       	sts	0x4b, r24
    1f30:	9c a9       	sts	0x4c, r25
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	51 f7       	brne	.-44     	; 0x1f0a <lcd_set_4bit+0x450>
    1f36:	17 c0       	rjmp	.+46     	; 0x1f66 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f a5       	lds	r22, 0x6f
    1f3a:	78 a9       	sts	0x48, r23
    1f3c:	89 a9       	sts	0x49, r24
    1f3e:	9a a9       	sts	0x4a, r25
    1f40:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9c ab       	sts	0x5c, r25
    1f4a:	8b ab       	sts	0x5b, r24
    1f4c:	8b a9       	sts	0x4b, r24
    1f4e:	9c a9       	sts	0x4c, r25
    1f50:	98 af       	sts	0x78, r25
    1f52:	8f ab       	sts	0x5f, r24
    1f54:	8f a9       	sts	0x4f, r24
    1f56:	98 ad       	sts	0x68, r25
    1f58:	8c 01       	movw	r16, r24
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	31 97       	sbiw	r30, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <lcd_set_4bit+0x4a2>
    1f60:	8f 01       	movw	r16, r30
    1f62:	18 af       	sts	0x78, r17
    1f64:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1f66:	88 e2       	ldi	r24, 0x28	; 40
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	28 e2       	ldi	r18, 0x28	; 40
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	f9 01       	movw	r30, r18
    1f70:	20 81       	ld	r18, Z
    1f72:	2b 7f       	andi	r18, 0xFB	; 251
    1f74:	fc 01       	movw	r30, r24
    1f76:	20 83       	st	Z, r18
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	bf e3       	ldi	r27, 0x3F	; 63
    1f80:	89 af       	sts	0x79, r24
    1f82:	9a af       	sts	0x7a, r25
    1f84:	ab af       	sts	0x7b, r26
    1f86:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	69 ad       	sts	0x69, r22
    1f8a:	7a ad       	sts	0x6a, r23
    1f8c:	8b ad       	sts	0x6b, r24
    1f8e:	9c ad       	sts	0x6c, r25
    1f90:	26 e6       	ldi	r18, 0x66	; 102
    1f92:	36 e6       	ldi	r19, 0x66	; 102
    1f94:	46 e6       	ldi	r20, 0x66	; 102
    1f96:	55 e4       	ldi	r21, 0x45	; 69
    1f98:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9e 01       	movw	r18, r28
    1fa2:	23 5c       	subi	r18, 0xC3	; 195
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	80 83       	st	Z, r24
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	a2 83       	std	Z+2, r26	; 0x02
    1fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb0:	11 e0       	ldi	r17, 0x01	; 1
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	cd 96       	adiw	r24, 0x3d	; 61
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	0c f0       	brlt	.+2      	; 0x1fd2 <lcd_set_4bit+0x518>
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	11 23       	and	r17, r17
    1fd4:	49 f0       	breq	.+18     	; 0x1fe8 <lcd_set_4bit+0x52e>
		__ticks = 1;
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	8f 5b       	subi	r24, 0xBF	; 191
    1fda:	9f 4f       	sbci	r25, 0xFF	; 255
    1fdc:	21 e0       	ldi	r18, 0x01	; 1
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	31 83       	std	Z+1, r19	; 0x01
    1fe4:	20 83       	st	Z, r18
    1fe6:	6e c0       	rjmp	.+220    	; 0x20c4 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
    1fe8:	11 e0       	ldi	r17, 0x01	; 1
    1fea:	ce 01       	movw	r24, r28
    1fec:	cd 96       	adiw	r24, 0x3d	; 61
    1fee:	fc 01       	movw	r30, r24
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    2004:	18 16       	cp	r1, r24
    2006:	0c f0       	brlt	.+2      	; 0x200a <lcd_set_4bit+0x550>
    2008:	10 e0       	ldi	r17, 0x00	; 0
    200a:	11 23       	and	r17, r17
    200c:	09 f4       	brne	.+2      	; 0x2010 <lcd_set_4bit+0x556>
    200e:	49 c0       	rjmp	.+146    	; 0x20a2 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	69 ad       	sts	0x69, r22
    2012:	7a ad       	sts	0x6a, r23
    2014:	8b ad       	sts	0x6b, r24
    2016:	9c ad       	sts	0x6c, r25
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8e 01       	movw	r16, r28
    202a:	0f 5b       	subi	r16, 0xBF	; 191
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	f8 01       	movw	r30, r16
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
    2040:	27 c0       	rjmp	.+78     	; 0x2090 <lcd_set_4bit+0x5d6>
    2042:	ce 01       	movw	r24, r28
    2044:	8d 5b       	subi	r24, 0xBD	; 189
    2046:	9f 4f       	sbci	r25, 0xFF	; 255
    2048:	20 e7       	ldi	r18, 0x70	; 112
    204a:	31 e0       	ldi	r19, 0x01	; 1
    204c:	fc 01       	movw	r30, r24
    204e:	31 83       	std	Z+1, r19	; 0x01
    2050:	20 83       	st	Z, r18
    2052:	ce 01       	movw	r24, r28
    2054:	8d 5b       	subi	r24, 0xBD	; 189
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	fc 01       	movw	r30, r24
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	8c 01       	movw	r16, r24
    2060:	c8 01       	movw	r24, r16
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <lcd_set_4bit+0x5a8>
    2066:	8c 01       	movw	r16, r24
    2068:	ce 01       	movw	r24, r28
    206a:	8d 5b       	subi	r24, 0xBD	; 189
    206c:	9f 4f       	sbci	r25, 0xFF	; 255
    206e:	fc 01       	movw	r30, r24
    2070:	11 83       	std	Z+1, r17	; 0x01
    2072:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	ce 01       	movw	r24, r28
    2076:	8f 5b       	subi	r24, 0xBF	; 191
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	9e 01       	movw	r18, r28
    207c:	2f 5b       	subi	r18, 0xBF	; 191
    207e:	3f 4f       	sbci	r19, 0xFF	; 255
    2080:	f9 01       	movw	r30, r18
    2082:	20 81       	ld	r18, Z
    2084:	31 81       	ldd	r19, Z+1	; 0x01
    2086:	21 50       	subi	r18, 0x01	; 1
    2088:	30 40       	sbci	r19, 0x00	; 0
    208a:	fc 01       	movw	r30, r24
    208c:	31 83       	std	Z+1, r19	; 0x01
    208e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	ce 01       	movw	r24, r28
    2092:	8f 5b       	subi	r24, 0xBF	; 191
    2094:	9f 4f       	sbci	r25, 0xFF	; 255
    2096:	fc 01       	movw	r30, r24
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	89 f6       	brne	.-94     	; 0x2042 <lcd_set_4bit+0x588>
    20a0:	2e c0       	rjmp	.+92     	; 0x20fe <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a2:	8e 01       	movw	r16, r28
    20a4:	0f 5b       	subi	r16, 0xBF	; 191
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	ce 01       	movw	r24, r28
    20aa:	cd 96       	adiw	r24, 0x3d	; 61
    20ac:	fc 01       	movw	r30, r24
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
    20c4:	ce 01       	movw	r24, r28
    20c6:	8b 5b       	subi	r24, 0xBB	; 187
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	9e 01       	movw	r18, r28
    20cc:	2f 5b       	subi	r18, 0xBF	; 191
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	f9 01       	movw	r30, r18
    20d2:	20 81       	ld	r18, Z
    20d4:	31 81       	ldd	r19, Z+1	; 0x01
    20d6:	fc 01       	movw	r30, r24
    20d8:	31 83       	std	Z+1, r19	; 0x01
    20da:	20 83       	st	Z, r18
    20dc:	ce 01       	movw	r24, r28
    20de:	8b 5b       	subi	r24, 0xBB	; 187
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	fc 01       	movw	r30, r24
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	8c 01       	movw	r16, r24
    20ea:	c8 01       	movw	r24, r16
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <lcd_set_4bit+0x632>
    20f0:	8c 01       	movw	r16, r24
    20f2:	ce 01       	movw	r24, r28
    20f4:	8b 5b       	subi	r24, 0xBB	; 187
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	fc 01       	movw	r30, r24
    20fa:	11 83       	std	Z+1, r17	; 0x01
    20fc:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    20fe:	88 e2       	ldi	r24, 0x28	; 40
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	28 e2       	ldi	r18, 0x28	; 40
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	f9 01       	movw	r30, r18
    2108:	20 81       	ld	r18, Z
    210a:	2e 7f       	andi	r18, 0xFE	; 254
    210c:	fc 01       	movw	r30, r24
    210e:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    2110:	88 e2       	ldi	r24, 0x28	; 40
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	28 e2       	ldi	r18, 0x28	; 40
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	f9 01       	movw	r30, r18
    211a:	20 81       	ld	r18, Z
    211c:	2d 7f       	andi	r18, 0xFD	; 253
    211e:	fc 01       	movw	r30, r24
    2120:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
    2122:	88 e2       	ldi	r24, 0x28	; 40
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	20 e3       	ldi	r18, 0x30	; 48
    2128:	fc 01       	movw	r30, r24
    212a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
    212c:	88 e2       	ldi	r24, 0x28	; 40
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	28 e2       	ldi	r18, 0x28	; 40
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	f9 01       	movw	r30, r18
    2136:	20 81       	ld	r18, Z
    2138:	24 60       	ori	r18, 0x04	; 4
    213a:	fc 01       	movw	r30, r24
    213c:	20 83       	st	Z, r18
    213e:	9e 01       	movw	r18, r28
    2140:	29 5b       	subi	r18, 0xB9	; 185
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 ea       	ldi	r26, 0xA0	; 160
    214a:	b0 e4       	ldi	r27, 0x40	; 64
    214c:	f9 01       	movw	r30, r18
    214e:	80 83       	st	Z, r24
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	a2 83       	std	Z+2, r26	; 0x02
    2154:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2156:	8e 01       	movw	r16, r28
    2158:	05 5b       	subi	r16, 0xB5	; 181
    215a:	1f 4f       	sbci	r17, 0xFF	; 255
    215c:	ce 01       	movw	r24, r28
    215e:	89 5b       	subi	r24, 0xB9	; 185
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	fc 01       	movw	r30, r24
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	26 e6       	ldi	r18, 0x66	; 102
    216e:	36 e6       	ldi	r19, 0x66	; 102
    2170:	46 e6       	ldi	r20, 0x66	; 102
    2172:	55 e4       	ldi	r21, 0x45	; 69
    2174:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	f8 01       	movw	r30, r16
    217e:	80 83       	st	Z, r24
    2180:	91 83       	std	Z+1, r25	; 0x01
    2182:	a2 83       	std	Z+2, r26	; 0x02
    2184:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2186:	ce 01       	movw	r24, r28
    2188:	85 5b       	subi	r24, 0xB5	; 181
    218a:	9f 4f       	sbci	r25, 0xFF	; 255
    218c:	11 e0       	ldi	r17, 0x01	; 1
    218e:	fc 01       	movw	r30, r24
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	0c f0       	brlt	.+2      	; 0x21aa <lcd_set_4bit+0x6f0>
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    21aa:	11 23       	and	r17, r17
    21ac:	49 f0       	breq	.+18     	; 0x21c0 <lcd_set_4bit+0x706>
		__ticks = 1;
    21ae:	ce 01       	movw	r24, r28
    21b0:	81 5b       	subi	r24, 0xB1	; 177
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	21 e0       	ldi	r18, 0x01	; 1
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	fc 01       	movw	r30, r24
    21ba:	31 83       	std	Z+1, r19	; 0x01
    21bc:	20 83       	st	Z, r18
    21be:	74 c0       	rjmp	.+232    	; 0x22a8 <__stack+0xa9>
	else if (__tmp > 65535)
    21c0:	ce 01       	movw	r24, r28
    21c2:	85 5b       	subi	r24, 0xB5	; 181
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	11 e0       	ldi	r17, 0x01	; 1
    21c8:	fc 01       	movw	r30, r24
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <lcd_set_4bit+0x72a>
    21e2:	10 e0       	ldi	r17, 0x00	; 0
    21e4:	11 23       	and	r17, r17
    21e6:	09 f4       	brne	.+2      	; 0x21ea <lcd_set_4bit+0x730>
    21e8:	4d c0       	rjmp	.+154    	; 0x2284 <__stack+0x85>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	ce 01       	movw	r24, r28
    21ec:	89 5b       	subi	r24, 0xB9	; 185
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	fc 01       	movw	r30, r24
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8e 01       	movw	r16, r28
    220c:	01 5b       	subi	r16, 0xB1	; 177
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	f8 01       	movw	r30, r16
    221e:	91 83       	std	Z+1, r25	; 0x01
    2220:	80 83       	st	Z, r24
    2222:	27 c0       	rjmp	.+78     	; 0x2272 <__stack+0x73>
    2224:	ce 01       	movw	r24, r28
    2226:	8f 5a       	subi	r24, 0xAF	; 175
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	20 e7       	ldi	r18, 0x70	; 112
    222c:	31 e0       	ldi	r19, 0x01	; 1
    222e:	fc 01       	movw	r30, r24
    2230:	31 83       	std	Z+1, r19	; 0x01
    2232:	20 83       	st	Z, r18
    2234:	ce 01       	movw	r24, r28
    2236:	8f 5a       	subi	r24, 0xAF	; 175
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	fc 01       	movw	r30, r24
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	8c 01       	movw	r16, r24
    2242:	c8 01       	movw	r24, r16
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <__stack+0x45>
    2248:	8c 01       	movw	r16, r24
    224a:	ce 01       	movw	r24, r28
    224c:	8f 5a       	subi	r24, 0xAF	; 175
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	fc 01       	movw	r30, r24
    2252:	11 83       	std	Z+1, r17	; 0x01
    2254:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2256:	ce 01       	movw	r24, r28
    2258:	81 5b       	subi	r24, 0xB1	; 177
    225a:	9f 4f       	sbci	r25, 0xFF	; 255
    225c:	9e 01       	movw	r18, r28
    225e:	21 5b       	subi	r18, 0xB1	; 177
    2260:	3f 4f       	sbci	r19, 0xFF	; 255
    2262:	f9 01       	movw	r30, r18
    2264:	20 81       	ld	r18, Z
    2266:	31 81       	ldd	r19, Z+1	; 0x01
    2268:	21 50       	subi	r18, 0x01	; 1
    226a:	30 40       	sbci	r19, 0x00	; 0
    226c:	fc 01       	movw	r30, r24
    226e:	31 83       	std	Z+1, r19	; 0x01
    2270:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	ce 01       	movw	r24, r28
    2274:	81 5b       	subi	r24, 0xB1	; 177
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	fc 01       	movw	r30, r24
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	89 f6       	brne	.-94     	; 0x2224 <__stack+0x25>
    2282:	2f c0       	rjmp	.+94     	; 0x22e2 <__stack+0xe3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2284:	8e 01       	movw	r16, r28
    2286:	01 5b       	subi	r16, 0xB1	; 177
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	ce 01       	movw	r24, r28
    228c:	85 5b       	subi	r24, 0xB5	; 181
    228e:	9f 4f       	sbci	r25, 0xFF	; 255
    2290:	fc 01       	movw	r30, r24
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	f8 01       	movw	r30, r16
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24
    22a8:	ce 01       	movw	r24, r28
    22aa:	8d 5a       	subi	r24, 0xAD	; 173
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	9e 01       	movw	r18, r28
    22b0:	21 5b       	subi	r18, 0xB1	; 177
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	f9 01       	movw	r30, r18
    22b6:	20 81       	ld	r18, Z
    22b8:	31 81       	ldd	r19, Z+1	; 0x01
    22ba:	fc 01       	movw	r30, r24
    22bc:	31 83       	std	Z+1, r19	; 0x01
    22be:	20 83       	st	Z, r18
    22c0:	ce 01       	movw	r24, r28
    22c2:	8d 5a       	subi	r24, 0xAD	; 173
    22c4:	9f 4f       	sbci	r25, 0xFF	; 255
    22c6:	fc 01       	movw	r30, r24
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	8c 01       	movw	r16, r24
    22ce:	c8 01       	movw	r24, r16
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <__stack+0xd1>
    22d4:	8c 01       	movw	r16, r24
    22d6:	ce 01       	movw	r24, r28
    22d8:	8d 5a       	subi	r24, 0xAD	; 173
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	fc 01       	movw	r30, r24
    22de:	11 83       	std	Z+1, r17	; 0x01
    22e0:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    22e2:	88 e2       	ldi	r24, 0x28	; 40
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	28 e2       	ldi	r18, 0x28	; 40
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	f9 01       	movw	r30, r18
    22ec:	20 81       	ld	r18, Z
    22ee:	2b 7f       	andi	r18, 0xFB	; 251
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
    22f4:	9e 01       	movw	r18, r28
    22f6:	2b 5a       	subi	r18, 0xAB	; 171
    22f8:	3f 4f       	sbci	r19, 0xFF	; 255
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e8       	ldi	r26, 0x80	; 128
    2300:	bf e3       	ldi	r27, 0x3F	; 63
    2302:	f9 01       	movw	r30, r18
    2304:	80 83       	st	Z, r24
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	a2 83       	std	Z+2, r26	; 0x02
    230a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    230c:	8e 01       	movw	r16, r28
    230e:	07 5a       	subi	r16, 0xA7	; 167
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	ce 01       	movw	r24, r28
    2314:	8b 5a       	subi	r24, 0xAB	; 171
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	fc 01       	movw	r30, r24
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	26 e6       	ldi	r18, 0x66	; 102
    2324:	36 e6       	ldi	r19, 0x66	; 102
    2326:	46 e6       	ldi	r20, 0x66	; 102
    2328:	55 e4       	ldi	r21, 0x45	; 69
    232a:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233c:	ce 01       	movw	r24, r28
    233e:	87 5a       	subi	r24, 0xA7	; 167
    2340:	9f 4f       	sbci	r25, 0xFF	; 255
    2342:	11 e0       	ldi	r17, 0x01	; 1
    2344:	fc 01       	movw	r30, r24
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    235a:	88 23       	and	r24, r24
    235c:	0c f0       	brlt	.+2      	; 0x2360 <__stack+0x161>
    235e:	10 e0       	ldi	r17, 0x00	; 0
    2360:	11 23       	and	r17, r17
    2362:	49 f0       	breq	.+18     	; 0x2376 <__stack+0x177>
		__ticks = 1;
    2364:	ce 01       	movw	r24, r28
    2366:	83 5a       	subi	r24, 0xA3	; 163
    2368:	9f 4f       	sbci	r25, 0xFF	; 255
    236a:	21 e0       	ldi	r18, 0x01	; 1
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	fc 01       	movw	r30, r24
    2370:	31 83       	std	Z+1, r19	; 0x01
    2372:	20 83       	st	Z, r18
    2374:	74 c0       	rjmp	.+232    	; 0x245e <__stack+0x25f>
	else if (__tmp > 65535)
    2376:	ce 01       	movw	r24, r28
    2378:	87 5a       	subi	r24, 0xA7	; 167
    237a:	9f 4f       	sbci	r25, 0xFF	; 255
    237c:	11 e0       	ldi	r17, 0x01	; 1
    237e:	fc 01       	movw	r30, r24
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    2394:	18 16       	cp	r1, r24
    2396:	0c f0       	brlt	.+2      	; 0x239a <__stack+0x19b>
    2398:	10 e0       	ldi	r17, 0x00	; 0
    239a:	11 23       	and	r17, r17
    239c:	09 f4       	brne	.+2      	; 0x23a0 <__stack+0x1a1>
    239e:	4d c0       	rjmp	.+154    	; 0x243a <__stack+0x23b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	ce 01       	movw	r24, r28
    23a2:	8b 5a       	subi	r24, 0xAB	; 171
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	fc 01       	movw	r30, r24
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	8e 01       	movw	r16, r28
    23c2:	03 5a       	subi	r16, 0xA3	; 163
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	f8 01       	movw	r30, r16
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    23d8:	27 c0       	rjmp	.+78     	; 0x2428 <__stack+0x229>
    23da:	ce 01       	movw	r24, r28
    23dc:	81 5a       	subi	r24, 0xA1	; 161
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	20 e7       	ldi	r18, 0x70	; 112
    23e2:	31 e0       	ldi	r19, 0x01	; 1
    23e4:	fc 01       	movw	r30, r24
    23e6:	31 83       	std	Z+1, r19	; 0x01
    23e8:	20 83       	st	Z, r18
    23ea:	ce 01       	movw	r24, r28
    23ec:	81 5a       	subi	r24, 0xA1	; 161
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	fc 01       	movw	r30, r24
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	8c 01       	movw	r16, r24
    23f8:	c8 01       	movw	r24, r16
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <__stack+0x1fb>
    23fe:	8c 01       	movw	r16, r24
    2400:	ce 01       	movw	r24, r28
    2402:	81 5a       	subi	r24, 0xA1	; 161
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	fc 01       	movw	r30, r24
    2408:	11 83       	std	Z+1, r17	; 0x01
    240a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	ce 01       	movw	r24, r28
    240e:	83 5a       	subi	r24, 0xA3	; 163
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	9e 01       	movw	r18, r28
    2414:	23 5a       	subi	r18, 0xA3	; 163
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	f9 01       	movw	r30, r18
    241a:	20 81       	ld	r18, Z
    241c:	31 81       	ldd	r19, Z+1	; 0x01
    241e:	21 50       	subi	r18, 0x01	; 1
    2420:	30 40       	sbci	r19, 0x00	; 0
    2422:	fc 01       	movw	r30, r24
    2424:	31 83       	std	Z+1, r19	; 0x01
    2426:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	ce 01       	movw	r24, r28
    242a:	83 5a       	subi	r24, 0xA3	; 163
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	fc 01       	movw	r30, r24
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	89 f6       	brne	.-94     	; 0x23da <__stack+0x1db>
    2438:	2f c0       	rjmp	.+94     	; 0x2498 <__stack+0x299>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	8e 01       	movw	r16, r28
    243c:	03 5a       	subi	r16, 0xA3	; 163
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	ce 01       	movw	r24, r28
    2442:	87 5a       	subi	r24, 0xA7	; 167
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	fc 01       	movw	r30, r24
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	f8 01       	movw	r30, r16
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	ce 01       	movw	r24, r28
    2460:	8f 59       	subi	r24, 0x9F	; 159
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	9e 01       	movw	r18, r28
    2466:	23 5a       	subi	r18, 0xA3	; 163
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	f9 01       	movw	r30, r18
    246c:	20 81       	ld	r18, Z
    246e:	31 81       	ldd	r19, Z+1	; 0x01
    2470:	fc 01       	movw	r30, r24
    2472:	31 83       	std	Z+1, r19	; 0x01
    2474:	20 83       	st	Z, r18
    2476:	ce 01       	movw	r24, r28
    2478:	8f 59       	subi	r24, 0x9F	; 159
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	fc 01       	movw	r30, r24
    247e:	80 81       	ld	r24, Z
    2480:	91 81       	ldd	r25, Z+1	; 0x01
    2482:	8c 01       	movw	r16, r24
    2484:	c8 01       	movw	r24, r16
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <__stack+0x287>
    248a:	8c 01       	movw	r16, r24
    248c:	ce 01       	movw	r24, r28
    248e:	8f 59       	subi	r24, 0x9F	; 159
    2490:	9f 4f       	sbci	r25, 0xFF	; 255
    2492:	fc 01       	movw	r30, r24
    2494:	11 83       	std	Z+1, r17	; 0x01
    2496:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    2498:	88 e2       	ldi	r24, 0x28	; 40
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	28 e2       	ldi	r18, 0x28	; 40
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	f9 01       	movw	r30, r18
    24a2:	20 81       	ld	r18, Z
    24a4:	2e 7f       	andi	r18, 0xFE	; 254
    24a6:	fc 01       	movw	r30, r24
    24a8:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    24aa:	88 e2       	ldi	r24, 0x28	; 40
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	28 e2       	ldi	r18, 0x28	; 40
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	f9 01       	movw	r30, r18
    24b4:	20 81       	ld	r18, Z
    24b6:	2d 7f       	andi	r18, 0xFD	; 253
    24b8:	fc 01       	movw	r30, r24
    24ba:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    24bc:	88 e2       	ldi	r24, 0x28	; 40
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	20 e2       	ldi	r18, 0x20	; 32
    24c2:	fc 01       	movw	r30, r24
    24c4:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
    24c6:	88 e2       	ldi	r24, 0x28	; 40
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	28 e2       	ldi	r18, 0x28	; 40
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	f9 01       	movw	r30, r18
    24d0:	20 81       	ld	r18, Z
    24d2:	24 60       	ori	r18, 0x04	; 4
    24d4:	fc 01       	movw	r30, r24
    24d6:	20 83       	st	Z, r18
    24d8:	9e 01       	movw	r18, r28
    24da:	2d 59       	subi	r18, 0x9D	; 157
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 ea       	ldi	r26, 0xA0	; 160
    24e4:	b0 e4       	ldi	r27, 0x40	; 64
    24e6:	f9 01       	movw	r30, r18
    24e8:	80 83       	st	Z, r24
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	a2 83       	std	Z+2, r26	; 0x02
    24ee:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    24f0:	8e 01       	movw	r16, r28
    24f2:	09 59       	subi	r16, 0x99	; 153
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	ce 01       	movw	r24, r28
    24f8:	8d 59       	subi	r24, 0x9D	; 157
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	fc 01       	movw	r30, r24
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	26 e6       	ldi	r18, 0x66	; 102
    2508:	36 e6       	ldi	r19, 0x66	; 102
    250a:	46 e6       	ldi	r20, 0x66	; 102
    250c:	55 e4       	ldi	r21, 0x45	; 69
    250e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	f8 01       	movw	r30, r16
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2520:	ce 01       	movw	r24, r28
    2522:	89 59       	subi	r24, 0x99	; 153
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	11 e0       	ldi	r17, 0x01	; 1
    2528:	fc 01       	movw	r30, r24
    252a:	60 81       	ld	r22, Z
    252c:	71 81       	ldd	r23, Z+1	; 0x01
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    253e:	88 23       	and	r24, r24
    2540:	0c f0       	brlt	.+2      	; 0x2544 <__stack+0x345>
    2542:	10 e0       	ldi	r17, 0x00	; 0
    2544:	11 23       	and	r17, r17
    2546:	49 f0       	breq	.+18     	; 0x255a <__stack+0x35b>
		__ticks = 1;
    2548:	ce 01       	movw	r24, r28
    254a:	85 59       	subi	r24, 0x95	; 149
    254c:	9f 4f       	sbci	r25, 0xFF	; 255
    254e:	21 e0       	ldi	r18, 0x01	; 1
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	fc 01       	movw	r30, r24
    2554:	31 83       	std	Z+1, r19	; 0x01
    2556:	20 83       	st	Z, r18
    2558:	74 c0       	rjmp	.+232    	; 0x2642 <__stack+0x443>
	else if (__tmp > 65535)
    255a:	ce 01       	movw	r24, r28
    255c:	89 59       	subi	r24, 0x99	; 153
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	11 e0       	ldi	r17, 0x01	; 1
    2562:	fc 01       	movw	r30, r24
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    2578:	18 16       	cp	r1, r24
    257a:	0c f0       	brlt	.+2      	; 0x257e <__stack+0x37f>
    257c:	10 e0       	ldi	r17, 0x00	; 0
    257e:	11 23       	and	r17, r17
    2580:	09 f4       	brne	.+2      	; 0x2584 <__stack+0x385>
    2582:	4d c0       	rjmp	.+154    	; 0x261e <__stack+0x41f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	ce 01       	movw	r24, r28
    2586:	8d 59       	subi	r24, 0x9D	; 157
    2588:	9f 4f       	sbci	r25, 0xFF	; 255
    258a:	fc 01       	movw	r30, r24
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	8e 01       	movw	r16, r28
    25a6:	05 59       	subi	r16, 0x95	; 149
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	f8 01       	movw	r30, r16
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
    25bc:	27 c0       	rjmp	.+78     	; 0x260c <__stack+0x40d>
    25be:	ce 01       	movw	r24, r28
    25c0:	83 59       	subi	r24, 0x93	; 147
    25c2:	9f 4f       	sbci	r25, 0xFF	; 255
    25c4:	20 e7       	ldi	r18, 0x70	; 112
    25c6:	31 e0       	ldi	r19, 0x01	; 1
    25c8:	fc 01       	movw	r30, r24
    25ca:	31 83       	std	Z+1, r19	; 0x01
    25cc:	20 83       	st	Z, r18
    25ce:	ce 01       	movw	r24, r28
    25d0:	83 59       	subi	r24, 0x93	; 147
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	fc 01       	movw	r30, r24
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	8c 01       	movw	r16, r24
    25dc:	c8 01       	movw	r24, r16
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <__stack+0x3df>
    25e2:	8c 01       	movw	r16, r24
    25e4:	ce 01       	movw	r24, r28
    25e6:	83 59       	subi	r24, 0x93	; 147
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ea:	fc 01       	movw	r30, r24
    25ec:	11 83       	std	Z+1, r17	; 0x01
    25ee:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	ce 01       	movw	r24, r28
    25f2:	85 59       	subi	r24, 0x95	; 149
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	9e 01       	movw	r18, r28
    25f8:	25 59       	subi	r18, 0x95	; 149
    25fa:	3f 4f       	sbci	r19, 0xFF	; 255
    25fc:	f9 01       	movw	r30, r18
    25fe:	20 81       	ld	r18, Z
    2600:	31 81       	ldd	r19, Z+1	; 0x01
    2602:	21 50       	subi	r18, 0x01	; 1
    2604:	30 40       	sbci	r19, 0x00	; 0
    2606:	fc 01       	movw	r30, r24
    2608:	31 83       	std	Z+1, r19	; 0x01
    260a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	ce 01       	movw	r24, r28
    260e:	85 59       	subi	r24, 0x95	; 149
    2610:	9f 4f       	sbci	r25, 0xFF	; 255
    2612:	fc 01       	movw	r30, r24
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	89 f6       	brne	.-94     	; 0x25be <__stack+0x3bf>
    261c:	2f c0       	rjmp	.+94     	; 0x267c <__stack+0x47d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	8e 01       	movw	r16, r28
    2620:	05 59       	subi	r16, 0x95	; 149
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	ce 01       	movw	r24, r28
    2626:	89 59       	subi	r24, 0x99	; 153
    2628:	9f 4f       	sbci	r25, 0xFF	; 255
    262a:	fc 01       	movw	r30, r24
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
    2642:	ce 01       	movw	r24, r28
    2644:	81 59       	subi	r24, 0x91	; 145
    2646:	9f 4f       	sbci	r25, 0xFF	; 255
    2648:	9e 01       	movw	r18, r28
    264a:	25 59       	subi	r18, 0x95	; 149
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	f9 01       	movw	r30, r18
    2650:	20 81       	ld	r18, Z
    2652:	31 81       	ldd	r19, Z+1	; 0x01
    2654:	fc 01       	movw	r30, r24
    2656:	31 83       	std	Z+1, r19	; 0x01
    2658:	20 83       	st	Z, r18
    265a:	ce 01       	movw	r24, r28
    265c:	81 59       	subi	r24, 0x91	; 145
    265e:	9f 4f       	sbci	r25, 0xFF	; 255
    2660:	fc 01       	movw	r30, r24
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	8c 01       	movw	r16, r24
    2668:	c8 01       	movw	r24, r16
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <__stack+0x46b>
    266e:	8c 01       	movw	r16, r24
    2670:	ce 01       	movw	r24, r28
    2672:	81 59       	subi	r24, 0x91	; 145
    2674:	9f 4f       	sbci	r25, 0xFF	; 255
    2676:	fc 01       	movw	r30, r24
    2678:	11 83       	std	Z+1, r17	; 0x01
    267a:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    267c:	88 e2       	ldi	r24, 0x28	; 40
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	28 e2       	ldi	r18, 0x28	; 40
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	f9 01       	movw	r30, r18
    2686:	20 81       	ld	r18, Z
    2688:	2b 7f       	andi	r18, 0xFB	; 251
    268a:	fc 01       	movw	r30, r24
    268c:	20 83       	st	Z, r18


}
    268e:	c0 59       	subi	r28, 0x90	; 144
    2690:	df 4f       	sbci	r29, 0xFF	; 255
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <lcd_init>:
void lcd_init()
{
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	2e 97       	sbiw	r28, 0x0e	; 14
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a0 e8       	ldi	r26, 0x80	; 128
    26c4:	bf e3       	ldi	r27, 0x3F	; 63
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	ab 83       	std	Y+3, r26	; 0x03
    26cc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    26ce:	69 81       	ldd	r22, Y+1	; 0x01
    26d0:	7a 81       	ldd	r23, Y+2	; 0x02
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	26 e6       	ldi	r18, 0x66	; 102
    26d8:	36 e6       	ldi	r19, 0x66	; 102
    26da:	46 e6       	ldi	r20, 0x66	; 102
    26dc:	55 e4       	ldi	r21, 0x45	; 69
    26de:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	8d 83       	std	Y+5, r24	; 0x05
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	af 83       	std	Y+7, r26	; 0x07
    26ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    26ee:	11 e0       	ldi	r17, 0x01	; 1
    26f0:	6d 81       	ldd	r22, Y+5	; 0x05
    26f2:	7e 81       	ldd	r23, Y+6	; 0x06
    26f4:	8f 81       	ldd	r24, Y+7	; 0x07
    26f6:	98 85       	ldd	r25, Y+8	; 0x08
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    2704:	88 23       	and	r24, r24
    2706:	0c f0       	brlt	.+2      	; 0x270a <lcd_init+0x64>
    2708:	10 e0       	ldi	r17, 0x00	; 0
    270a:	11 23       	and	r17, r17
    270c:	29 f0       	breq	.+10     	; 0x2718 <lcd_init+0x72>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9a 87       	std	Y+10, r25	; 0x0a
    2714:	89 87       	std	Y+9, r24	; 0x09
    2716:	46 c0       	rjmp	.+140    	; 0x27a4 <lcd_init+0xfe>
	else if (__tmp > 65535)
    2718:	11 e0       	ldi	r17, 0x01	; 1
    271a:	6d 81       	ldd	r22, Y+5	; 0x05
    271c:	7e 81       	ldd	r23, Y+6	; 0x06
    271e:	8f 81       	ldd	r24, Y+7	; 0x07
    2720:	98 85       	ldd	r25, Y+8	; 0x08
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f e7       	ldi	r20, 0x7F	; 127
    2728:	57 e4       	ldi	r21, 0x47	; 71
    272a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    272e:	18 16       	cp	r1, r24
    2730:	0c f0       	brlt	.+2      	; 0x2734 <lcd_init+0x8e>
    2732:	10 e0       	ldi	r17, 0x00	; 0
    2734:	11 23       	and	r17, r17
    2736:	61 f1       	breq	.+88     	; 0x2790 <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2738:	69 81       	ldd	r22, Y+1	; 0x01
    273a:	7a 81       	ldd	r23, Y+2	; 0x02
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	51 e4       	ldi	r21, 0x41	; 65
    2748:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9a 87       	std	Y+10, r25	; 0x0a
    275e:	89 87       	std	Y+9, r24	; 0x09
    2760:	12 c0       	rjmp	.+36     	; 0x2786 <lcd_init+0xe0>
    2762:	80 e7       	ldi	r24, 0x70	; 112
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	9c 87       	std	Y+12, r25	; 0x0c
    2768:	8b 87       	std	Y+11, r24	; 0x0b
    276a:	8b 85       	ldd	r24, Y+11	; 0x0b
    276c:	9c 85       	ldd	r25, Y+12	; 0x0c
    276e:	8c 01       	movw	r16, r24
    2770:	c8 01       	movw	r24, r16
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <lcd_init+0xcc>
    2776:	8c 01       	movw	r16, r24
    2778:	1c 87       	std	Y+12, r17	; 0x0c
    277a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9a 87       	std	Y+10, r25	; 0x0a
    2784:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	51 f7       	brne	.-44     	; 0x2762 <lcd_init+0xbc>
    278e:	17 c0       	rjmp	.+46     	; 0x27be <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	6d 81       	ldd	r22, Y+5	; 0x05
    2792:	7e 81       	ldd	r23, Y+6	; 0x06
    2794:	8f 81       	ldd	r24, Y+7	; 0x07
    2796:	98 85       	ldd	r25, Y+8	; 0x08
    2798:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9a 87       	std	Y+10, r25	; 0x0a
    27a2:	89 87       	std	Y+9, r24	; 0x09
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	9e 87       	std	Y+14, r25	; 0x0e
    27aa:	8d 87       	std	Y+13, r24	; 0x0d
    27ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b0:	8c 01       	movw	r16, r24
    27b2:	c8 01       	movw	r24, r16
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <lcd_init+0x10e>
    27b8:	8c 01       	movw	r16, r24
    27ba:	1e 87       	std	Y+14, r17	; 0x0e
    27bc:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    27be:	88 e2       	ldi	r24, 0x28	; 40
    27c0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
	lcd_wr_command(0x01);
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
	lcd_wr_command(0x06);
    27ca:	86 e0       	ldi	r24, 0x06	; 6
    27cc:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
	lcd_wr_command(0x0E);
    27d0:	8e e0       	ldi	r24, 0x0E	; 14
    27d2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
	lcd_wr_command(0x80);
    27d6:	80 e8       	ldi	r24, 0x80	; 128
    27d8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>

}
    27dc:	2e 96       	adiw	r28, 0x0e	; 14
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	08 95       	ret

000027f2 <lcd_wr_command>:


void lcd_wr_command(unsigned char cmd)
{
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	6e 97       	sbiw	r28, 0x1e	; 30
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    280c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    280e:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	80 7f       	andi	r24, 0xF0	; 240
    2814:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    2816:	88 e2       	ldi	r24, 0x28	; 40
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	28 e2       	ldi	r18, 0x28	; 40
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	f9 01       	movw	r30, r18
    2820:	20 81       	ld	r18, Z
    2822:	2f 70       	andi	r18, 0x0F	; 15
    2824:	fc 01       	movw	r30, r24
    2826:	20 83       	st	Z, r18
	lcd_port |= temp;
    2828:	88 e2       	ldi	r24, 0x28	; 40
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	28 e2       	ldi	r18, 0x28	; 40
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	f9 01       	movw	r30, r18
    2832:	30 81       	ld	r19, Z
    2834:	29 81       	ldd	r18, Y+1	; 0x01
    2836:	23 2b       	or	r18, r19
    2838:	fc 01       	movw	r30, r24
    283a:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    283c:	88 e2       	ldi	r24, 0x28	; 40
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	28 e2       	ldi	r18, 0x28	; 40
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	f9 01       	movw	r30, r18
    2846:	20 81       	ld	r18, Z
    2848:	2e 7f       	andi	r18, 0xFE	; 254
    284a:	fc 01       	movw	r30, r24
    284c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    284e:	88 e2       	ldi	r24, 0x28	; 40
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	28 e2       	ldi	r18, 0x28	; 40
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	f9 01       	movw	r30, r18
    2858:	20 81       	ld	r18, Z
    285a:	2d 7f       	andi	r18, 0xFD	; 253
    285c:	fc 01       	movw	r30, r24
    285e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    2860:	88 e2       	ldi	r24, 0x28	; 40
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	28 e2       	ldi	r18, 0x28	; 40
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	f9 01       	movw	r30, r18
    286a:	20 81       	ld	r18, Z
    286c:	24 60       	ori	r18, 0x04	; 4
    286e:	fc 01       	movw	r30, r24
    2870:	20 83       	st	Z, r18
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 ea       	ldi	r26, 0xA0	; 160
    2878:	b0 e4       	ldi	r27, 0x40	; 64
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	9b 83       	std	Y+3, r25	; 0x03
    287e:	ac 83       	std	Y+4, r26	; 0x04
    2880:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2882:	6a 81       	ldd	r22, Y+2	; 0x02
    2884:	7b 81       	ldd	r23, Y+3	; 0x03
    2886:	8c 81       	ldd	r24, Y+4	; 0x04
    2888:	9d 81       	ldd	r25, Y+5	; 0x05
    288a:	26 e6       	ldi	r18, 0x66	; 102
    288c:	36 e6       	ldi	r19, 0x66	; 102
    288e:	46 e6       	ldi	r20, 0x66	; 102
    2890:	55 e4       	ldi	r21, 0x45	; 69
    2892:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	8e 83       	std	Y+6, r24	; 0x06
    289c:	9f 83       	std	Y+7, r25	; 0x07
    289e:	a8 87       	std	Y+8, r26	; 0x08
    28a0:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    28a2:	11 e0       	ldi	r17, 0x01	; 1
    28a4:	6e 81       	ldd	r22, Y+6	; 0x06
    28a6:	7f 81       	ldd	r23, Y+7	; 0x07
    28a8:	88 85       	ldd	r24, Y+8	; 0x08
    28aa:	99 85       	ldd	r25, Y+9	; 0x09
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	0c f0       	brlt	.+2      	; 0x28be <lcd_wr_command+0xcc>
    28bc:	10 e0       	ldi	r17, 0x00	; 0
    28be:	11 23       	and	r17, r17
    28c0:	29 f0       	breq	.+10     	; 0x28cc <lcd_wr_command+0xda>
		__ticks = 1;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9b 87       	std	Y+11, r25	; 0x0b
    28c8:	8a 87       	std	Y+10, r24	; 0x0a
    28ca:	46 c0       	rjmp	.+140    	; 0x2958 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
    28cc:	11 e0       	ldi	r17, 0x01	; 1
    28ce:	6e 81       	ldd	r22, Y+6	; 0x06
    28d0:	7f 81       	ldd	r23, Y+7	; 0x07
    28d2:	88 85       	ldd	r24, Y+8	; 0x08
    28d4:	99 85       	ldd	r25, Y+9	; 0x09
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	0c f0       	brlt	.+2      	; 0x28e8 <lcd_wr_command+0xf6>
    28e6:	10 e0       	ldi	r17, 0x00	; 0
    28e8:	11 23       	and	r17, r17
    28ea:	61 f1       	breq	.+88     	; 0x2944 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	6a 81       	ldd	r22, Y+2	; 0x02
    28ee:	7b 81       	ldd	r23, Y+3	; 0x03
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	9d 81       	ldd	r25, Y+5	; 0x05
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9b 87       	std	Y+11, r25	; 0x0b
    2912:	8a 87       	std	Y+10, r24	; 0x0a
    2914:	12 c0       	rjmp	.+36     	; 0x293a <lcd_wr_command+0x148>
    2916:	80 e7       	ldi	r24, 0x70	; 112
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	9d 87       	std	Y+13, r25	; 0x0d
    291c:	8c 87       	std	Y+12, r24	; 0x0c
    291e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2920:	9d 85       	ldd	r25, Y+13	; 0x0d
    2922:	8c 01       	movw	r16, r24
    2924:	c8 01       	movw	r24, r16
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <lcd_wr_command+0x134>
    292a:	8c 01       	movw	r16, r24
    292c:	1d 87       	std	Y+13, r17	; 0x0d
    292e:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	8a 85       	ldd	r24, Y+10	; 0x0a
    2932:	9b 85       	ldd	r25, Y+11	; 0x0b
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	9b 87       	std	Y+11, r25	; 0x0b
    2938:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	8a 85       	ldd	r24, Y+10	; 0x0a
    293c:	9b 85       	ldd	r25, Y+11	; 0x0b
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	51 f7       	brne	.-44     	; 0x2916 <lcd_wr_command+0x124>
    2942:	17 c0       	rjmp	.+46     	; 0x2972 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	6e 81       	ldd	r22, Y+6	; 0x06
    2946:	7f 81       	ldd	r23, Y+7	; 0x07
    2948:	88 85       	ldd	r24, Y+8	; 0x08
    294a:	99 85       	ldd	r25, Y+9	; 0x09
    294c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9b 87       	std	Y+11, r25	; 0x0b
    2956:	8a 87       	std	Y+10, r24	; 0x0a
    2958:	8a 85       	ldd	r24, Y+10	; 0x0a
    295a:	9b 85       	ldd	r25, Y+11	; 0x0b
    295c:	9f 87       	std	Y+15, r25	; 0x0f
    295e:	8e 87       	std	Y+14, r24	; 0x0e
    2960:	8e 85       	ldd	r24, Y+14	; 0x0e
    2962:	9f 85       	ldd	r25, Y+15	; 0x0f
    2964:	8c 01       	movw	r16, r24
    2966:	f8 01       	movw	r30, r16
    2968:	31 97       	sbiw	r30, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <lcd_wr_command+0x176>
    296c:	8f 01       	movw	r16, r30
    296e:	1f 87       	std	Y+15, r17	; 0x0f
    2970:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    2972:	88 e2       	ldi	r24, 0x28	; 40
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	28 e2       	ldi	r18, 0x28	; 40
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	f9 01       	movw	r30, r18
    297c:	20 81       	ld	r18, Z
    297e:	2b 7f       	andi	r18, 0xFB	; 251
    2980:	fc 01       	movw	r30, r24
    2982:	20 83       	st	Z, r18

	cmd = cmd & 0x0F;
    2984:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2986:	8f 70       	andi	r24, 0x0F	; 15
    2988:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    298a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    298c:	82 95       	swap	r24
    298e:	80 7f       	andi	r24, 0xF0	; 240
    2990:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    2992:	88 e2       	ldi	r24, 0x28	; 40
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	28 e2       	ldi	r18, 0x28	; 40
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	f9 01       	movw	r30, r18
    299c:	20 81       	ld	r18, Z
    299e:	2f 70       	andi	r18, 0x0F	; 15
    29a0:	fc 01       	movw	r30, r24
    29a2:	20 83       	st	Z, r18
	lcd_port |= cmd;
    29a4:	88 e2       	ldi	r24, 0x28	; 40
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	28 e2       	ldi	r18, 0x28	; 40
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	f9 01       	movw	r30, r18
    29ae:	30 81       	ld	r19, Z
    29b0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    29b2:	23 2b       	or	r18, r19
    29b4:	fc 01       	movw	r30, r24
    29b6:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    29b8:	88 e2       	ldi	r24, 0x28	; 40
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	28 e2       	ldi	r18, 0x28	; 40
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	f9 01       	movw	r30, r18
    29c2:	20 81       	ld	r18, Z
    29c4:	2e 7f       	andi	r18, 0xFE	; 254
    29c6:	fc 01       	movw	r30, r24
    29c8:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    29ca:	88 e2       	ldi	r24, 0x28	; 40
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	28 e2       	ldi	r18, 0x28	; 40
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	f9 01       	movw	r30, r18
    29d4:	20 81       	ld	r18, Z
    29d6:	2d 7f       	andi	r18, 0xFD	; 253
    29d8:	fc 01       	movw	r30, r24
    29da:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    29dc:	88 e2       	ldi	r24, 0x28	; 40
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	28 e2       	ldi	r18, 0x28	; 40
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	f9 01       	movw	r30, r18
    29e6:	20 81       	ld	r18, Z
    29e8:	24 60       	ori	r18, 0x04	; 4
    29ea:	fc 01       	movw	r30, r24
    29ec:	20 83       	st	Z, r18
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 ea       	ldi	r26, 0xA0	; 160
    29f4:	b0 e4       	ldi	r27, 0x40	; 64
    29f6:	88 8b       	std	Y+16, r24	; 0x10
    29f8:	99 8b       	std	Y+17, r25	; 0x11
    29fa:	aa 8b       	std	Y+18, r26	; 0x12
    29fc:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	68 89       	ldd	r22, Y+16	; 0x10
    2a00:	79 89       	ldd	r23, Y+17	; 0x11
    2a02:	8a 89       	ldd	r24, Y+18	; 0x12
    2a04:	9b 89       	ldd	r25, Y+19	; 0x13
    2a06:	26 e6       	ldi	r18, 0x66	; 102
    2a08:	36 e6       	ldi	r19, 0x66	; 102
    2a0a:	46 e6       	ldi	r20, 0x66	; 102
    2a0c:	55 e4       	ldi	r21, 0x45	; 69
    2a0e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8c 8b       	std	Y+20, r24	; 0x14
    2a18:	9d 8b       	std	Y+21, r25	; 0x15
    2a1a:	ae 8b       	std	Y+22, r26	; 0x16
    2a1c:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2a1e:	11 e0       	ldi	r17, 0x01	; 1
    2a20:	6c 89       	ldd	r22, Y+20	; 0x14
    2a22:	7d 89       	ldd	r23, Y+21	; 0x15
    2a24:	8e 89       	ldd	r24, Y+22	; 0x16
    2a26:	9f 89       	ldd	r25, Y+23	; 0x17
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	0c f0       	brlt	.+2      	; 0x2a3a <lcd_wr_command+0x248>
    2a38:	10 e0       	ldi	r17, 0x00	; 0
    2a3a:	11 23       	and	r17, r17
    2a3c:	29 f0       	breq	.+10     	; 0x2a48 <lcd_wr_command+0x256>
		__ticks = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	99 8f       	std	Y+25, r25	; 0x19
    2a44:	88 8f       	std	Y+24, r24	; 0x18
    2a46:	46 c0       	rjmp	.+140    	; 0x2ad4 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    2a48:	11 e0       	ldi	r17, 0x01	; 1
    2a4a:	6c 89       	ldd	r22, Y+20	; 0x14
    2a4c:	7d 89       	ldd	r23, Y+21	; 0x15
    2a4e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a50:	9f 89       	ldd	r25, Y+23	; 0x17
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	3f ef       	ldi	r19, 0xFF	; 255
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	0c f0       	brlt	.+2      	; 0x2a64 <lcd_wr_command+0x272>
    2a62:	10 e0       	ldi	r17, 0x00	; 0
    2a64:	11 23       	and	r17, r17
    2a66:	61 f1       	breq	.+88     	; 0x2ac0 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	68 89       	ldd	r22, Y+16	; 0x10
    2a6a:	79 89       	ldd	r23, Y+17	; 0x11
    2a6c:	8a 89       	ldd	r24, Y+18	; 0x12
    2a6e:	9b 89       	ldd	r25, Y+19	; 0x13
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	99 8f       	std	Y+25, r25	; 0x19
    2a8e:	88 8f       	std	Y+24, r24	; 0x18
    2a90:	12 c0       	rjmp	.+36     	; 0x2ab6 <lcd_wr_command+0x2c4>
    2a92:	80 e7       	ldi	r24, 0x70	; 112
    2a94:	91 e0       	ldi	r25, 0x01	; 1
    2a96:	9b 8f       	std	Y+27, r25	; 0x1b
    2a98:	8a 8f       	std	Y+26, r24	; 0x1a
    2a9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a9c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a9e:	8c 01       	movw	r16, r24
    2aa0:	c8 01       	movw	r24, r16
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <lcd_wr_command+0x2b0>
    2aa6:	8c 01       	movw	r16, r24
    2aa8:	1b 8f       	std	Y+27, r17	; 0x1b
    2aaa:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aac:	88 8d       	ldd	r24, Y+24	; 0x18
    2aae:	99 8d       	ldd	r25, Y+25	; 0x19
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	99 8f       	std	Y+25, r25	; 0x19
    2ab4:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ab8:	99 8d       	ldd	r25, Y+25	; 0x19
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	51 f7       	brne	.-44     	; 0x2a92 <lcd_wr_command+0x2a0>
    2abe:	17 c0       	rjmp	.+46     	; 0x2aee <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	6c 89       	ldd	r22, Y+20	; 0x14
    2ac2:	7d 89       	ldd	r23, Y+21	; 0x15
    2ac4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ac6:	9f 89       	ldd	r25, Y+23	; 0x17
    2ac8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	99 8f       	std	Y+25, r25	; 0x19
    2ad2:	88 8f       	std	Y+24, r24	; 0x18
    2ad4:	88 8d       	ldd	r24, Y+24	; 0x18
    2ad6:	99 8d       	ldd	r25, Y+25	; 0x19
    2ad8:	9d 8f       	std	Y+29, r25	; 0x1d
    2ada:	8c 8f       	std	Y+28, r24	; 0x1c
    2adc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ade:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ae0:	8c 01       	movw	r16, r24
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	31 97       	sbiw	r30, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <lcd_wr_command+0x2f2>
    2ae8:	8f 01       	movw	r16, r30
    2aea:	1d 8f       	std	Y+29, r17	; 0x1d
    2aec:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    2aee:	88 e2       	ldi	r24, 0x28	; 40
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	28 e2       	ldi	r18, 0x28	; 40
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	f9 01       	movw	r30, r18
    2af8:	20 81       	ld	r18, Z
    2afa:	2b 7f       	andi	r18, 0xFB	; 251
    2afc:	fc 01       	movw	r30, r24
    2afe:	20 83       	st	Z, r18
}
    2b00:	6e 96       	adiw	r28, 0x1e	; 30
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	1f 91       	pop	r17
    2b12:	0f 91       	pop	r16
    2b14:	08 95       	ret

00002b16 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	6e 97       	sbiw	r28, 0x1e	; 30
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    2b30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b32:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	80 7f       	andi	r24, 0xF0	; 240
    2b38:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    2b3a:	88 e2       	ldi	r24, 0x28	; 40
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	28 e2       	ldi	r18, 0x28	; 40
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	f9 01       	movw	r30, r18
    2b44:	20 81       	ld	r18, Z
    2b46:	2f 70       	andi	r18, 0x0F	; 15
    2b48:	fc 01       	movw	r30, r24
    2b4a:	20 83       	st	Z, r18
	lcd_port |= temp;
    2b4c:	88 e2       	ldi	r24, 0x28	; 40
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	28 e2       	ldi	r18, 0x28	; 40
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	f9 01       	movw	r30, r18
    2b56:	30 81       	ld	r19, Z
    2b58:	29 81       	ldd	r18, Y+1	; 0x01
    2b5a:	23 2b       	or	r18, r19
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    2b60:	88 e2       	ldi	r24, 0x28	; 40
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	28 e2       	ldi	r18, 0x28	; 40
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	f9 01       	movw	r30, r18
    2b6a:	20 81       	ld	r18, Z
    2b6c:	21 60       	ori	r18, 0x01	; 1
    2b6e:	fc 01       	movw	r30, r24
    2b70:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    2b72:	88 e2       	ldi	r24, 0x28	; 40
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	28 e2       	ldi	r18, 0x28	; 40
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	f9 01       	movw	r30, r18
    2b7c:	20 81       	ld	r18, Z
    2b7e:	2d 7f       	andi	r18, 0xFD	; 253
    2b80:	fc 01       	movw	r30, r24
    2b82:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    2b84:	88 e2       	ldi	r24, 0x28	; 40
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	28 e2       	ldi	r18, 0x28	; 40
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	f9 01       	movw	r30, r18
    2b8e:	20 81       	ld	r18, Z
    2b90:	24 60       	ori	r18, 0x04	; 4
    2b92:	fc 01       	movw	r30, r24
    2b94:	20 83       	st	Z, r18
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	a0 ea       	ldi	r26, 0xA0	; 160
    2b9c:	b0 e4       	ldi	r27, 0x40	; 64
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
    2ba0:	9b 83       	std	Y+3, r25	; 0x03
    2ba2:	ac 83       	std	Y+4, r26	; 0x04
    2ba4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ba6:	6a 81       	ldd	r22, Y+2	; 0x02
    2ba8:	7b 81       	ldd	r23, Y+3	; 0x03
    2baa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bac:	9d 81       	ldd	r25, Y+5	; 0x05
    2bae:	26 e6       	ldi	r18, 0x66	; 102
    2bb0:	36 e6       	ldi	r19, 0x66	; 102
    2bb2:	46 e6       	ldi	r20, 0x66	; 102
    2bb4:	55 e4       	ldi	r21, 0x45	; 69
    2bb6:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	8e 83       	std	Y+6, r24	; 0x06
    2bc0:	9f 83       	std	Y+7, r25	; 0x07
    2bc2:	a8 87       	std	Y+8, r26	; 0x08
    2bc4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    2bc6:	11 e0       	ldi	r17, 0x01	; 1
    2bc8:	6e 81       	ldd	r22, Y+6	; 0x06
    2bca:	7f 81       	ldd	r23, Y+7	; 0x07
    2bcc:	88 85       	ldd	r24, Y+8	; 0x08
    2bce:	99 85       	ldd	r25, Y+9	; 0x09
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	0c f0       	brlt	.+2      	; 0x2be2 <lcd_wr_char+0xcc>
    2be0:	10 e0       	ldi	r17, 0x00	; 0
    2be2:	11 23       	and	r17, r17
    2be4:	29 f0       	breq	.+10     	; 0x2bf0 <lcd_wr_char+0xda>
		__ticks = 1;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9b 87       	std	Y+11, r25	; 0x0b
    2bec:	8a 87       	std	Y+10, r24	; 0x0a
    2bee:	46 c0       	rjmp	.+140    	; 0x2c7c <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    2bf0:	11 e0       	ldi	r17, 0x01	; 1
    2bf2:	6e 81       	ldd	r22, Y+6	; 0x06
    2bf4:	7f 81       	ldd	r23, Y+7	; 0x07
    2bf6:	88 85       	ldd	r24, Y+8	; 0x08
    2bf8:	99 85       	ldd	r25, Y+9	; 0x09
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	57 e4       	ldi	r21, 0x47	; 71
    2c02:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	0c f0       	brlt	.+2      	; 0x2c0c <lcd_wr_char+0xf6>
    2c0a:	10 e0       	ldi	r17, 0x00	; 0
    2c0c:	11 23       	and	r17, r17
    2c0e:	61 f1       	breq	.+88     	; 0x2c68 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c10:	6a 81       	ldd	r22, Y+2	; 0x02
    2c12:	7b 81       	ldd	r23, Y+3	; 0x03
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	9d 81       	ldd	r25, Y+5	; 0x05
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e2       	ldi	r20, 0x20	; 32
    2c1e:	51 e4       	ldi	r21, 0x41	; 65
    2c20:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	bc 01       	movw	r22, r24
    2c2a:	cd 01       	movw	r24, r26
    2c2c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9b 87       	std	Y+11, r25	; 0x0b
    2c36:	8a 87       	std	Y+10, r24	; 0x0a
    2c38:	12 c0       	rjmp	.+36     	; 0x2c5e <lcd_wr_char+0x148>
    2c3a:	80 e7       	ldi	r24, 0x70	; 112
    2c3c:	91 e0       	ldi	r25, 0x01	; 1
    2c3e:	9d 87       	std	Y+13, r25	; 0x0d
    2c40:	8c 87       	std	Y+12, r24	; 0x0c
    2c42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c44:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c46:	8c 01       	movw	r16, r24
    2c48:	c8 01       	movw	r24, r16
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <lcd_wr_char+0x134>
    2c4e:	8c 01       	movw	r16, r24
    2c50:	1d 87       	std	Y+13, r17	; 0x0d
    2c52:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c56:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9b 87       	std	Y+11, r25	; 0x0b
    2c5c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	51 f7       	brne	.-44     	; 0x2c3a <lcd_wr_char+0x124>
    2c66:	17 c0       	rjmp	.+46     	; 0x2c96 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6e 81       	ldd	r22, Y+6	; 0x06
    2c6a:	7f 81       	ldd	r23, Y+7	; 0x07
    2c6c:	88 85       	ldd	r24, Y+8	; 0x08
    2c6e:	99 85       	ldd	r25, Y+9	; 0x09
    2c70:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9b 87       	std	Y+11, r25	; 0x0b
    2c7a:	8a 87       	std	Y+10, r24	; 0x0a
    2c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c80:	9f 87       	std	Y+15, r25	; 0x0f
    2c82:	8e 87       	std	Y+14, r24	; 0x0e
    2c84:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c86:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c88:	8c 01       	movw	r16, r24
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	31 97       	sbiw	r30, 0x01	; 1
    2c8e:	f1 f7       	brne	.-4      	; 0x2c8c <lcd_wr_char+0x176>
    2c90:	8f 01       	movw	r16, r30
    2c92:	1f 87       	std	Y+15, r17	; 0x0f
    2c94:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    2c96:	88 e2       	ldi	r24, 0x28	; 40
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	28 e2       	ldi	r18, 0x28	; 40
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	20 81       	ld	r18, Z
    2ca2:	2b 7f       	andi	r18, 0xFB	; 251
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    2ca8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2caa:	8f 70       	andi	r24, 0x0F	; 15
    2cac:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    2cae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cb0:	82 95       	swap	r24
    2cb2:	80 7f       	andi	r24, 0xF0	; 240
    2cb4:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    2cb6:	88 e2       	ldi	r24, 0x28	; 40
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	28 e2       	ldi	r18, 0x28	; 40
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	f9 01       	movw	r30, r18
    2cc0:	20 81       	ld	r18, Z
    2cc2:	2f 70       	andi	r18, 0x0F	; 15
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	20 83       	st	Z, r18
	lcd_port |= letter;
    2cc8:	88 e2       	ldi	r24, 0x28	; 40
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	28 e2       	ldi	r18, 0x28	; 40
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	f9 01       	movw	r30, r18
    2cd2:	30 81       	ld	r19, Z
    2cd4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2cd6:	23 2b       	or	r18, r19
    2cd8:	fc 01       	movw	r30, r24
    2cda:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    2cdc:	88 e2       	ldi	r24, 0x28	; 40
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	28 e2       	ldi	r18, 0x28	; 40
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	f9 01       	movw	r30, r18
    2ce6:	20 81       	ld	r18, Z
    2ce8:	21 60       	ori	r18, 0x01	; 1
    2cea:	fc 01       	movw	r30, r24
    2cec:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    2cee:	88 e2       	ldi	r24, 0x28	; 40
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	28 e2       	ldi	r18, 0x28	; 40
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	f9 01       	movw	r30, r18
    2cf8:	20 81       	ld	r18, Z
    2cfa:	2d 7f       	andi	r18, 0xFD	; 253
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    2d00:	88 e2       	ldi	r24, 0x28	; 40
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	28 e2       	ldi	r18, 0x28	; 40
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	f9 01       	movw	r30, r18
    2d0a:	20 81       	ld	r18, Z
    2d0c:	24 60       	ori	r18, 0x04	; 4
    2d0e:	fc 01       	movw	r30, r24
    2d10:	20 83       	st	Z, r18
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 ea       	ldi	r26, 0xA0	; 160
    2d18:	b0 e4       	ldi	r27, 0x40	; 64
    2d1a:	88 8b       	std	Y+16, r24	; 0x10
    2d1c:	99 8b       	std	Y+17, r25	; 0x11
    2d1e:	aa 8b       	std	Y+18, r26	; 0x12
    2d20:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d22:	68 89       	ldd	r22, Y+16	; 0x10
    2d24:	79 89       	ldd	r23, Y+17	; 0x11
    2d26:	8a 89       	ldd	r24, Y+18	; 0x12
    2d28:	9b 89       	ldd	r25, Y+19	; 0x13
    2d2a:	26 e6       	ldi	r18, 0x66	; 102
    2d2c:	36 e6       	ldi	r19, 0x66	; 102
    2d2e:	46 e6       	ldi	r20, 0x66	; 102
    2d30:	55 e4       	ldi	r21, 0x45	; 69
    2d32:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	8c 8b       	std	Y+20, r24	; 0x14
    2d3c:	9d 8b       	std	Y+21, r25	; 0x15
    2d3e:	ae 8b       	std	Y+22, r26	; 0x16
    2d40:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2d42:	11 e0       	ldi	r17, 0x01	; 1
    2d44:	6c 89       	ldd	r22, Y+20	; 0x14
    2d46:	7d 89       	ldd	r23, Y+21	; 0x15
    2d48:	8e 89       	ldd	r24, Y+22	; 0x16
    2d4a:	9f 89       	ldd	r25, Y+23	; 0x17
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e8       	ldi	r20, 0x80	; 128
    2d52:	5f e3       	ldi	r21, 0x3F	; 63
    2d54:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	0c f0       	brlt	.+2      	; 0x2d5e <lcd_wr_char+0x248>
    2d5c:	10 e0       	ldi	r17, 0x00	; 0
    2d5e:	11 23       	and	r17, r17
    2d60:	29 f0       	breq	.+10     	; 0x2d6c <lcd_wr_char+0x256>
		__ticks = 1;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	99 8f       	std	Y+25, r25	; 0x19
    2d68:	88 8f       	std	Y+24, r24	; 0x18
    2d6a:	46 c0       	rjmp	.+140    	; 0x2df8 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    2d6c:	11 e0       	ldi	r17, 0x01	; 1
    2d6e:	6c 89       	ldd	r22, Y+20	; 0x14
    2d70:	7d 89       	ldd	r23, Y+21	; 0x15
    2d72:	8e 89       	ldd	r24, Y+22	; 0x16
    2d74:	9f 89       	ldd	r25, Y+23	; 0x17
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	4f e7       	ldi	r20, 0x7F	; 127
    2d7c:	57 e4       	ldi	r21, 0x47	; 71
    2d7e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    2d82:	18 16       	cp	r1, r24
    2d84:	0c f0       	brlt	.+2      	; 0x2d88 <lcd_wr_char+0x272>
    2d86:	10 e0       	ldi	r17, 0x00	; 0
    2d88:	11 23       	and	r17, r17
    2d8a:	61 f1       	breq	.+88     	; 0x2de4 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	68 89       	ldd	r22, Y+16	; 0x10
    2d8e:	79 89       	ldd	r23, Y+17	; 0x11
    2d90:	8a 89       	ldd	r24, Y+18	; 0x12
    2d92:	9b 89       	ldd	r25, Y+19	; 0x13
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e2       	ldi	r20, 0x20	; 32
    2d9a:	51 e4       	ldi	r21, 0x41	; 65
    2d9c:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	99 8f       	std	Y+25, r25	; 0x19
    2db2:	88 8f       	std	Y+24, r24	; 0x18
    2db4:	12 c0       	rjmp	.+36     	; 0x2dda <lcd_wr_char+0x2c4>
    2db6:	80 e7       	ldi	r24, 0x70	; 112
    2db8:	91 e0       	ldi	r25, 0x01	; 1
    2dba:	9b 8f       	std	Y+27, r25	; 0x1b
    2dbc:	8a 8f       	std	Y+26, r24	; 0x1a
    2dbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dc0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dc2:	8c 01       	movw	r16, r24
    2dc4:	c8 01       	movw	r24, r16
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <lcd_wr_char+0x2b0>
    2dca:	8c 01       	movw	r16, r24
    2dcc:	1b 8f       	std	Y+27, r17	; 0x1b
    2dce:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	88 8d       	ldd	r24, Y+24	; 0x18
    2dd2:	99 8d       	ldd	r25, Y+25	; 0x19
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	99 8f       	std	Y+25, r25	; 0x19
    2dd8:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	88 8d       	ldd	r24, Y+24	; 0x18
    2ddc:	99 8d       	ldd	r25, Y+25	; 0x19
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	51 f7       	brne	.-44     	; 0x2db6 <lcd_wr_char+0x2a0>
    2de2:	17 c0       	rjmp	.+46     	; 0x2e12 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6c 89       	ldd	r22, Y+20	; 0x14
    2de6:	7d 89       	ldd	r23, Y+21	; 0x15
    2de8:	8e 89       	ldd	r24, Y+22	; 0x16
    2dea:	9f 89       	ldd	r25, Y+23	; 0x17
    2dec:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	99 8f       	std	Y+25, r25	; 0x19
    2df6:	88 8f       	std	Y+24, r24	; 0x18
    2df8:	88 8d       	ldd	r24, Y+24	; 0x18
    2dfa:	99 8d       	ldd	r25, Y+25	; 0x19
    2dfc:	9d 8f       	std	Y+29, r25	; 0x1d
    2dfe:	8c 8f       	std	Y+28, r24	; 0x1c
    2e00:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e02:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e04:	8c 01       	movw	r16, r24
    2e06:	f8 01       	movw	r30, r16
    2e08:	31 97       	sbiw	r30, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <lcd_wr_char+0x2f2>
    2e0c:	8f 01       	movw	r16, r30
    2e0e:	1d 8f       	std	Y+29, r17	; 0x1d
    2e10:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    2e12:	88 e2       	ldi	r24, 0x28	; 40
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	28 e2       	ldi	r18, 0x28	; 40
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	20 81       	ld	r18, Z
    2e1e:	2b 7f       	andi	r18, 0xFB	; 251
    2e20:	fc 01       	movw	r30, r24
    2e22:	20 83       	st	Z, r18
}
    2e24:	6e 96       	adiw	r28, 0x1e	; 30
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	08 95       	ret

00002e3a <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    2e42:	80 e8       	ldi	r24, 0x80	; 128
    2e44:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
}
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	08 95       	ret

00002e4e <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	0f 92       	push	r0
    2e54:	0f 92       	push	r0
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    2e5e:	0b c0       	rjmp	.+22     	; 0x2e76 <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	fc 01       	movw	r30, r24
    2e66:	80 81       	ld	r24, Z
    2e68:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <lcd_wr_char>
		str++;
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	80 81       	ld	r24, Z
    2e7e:	88 23       	and	r24, r24
    2e80:	79 f7       	brne	.-34     	; 0x2e60 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	08 95       	ret

00002e8c <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	0f 92       	push	r0
    2e92:	0f 92       	push	r0
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	82 30       	cpi	r24, 0x02	; 2
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	99 f0       	breq	.+38     	; 0x2ece <lcd_cursor+0x42>
    2ea8:	83 30       	cpi	r24, 0x03	; 3
    2eaa:	91 05       	cpc	r25, r1
    2eac:	24 f4       	brge	.+8      	; 0x2eb6 <lcd_cursor+0x2a>
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	91 05       	cpc	r25, r1
    2eb2:	41 f0       	breq	.+16     	; 0x2ec4 <lcd_cursor+0x38>
    2eb4:	1b c0       	rjmp	.+54     	; 0x2eec <lcd_cursor+0x60>
    2eb6:	83 30       	cpi	r24, 0x03	; 3
    2eb8:	91 05       	cpc	r25, r1
    2eba:	71 f0       	breq	.+28     	; 0x2ed8 <lcd_cursor+0x4c>
    2ebc:	84 30       	cpi	r24, 0x04	; 4
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	81 f0       	breq	.+32     	; 0x2ee2 <lcd_cursor+0x56>
    2ec2:	14 c0       	rjmp	.+40     	; 0x2eec <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    2ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec6:	81 58       	subi	r24, 0x81	; 129
    2ec8:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
    2ecc:	10 c0       	rjmp	.+32     	; 0x2eee <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	81 54       	subi	r24, 0x41	; 65
    2ed2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
    2ed6:	0b c0       	rjmp	.+22     	; 0x2eee <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    2ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eda:	8d 56       	subi	r24, 0x6D	; 109
    2edc:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
    2ee0:	06 c0       	rjmp	.+12     	; 0x2eee <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	8d 52       	subi	r24, 0x2D	; 45
    2ee6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <lcd_wr_command>
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <lcd_cursor+0x62>
		default: break;
    2eec:	00 00       	nop
	}
}
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	08 95       	ret

00002ef8 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	27 97       	sbiw	r28, 0x07	; 7
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
    2f0e:	6b 83       	std	Y+3, r22	; 0x03
    2f10:	5d 83       	std	Y+5, r21	; 0x05
    2f12:	4c 83       	std	Y+4, r20	; 0x04
    2f14:	3f 83       	std	Y+7, r19	; 0x07
    2f16:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    2f18:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	88 23       	and	r24, r24
    2f1e:	19 f0       	breq	.+6      	; 0x2f26 <lcd_print+0x2e>
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	88 23       	and	r24, r24
    2f24:	19 f4       	brne	.+6      	; 0x2f2c <lcd_print+0x34>
	{
		lcd_home();
    2f26:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <lcd_home>
    2f2a:	04 c0       	rjmp	.+8      	; 0x2f34 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	6b 81       	ldd	r22, Y+3	; 0x03
    2f30:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <lcd_cursor>
	}
	if(digits==5 || flag==1)
    2f34:	8e 81       	ldd	r24, Y+6	; 0x06
    2f36:	9f 81       	ldd	r25, Y+7	; 0x07
    2f38:	85 30       	cpi	r24, 0x05	; 5
    2f3a:	91 05       	cpc	r25, r1
    2f3c:	19 f0       	breq	.+6      	; 0x2f44 <lcd_print+0x4c>
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	81 30       	cpi	r24, 0x01	; 1
    2f42:	b1 f4       	brne	.+44     	; 0x2f70 <lcd_print+0x78>
	{
		million=value/10000+48;
    2f44:	8c 81       	ldd	r24, Y+4	; 0x04
    2f46:	9d 81       	ldd	r25, Y+5	; 0x05
    2f48:	20 e1       	ldi	r18, 0x10	; 16
    2f4a:	37 e2       	ldi	r19, 0x27	; 39
    2f4c:	b9 01       	movw	r22, r18
    2f4e:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    2f52:	9b 01       	movw	r18, r22
    2f54:	c9 01       	movw	r24, r18
    2f56:	c0 96       	adiw	r24, 0x30	; 48
    2f58:	90 93 55 03 	sts	0x0355, r25
    2f5c:	80 93 54 03 	sts	0x0354, r24
		lcd_wr_char(million);
    2f60:	80 91 54 03 	lds	r24, 0x0354
    2f64:	90 91 55 03 	lds	r25, 0x0355
    2f68:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <lcd_wr_char>
		flag=1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    2f70:	8e 81       	ldd	r24, Y+6	; 0x06
    2f72:	9f 81       	ldd	r25, Y+7	; 0x07
    2f74:	84 30       	cpi	r24, 0x04	; 4
    2f76:	91 05       	cpc	r25, r1
    2f78:	19 f0       	breq	.+6      	; 0x2f80 <lcd_print+0x88>
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	19 f5       	brne	.+70     	; 0x2fc6 <lcd_print+0xce>
	{
		temp = value/1000;
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	9d 81       	ldd	r25, Y+5	; 0x05
    2f84:	28 ee       	ldi	r18, 0xE8	; 232
    2f86:	33 e0       	ldi	r19, 0x03	; 3
    2f88:	b9 01       	movw	r22, r18
    2f8a:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    2f8e:	9b 01       	movw	r18, r22
    2f90:	c9 01       	movw	r24, r18
    2f92:	90 93 59 03 	sts	0x0359, r25
    2f96:	80 93 58 03 	sts	0x0358, r24
		thousand = temp%10 + 48;
    2f9a:	80 91 58 03 	lds	r24, 0x0358
    2f9e:	90 91 59 03 	lds	r25, 0x0359
    2fa2:	2a e0       	ldi	r18, 0x0A	; 10
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	b9 01       	movw	r22, r18
    2fa8:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    2fac:	c0 96       	adiw	r24, 0x30	; 48
    2fae:	90 93 c7 03 	sts	0x03C7, r25
    2fb2:	80 93 c6 03 	sts	0x03C6, r24
		lcd_wr_char(thousand);
    2fb6:	80 91 c6 03 	lds	r24, 0x03C6
    2fba:	90 91 c7 03 	lds	r25, 0x03C7
    2fbe:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <lcd_wr_char>
		flag=1;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    2fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fca:	83 30       	cpi	r24, 0x03	; 3
    2fcc:	91 05       	cpc	r25, r1
    2fce:	19 f0       	breq	.+6      	; 0x2fd6 <lcd_print+0xde>
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	81 30       	cpi	r24, 0x01	; 1
    2fd4:	19 f5       	brne	.+70     	; 0x301c <lcd_print+0x124>
	{
		temp = value/100;
    2fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fda:	24 e6       	ldi	r18, 0x64	; 100
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	b9 01       	movw	r22, r18
    2fe0:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    2fe4:	9b 01       	movw	r18, r22
    2fe6:	c9 01       	movw	r24, r18
    2fe8:	90 93 59 03 	sts	0x0359, r25
    2fec:	80 93 58 03 	sts	0x0358, r24
		hundred = temp%10 + 48;
    2ff0:	80 91 58 03 	lds	r24, 0x0358
    2ff4:	90 91 59 03 	lds	r25, 0x0359
    2ff8:	2a e0       	ldi	r18, 0x0A	; 10
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    3002:	c0 96       	adiw	r24, 0x30	; 48
    3004:	90 93 c3 03 	sts	0x03C3, r25
    3008:	80 93 c2 03 	sts	0x03C2, r24
		lcd_wr_char(hundred);
    300c:	80 91 c2 03 	lds	r24, 0x03C2
    3010:	90 91 c3 03 	lds	r25, 0x03C3
    3014:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <lcd_wr_char>
		flag=1;
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    301c:	8e 81       	ldd	r24, Y+6	; 0x06
    301e:	9f 81       	ldd	r25, Y+7	; 0x07
    3020:	82 30       	cpi	r24, 0x02	; 2
    3022:	91 05       	cpc	r25, r1
    3024:	19 f0       	breq	.+6      	; 0x302c <lcd_print+0x134>
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	19 f5       	brne	.+70     	; 0x3072 <lcd_print+0x17a>
	{
		temp = value/10;
    302c:	8c 81       	ldd	r24, Y+4	; 0x04
    302e:	9d 81       	ldd	r25, Y+5	; 0x05
    3030:	2a e0       	ldi	r18, 0x0A	; 10
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	b9 01       	movw	r22, r18
    3036:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    303a:	9b 01       	movw	r18, r22
    303c:	c9 01       	movw	r24, r18
    303e:	90 93 59 03 	sts	0x0359, r25
    3042:	80 93 58 03 	sts	0x0358, r24
		tens = temp%10 + 48;
    3046:	80 91 58 03 	lds	r24, 0x0358
    304a:	90 91 59 03 	lds	r25, 0x0359
    304e:	2a e0       	ldi	r18, 0x0A	; 10
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	b9 01       	movw	r22, r18
    3054:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    3058:	c0 96       	adiw	r24, 0x30	; 48
    305a:	90 93 5c 03 	sts	0x035C, r25
    305e:	80 93 5b 03 	sts	0x035B, r24
		lcd_wr_char(tens);
    3062:	80 91 5b 03 	lds	r24, 0x035B
    3066:	90 91 5c 03 	lds	r25, 0x035C
    306a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <lcd_wr_char>
		flag=1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    3072:	8e 81       	ldd	r24, Y+6	; 0x06
    3074:	9f 81       	ldd	r25, Y+7	; 0x07
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	19 f0       	breq	.+6      	; 0x3082 <lcd_print+0x18a>
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	81 30       	cpi	r24, 0x01	; 1
    3080:	91 f4       	brne	.+36     	; 0x30a6 <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    3082:	8c 81       	ldd	r24, Y+4	; 0x04
    3084:	9d 81       	ldd	r25, Y+5	; 0x05
    3086:	2a e0       	ldi	r18, 0x0A	; 10
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	b9 01       	movw	r22, r18
    308c:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodhi4>
    3090:	c0 96       	adiw	r24, 0x30	; 48
    3092:	90 93 c5 03 	sts	0x03C5, r25
    3096:	80 93 c4 03 	sts	0x03C4, r24
		lcd_wr_char(unit);
    309a:	80 91 c4 03 	lds	r24, 0x03C4
    309e:	90 91 c5 03 	lds	r25, 0x03C5
    30a2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <lcd_wr_char>
	}
	if(digits>5)
    30a6:	8e 81       	ldd	r24, Y+6	; 0x06
    30a8:	9f 81       	ldd	r25, Y+7	; 0x07
    30aa:	86 30       	cpi	r24, 0x06	; 6
    30ac:	91 05       	cpc	r25, r1
    30ae:	1c f0       	brlt	.+6      	; 0x30b6 <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    30b0:	85 e4       	ldi	r24, 0x45	; 69
    30b2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <lcd_wr_char>
	}

}
    30b6:	27 96       	adiw	r28, 0x07	; 7
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	08 95       	ret

000030c8 <disp>:

void disp(char *str1)
{
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	0f 92       	push	r0
    30ce:	0f 92       	push	r0
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
    init_devices2();
    30d8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <init_devices2>
	lcd_set_4bit();
    30dc:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <lcd_set_4bit>
	lcd_init();
    30e0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <lcd_init>
	lcd_cursor(1,5);
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	65 e0       	ldi	r22, 0x05	; 5
    30e8:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <lcd_cursor>
		lcd_string(str1);
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	9a 81       	ldd	r25, Y+2	; 0x02
    30f0:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_string>
		lcd_cursor(2,1);
    30f4:	82 e0       	ldi	r24, 0x02	; 2
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <lcd_cursor>
		lcd_string("DarkMatterBots");
    30fc:	8d ef       	ldi	r24, 0xFD	; 253
    30fe:	92 e0       	ldi	r25, 0x02	; 2
    3100:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_string>
}
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	08 95       	ret

0000310e <lcd_on>:
void lcd_on()
{
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    init_devices2();
    3116:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <init_devices2>
	lcd_set_4bit();
    311a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <lcd_set_4bit>
	lcd_init();
    311e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <lcd_init>
	lcd_cursor(1,3);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	63 e0       	ldi	r22, 0x03	; 3
    3126:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <lcd_cursor>
		lcd_string("GRAPES v2.0");
    312a:	8c e0       	ldi	r24, 0x0C	; 12
    312c:	93 e0       	ldi	r25, 0x03	; 3
    312e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_string>
		lcd_cursor(2,2);
    3132:	82 e0       	ldi	r24, 0x02	; 2
    3134:	62 e0       	ldi	r22, 0x02	; 2
    3136:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <lcd_cursor>
		lcd_string("DarkMatterBots");
    313a:	8d ef       	ldi	r24, 0xFD	; 253
    313c:	92 e0       	ldi	r25, 0x02	; 2
    313e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_string>
}
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	08 95       	ret

00003148 <left_encoder_pin_config>:
unsigned long int ShaftCountRight = 0; //to keep track of right position encoder
unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    3150:	8d e2       	ldi	r24, 0x2D	; 45
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	2d e2       	ldi	r18, 0x2D	; 45
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	f9 01       	movw	r30, r18
    315a:	20 81       	ld	r18, Z
    315c:	2f 7e       	andi	r18, 0xEF	; 239
    315e:	fc 01       	movw	r30, r24
    3160:	20 83       	st	Z, r18
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    3162:	8e e2       	ldi	r24, 0x2E	; 46
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	2e e2       	ldi	r18, 0x2E	; 46
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	f9 01       	movw	r30, r18
    316c:	20 81       	ld	r18, Z
    316e:	20 61       	ori	r18, 0x10	; 16
    3170:	fc 01       	movw	r30, r24
    3172:	20 83       	st	Z, r18
}
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	08 95       	ret

0000317a <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    3182:	8d e2       	ldi	r24, 0x2D	; 45
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	2d e2       	ldi	r18, 0x2D	; 45
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	f9 01       	movw	r30, r18
    318c:	20 81       	ld	r18, Z
    318e:	2f 7d       	andi	r18, 0xDF	; 223
    3190:	fc 01       	movw	r30, r24
    3192:	20 83       	st	Z, r18
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    3194:	8e e2       	ldi	r24, 0x2E	; 46
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	2e e2       	ldi	r18, 0x2E	; 46
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	f9 01       	movw	r30, r18
    319e:	20 81       	ld	r18, Z
    31a0:	20 62       	ori	r18, 0x20	; 32
    31a2:	fc 01       	movw	r30, r24
    31a4:	20 83       	st	Z, r18
}
    31a6:	df 91       	pop	r29
    31a8:	cf 91       	pop	r28
    31aa:	08 95       	ret

000031ac <port_init1>:

//Function to initialize ports
void port_init1()
{
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config(); //robot motion pins config
    31b4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    31b8:	0e 94 a4 18 	call	0x3148	; 0x3148 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
    31bc:	0e 94 bd 18 	call	0x317a	; 0x317a <right_encoder_pin_config>
}
    31c0:	df 91       	pop	r29
    31c2:	cf 91       	pop	r28
    31c4:	08 95       	ret

000031c6 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    31ce:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    31d0:	8a e6       	ldi	r24, 0x6A	; 106
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	2a e6       	ldi	r18, 0x6A	; 106
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	f9 01       	movw	r30, r18
    31da:	20 81       	ld	r18, Z
    31dc:	22 60       	ori	r18, 0x02	; 2
    31de:	fc 01       	movw	r30, r24
    31e0:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    31e2:	8d e3       	ldi	r24, 0x3D	; 61
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	2d e3       	ldi	r18, 0x3D	; 61
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	f9 01       	movw	r30, r18
    31ec:	20 81       	ld	r18, Z
    31ee:	20 61       	ori	r18, 0x10	; 16
    31f0:	fc 01       	movw	r30, r24
    31f2:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    31f4:	78 94       	sei
}
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	08 95       	ret

000031fc <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    3204:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    3206:	8a e6       	ldi	r24, 0x6A	; 106
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	2a e6       	ldi	r18, 0x6A	; 106
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	f9 01       	movw	r30, r18
    3210:	20 81       	ld	r18, Z
    3212:	28 60       	ori	r18, 0x08	; 8
    3214:	fc 01       	movw	r30, r24
    3216:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    3218:	8d e3       	ldi	r24, 0x3D	; 61
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	2d e3       	ldi	r18, 0x3D	; 61
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	f9 01       	movw	r30, r18
    3222:	20 81       	ld	r18, Z
    3224:	20 62       	ori	r18, 0x20	; 32
    3226:	fc 01       	movw	r30, r24
    3228:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    322a:	78 94       	sei
}
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

00003232 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    3232:	1f 92       	push	r1
    3234:	0f 92       	push	r0
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	0f 92       	push	r0
    323a:	11 24       	eor	r1, r1
    323c:	8f 93       	push	r24
    323e:	9f 93       	push	r25
    3240:	af 93       	push	r26
    3242:	bf 93       	push	r27
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    324c:	80 91 4c 03 	lds	r24, 0x034C
    3250:	90 91 4d 03 	lds	r25, 0x034D
    3254:	a0 91 4e 03 	lds	r26, 0x034E
    3258:	b0 91 4f 03 	lds	r27, 0x034F
    325c:	01 96       	adiw	r24, 0x01	; 1
    325e:	a1 1d       	adc	r26, r1
    3260:	b1 1d       	adc	r27, r1
    3262:	80 93 4c 03 	sts	0x034C, r24
    3266:	90 93 4d 03 	sts	0x034D, r25
    326a:	a0 93 4e 03 	sts	0x034E, r26
    326e:	b0 93 4f 03 	sts	0x034F, r27
}
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	bf 91       	pop	r27
    3278:	af 91       	pop	r26
    327a:	9f 91       	pop	r25
    327c:	8f 91       	pop	r24
    327e:	0f 90       	pop	r0
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	0f 90       	pop	r0
    3284:	1f 90       	pop	r1
    3286:	18 95       	reti

00003288 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    3288:	1f 92       	push	r1
    328a:	0f 92       	push	r0
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	0f 92       	push	r0
    3290:	11 24       	eor	r1, r1
    3292:	8f 93       	push	r24
    3294:	9f 93       	push	r25
    3296:	af 93       	push	r26
    3298:	bf 93       	push	r27
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    32a2:	80 91 48 03 	lds	r24, 0x0348
    32a6:	90 91 49 03 	lds	r25, 0x0349
    32aa:	a0 91 4a 03 	lds	r26, 0x034A
    32ae:	b0 91 4b 03 	lds	r27, 0x034B
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	a1 1d       	adc	r26, r1
    32b6:	b1 1d       	adc	r27, r1
    32b8:	80 93 48 03 	sts	0x0348, r24
    32bc:	90 93 49 03 	sts	0x0349, r25
    32c0:	a0 93 4a 03 	sts	0x034A, r26
    32c4:	b0 93 4b 03 	sts	0x034B, r27
}
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	bf 91       	pop	r27
    32ce:	af 91       	pop	r26
    32d0:	9f 91       	pop	r25
    32d2:	8f 91       	pop	r24
    32d4:	0f 90       	pop	r0
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	0f 90       	pop	r0
    32da:	1f 90       	pop	r1
    32dc:	18 95       	reti

000032de <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	2a 97       	sbiw	r28, 0x0a	; 10
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	de bf       	out	0x3e, r29	; 62
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	9a 87       	std	Y+10, r25	; 0x0a
    32f4:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	dc 01       	movw	r26, r24
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	ab 83       	std	Y+3, r26	; 0x03
    3302:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    3304:	1d 82       	std	Y+5, r1	; 0x05
    3306:	1e 82       	std	Y+6, r1	; 0x06
    3308:	1f 82       	std	Y+7, r1	; 0x07
    330a:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	cc 01       	movw	r24, r24
    3312:	a0 e0       	ldi	r26, 0x00	; 0
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__floatunsisf>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	28 e4       	ldi	r18, 0x48	; 72
    3328:	31 ee       	ldi	r19, 0xE1	; 225
    332a:	42 e8       	ldi	r20, 0x82	; 130
    332c:	50 e4       	ldi	r21, 0x40	; 64
    332e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__divsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	89 83       	std	Y+1, r24	; 0x01
    3338:	9a 83       	std	Y+2, r25	; 0x02
    333a:	ab 83       	std	Y+3, r26	; 0x03
    333c:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    333e:	69 81       	ldd	r22, Y+1	; 0x01
    3340:	7a 81       	ldd	r23, Y+2	; 0x02
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	9c 81       	ldd	r25, Y+4	; 0x04
    3346:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	cc 01       	movw	r24, r24
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	8d 83       	std	Y+5, r24	; 0x05
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	af 83       	std	Y+7, r26	; 0x07
    335a:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    335c:	10 92 4c 03 	sts	0x034C, r1
    3360:	10 92 4d 03 	sts	0x034D, r1
    3364:	10 92 4e 03 	sts	0x034E, r1
    3368:	10 92 4f 03 	sts	0x034F, r1
	ShaftCountLeft = 0;
    336c:	10 92 48 03 	sts	0x0348, r1
    3370:	10 92 49 03 	sts	0x0349, r1
    3374:	10 92 4a 03 	sts	0x034A, r1
    3378:	10 92 4b 03 	sts	0x034B, r1
    337c:	01 c0       	rjmp	.+2      	; 0x3380 <angle_rotate+0xa2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
    337e:	00 00       	nop
	ShaftCountRight = 0;
	ShaftCountLeft = 0;

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    3380:	20 91 4c 03 	lds	r18, 0x034C
    3384:	30 91 4d 03 	lds	r19, 0x034D
    3388:	40 91 4e 03 	lds	r20, 0x034E
    338c:	50 91 4f 03 	lds	r21, 0x034F
    3390:	71 e0       	ldi	r23, 0x01	; 1
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	9e 81       	ldd	r25, Y+6	; 0x06
    3396:	af 81       	ldd	r26, Y+7	; 0x07
    3398:	b8 85       	ldd	r27, Y+8	; 0x08
    339a:	28 17       	cp	r18, r24
    339c:	39 07       	cpc	r19, r25
    339e:	4a 07       	cpc	r20, r26
    33a0:	5b 07       	cpc	r21, r27
    33a2:	08 f4       	brcc	.+2      	; 0x33a6 <angle_rotate+0xc8>
    33a4:	70 e0       	ldi	r23, 0x00	; 0
    33a6:	20 91 48 03 	lds	r18, 0x0348
    33aa:	30 91 49 03 	lds	r19, 0x0349
    33ae:	40 91 4a 03 	lds	r20, 0x034A
    33b2:	50 91 4b 03 	lds	r21, 0x034B
    33b6:	61 e0       	ldi	r22, 0x01	; 1
    33b8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ba:	9e 81       	ldd	r25, Y+6	; 0x06
    33bc:	af 81       	ldd	r26, Y+7	; 0x07
    33be:	b8 85       	ldd	r27, Y+8	; 0x08
    33c0:	28 17       	cp	r18, r24
    33c2:	39 07       	cpc	r19, r25
    33c4:	4a 07       	cpc	r20, r26
    33c6:	5b 07       	cpc	r21, r27
    33c8:	08 f4       	brcc	.+2      	; 0x33cc <angle_rotate+0xee>
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	87 2f       	mov	r24, r23
    33ce:	86 2b       	or	r24, r22
    33d0:	88 23       	and	r24, r24
    33d2:	a9 f2       	breq	.-86     	; 0x337e <angle_rotate+0xa0>
		break;
    33d4:	00 00       	nop
	}
	stop(); //Stop robot
    33d6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <stop>
}
    33da:	2a 96       	adiw	r28, 0x0a	; 10
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	08 95       	ret

000033ec <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	2a 97       	sbiw	r28, 0x0a	; 10
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	9a 87       	std	Y+10, r25	; 0x0a
    3402:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	dc 01       	movw	r26, r24
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	9a 83       	std	Y+2, r25	; 0x02
    340e:	ab 83       	std	Y+3, r26	; 0x03
    3410:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    3412:	1d 82       	std	Y+5, r1	; 0x05
    3414:	1e 82       	std	Y+6, r1	; 0x06
    3416:	1f 82       	std	Y+7, r1	; 0x07
    3418:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    341a:	89 85       	ldd	r24, Y+9	; 0x09
    341c:	9a 85       	ldd	r25, Y+10	; 0x0a
    341e:	cc 01       	movw	r24, r24
    3420:	a0 e0       	ldi	r26, 0x00	; 0
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__floatunsisf>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	25 ee       	ldi	r18, 0xE5	; 229
    3436:	30 ed       	ldi	r19, 0xD0	; 208
    3438:	4a ea       	ldi	r20, 0xAA	; 170
    343a:	50 e4       	ldi	r21, 0x40	; 64
    343c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__divsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	ab 83       	std	Y+3, r26	; 0x03
    344a:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    344c:	69 81       	ldd	r22, Y+1	; 0x01
    344e:	7a 81       	ldd	r23, Y+2	; 0x02
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	9c 81       	ldd	r25, Y+4	; 0x04
    3454:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	8d 83       	std	Y+5, r24	; 0x05
    345e:	9e 83       	std	Y+6, r25	; 0x06
    3460:	af 83       	std	Y+7, r26	; 0x07
    3462:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    3464:	10 92 4c 03 	sts	0x034C, r1
    3468:	10 92 4d 03 	sts	0x034D, r1
    346c:	10 92 4e 03 	sts	0x034E, r1
    3470:	10 92 4f 03 	sts	0x034F, r1
    3474:	01 c0       	rjmp	.+2      	; 0x3478 <linear_distance_mm+0x8c>
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			break;
		}
	}
    3476:	00 00       	nop
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    3478:	20 91 4c 03 	lds	r18, 0x034C
    347c:	30 91 4d 03 	lds	r19, 0x034D
    3480:	40 91 4e 03 	lds	r20, 0x034E
    3484:	50 91 4f 03 	lds	r21, 0x034F
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	af 81       	ldd	r26, Y+7	; 0x07
    348e:	b8 85       	ldd	r27, Y+8	; 0x08
    3490:	82 17       	cp	r24, r18
    3492:	93 07       	cpc	r25, r19
    3494:	a4 07       	cpc	r26, r20
    3496:	b5 07       	cpc	r27, r21
    3498:	70 f7       	brcc	.-36     	; 0x3476 <linear_distance_mm+0x8a>
		{
			break;
    349a:	00 00       	nop
		}
	}
	stop(); //Stop robot
    349c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <stop>
}
    34a0:	2a 96       	adiw	r28, 0x0a	; 10
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	de bf       	out	0x3e, r29	; 62
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	cd bf       	out	0x3d, r28	; 61
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	08 95       	ret

000034b2 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	0f 92       	push	r0
    34b8:	0f 92       	push	r0
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	9a 83       	std	Y+2, r25	; 0x02
    34c0:	89 83       	std	Y+1, r24	; 0x01
	forward();
    34c2:	0e 94 40 0b 	call	0x1680	; 0x1680 <forward>
	linear_distance_mm(DistanceInMM);
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ca:	0e 94 f6 19 	call	0x33ec	; 0x33ec <linear_distance_mm>
}
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	08 95       	ret

000034d8 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	0f 92       	push	r0
    34de:	0f 92       	push	r0
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	9a 83       	std	Y+2, r25	; 0x02
    34e6:	89 83       	std	Y+1, r24	; 0x01
	back();
    34e8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <back>
	linear_distance_mm(DistanceInMM);
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
    34f0:	0e 94 f6 19 	call	0x33ec	; 0x33ec <linear_distance_mm>
}
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	08 95       	ret

000034fe <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	0f 92       	push	r0
    3504:	0f 92       	push	r0
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	9a 83       	std	Y+2, r25	; 0x02
    350c:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    350e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <left>
	angle_rotate(Degrees);
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	9a 81       	ldd	r25, Y+2	; 0x02
    3516:	0e 94 6f 19 	call	0x32de	; 0x32de <angle_rotate>
}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	08 95       	ret

00003524 <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	0f 92       	push	r0
    352a:	0f 92       	push	r0
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	9a 83       	std	Y+2, r25	; 0x02
    3532:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    3534:	0e 94 a5 0b 	call	0x174a	; 0x174a <right>
	angle_rotate(Degrees);
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	0e 94 6f 19 	call	0x32de	; 0x32de <angle_rotate>
}
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	08 95       	ret

0000354a <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	0f 92       	push	r0
    3550:	0f 92       	push	r0
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	9a 83       	std	Y+2, r25	; 0x02
    3558:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
    355a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <soft_left>
	Degrees=Degrees*2;
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	9a 81       	ldd	r25, Y+2	; 0x02
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	9a 83       	std	Y+2, r25	; 0x02
    3568:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	9a 81       	ldd	r25, Y+2	; 0x02
    356e:	0e 94 6f 19 	call	0x32de	; 0x32de <angle_rotate>
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	08 95       	ret

0000357c <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    357c:	cf 93       	push	r28
    357e:	df 93       	push	r29
    3580:	0f 92       	push	r0
    3582:	0f 92       	push	r0
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
    358c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <soft_right>
	Degrees=Degrees*2;
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	9a 81       	ldd	r25, Y+2	; 0x02
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	9a 83       	std	Y+2, r25	; 0x02
    359a:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	0e 94 6f 19 	call	0x32de	; 0x32de <angle_rotate>
}
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	08 95       	ret

000035ae <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    35ae:	cf 93       	push	r28
    35b0:	df 93       	push	r29
    35b2:	0f 92       	push	r0
    35b4:	0f 92       	push	r0
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	9a 83       	std	Y+2, r25	; 0x02
    35bc:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
    35be:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <soft_left_2>
	Degrees=Degrees*2;
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	9a 81       	ldd	r25, Y+2	; 0x02
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	9a 83       	std	Y+2, r25	; 0x02
    35cc:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	9a 81       	ldd	r25, Y+2	; 0x02
    35d2:	0e 94 6f 19 	call	0x32de	; 0x32de <angle_rotate>
}
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	08 95       	ret

000035e0 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
    35e4:	0f 92       	push	r0
    35e6:	0f 92       	push	r0
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
    35f0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <soft_right_2>
	Degrees=Degrees*2;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	9a 83       	std	Y+2, r25	; 0x02
    35fe:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	9a 81       	ldd	r25, Y+2	; 0x02
    3604:	0e 94 6f 19 	call	0x32de	; 0x32de <angle_rotate>
}
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	08 95       	ret

00003612 <init_devicess>:

//Function to initialize all the devices
void init_devicess()
{
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    361a:	f8 94       	cli
	port_init1();  //Initializes all the ports
    361c:	0e 94 d6 18 	call	0x31ac	; 0x31ac <port_init1>
	left_position_encoder_interrupt_init();
    3620:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    3624:	0e 94 fe 18 	call	0x31fc	; 0x31fc <right_position_encoder_interrupt_init>
	sei();   // Enables the global interrupt
    3628:	78 94       	sei
}
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	08 95       	ret

00003630 <main>:


int main()
{
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	c6 54       	subi	r28, 0x46	; 70
    363e:	d0 40       	sbci	r29, 0x00	; 0
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
			stop();
		}
	}*/	
	
	
	cli();             // bot 5
    364a:	f8 94       	cli
	adc_init();
    364c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <adc_init>
	adc_pin_config();
    3650:	0e 94 20 0c 	call	0x1840	; 0x1840 <adc_pin_config>
	sei();
    3654:	78 94       	sei
	set_velocity(150,150);
    3656:	86 e9       	ldi	r24, 0x96	; 150
    3658:	66 e9       	ldi	r22, 0x96	; 150
    365a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <set_velocity>
	init_devices5();
    365e:	0e 94 48 07 	call	0xe90	; 0xe90 <init_devices5>
	init_devicess();
    3662:	0e 94 09 1b 	call	0x3612	; 0x3612 <init_devicess>
	delay(400);
    3666:	80 e9       	ldi	r24, 0x90	; 144
    3668:	91 e0       	ldi	r25, 0x01	; 1
    366a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay>
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	90 e8       	ldi	r25, 0x80	; 128
    3672:	ab e3       	ldi	r26, 0x3B	; 59
    3674:	b5 e4       	ldi	r27, 0x45	; 69
    3676:	89 83       	std	Y+1, r24	; 0x01
    3678:	9a 83       	std	Y+2, r25	; 0x02
    367a:	ab 83       	std	Y+3, r26	; 0x03
    367c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    367e:	69 81       	ldd	r22, Y+1	; 0x01
    3680:	7a 81       	ldd	r23, Y+2	; 0x02
    3682:	8b 81       	ldd	r24, Y+3	; 0x03
    3684:	9c 81       	ldd	r25, Y+4	; 0x04
    3686:	26 e6       	ldi	r18, 0x66	; 102
    3688:	36 e6       	ldi	r19, 0x66	; 102
    368a:	46 e6       	ldi	r20, 0x66	; 102
    368c:	55 e4       	ldi	r21, 0x45	; 69
    368e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	8d 83       	std	Y+5, r24	; 0x05
    3698:	9e 83       	std	Y+6, r25	; 0x06
    369a:	af 83       	std	Y+7, r26	; 0x07
    369c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    369e:	11 e0       	ldi	r17, 0x01	; 1
    36a0:	6d 81       	ldd	r22, Y+5	; 0x05
    36a2:	7e 81       	ldd	r23, Y+6	; 0x06
    36a4:	8f 81       	ldd	r24, Y+7	; 0x07
    36a6:	98 85       	ldd	r25, Y+8	; 0x08
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e8       	ldi	r20, 0x80	; 128
    36ae:	5f e3       	ldi	r21, 0x3F	; 63
    36b0:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    36b4:	88 23       	and	r24, r24
    36b6:	0c f0       	brlt	.+2      	; 0x36ba <main+0x8a>
    36b8:	10 e0       	ldi	r17, 0x00	; 0
    36ba:	11 23       	and	r17, r17
    36bc:	29 f0       	breq	.+10     	; 0x36c8 <main+0x98>
		__ticks = 1;
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9a 87       	std	Y+10, r25	; 0x0a
    36c4:	89 87       	std	Y+9, r24	; 0x09
    36c6:	46 c0       	rjmp	.+140    	; 0x3754 <main+0x124>
	else if (__tmp > 65535)
    36c8:	11 e0       	ldi	r17, 0x01	; 1
    36ca:	6d 81       	ldd	r22, Y+5	; 0x05
    36cc:	7e 81       	ldd	r23, Y+6	; 0x06
    36ce:	8f 81       	ldd	r24, Y+7	; 0x07
    36d0:	98 85       	ldd	r25, Y+8	; 0x08
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	3f ef       	ldi	r19, 0xFF	; 255
    36d6:	4f e7       	ldi	r20, 0x7F	; 127
    36d8:	57 e4       	ldi	r21, 0x47	; 71
    36da:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    36de:	18 16       	cp	r1, r24
    36e0:	0c f0       	brlt	.+2      	; 0x36e4 <main+0xb4>
    36e2:	10 e0       	ldi	r17, 0x00	; 0
    36e4:	11 23       	and	r17, r17
    36e6:	61 f1       	breq	.+88     	; 0x3740 <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e8:	69 81       	ldd	r22, Y+1	; 0x01
    36ea:	7a 81       	ldd	r23, Y+2	; 0x02
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	9c 81       	ldd	r25, Y+4	; 0x04
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	40 e2       	ldi	r20, 0x20	; 32
    36f6:	51 e4       	ldi	r21, 0x41	; 65
    36f8:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	bc 01       	movw	r22, r24
    3702:	cd 01       	movw	r24, r26
    3704:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	9a 87       	std	Y+10, r25	; 0x0a
    370e:	89 87       	std	Y+9, r24	; 0x09
    3710:	12 c0       	rjmp	.+36     	; 0x3736 <main+0x106>
    3712:	80 e7       	ldi	r24, 0x70	; 112
    3714:	91 e0       	ldi	r25, 0x01	; 1
    3716:	9c 87       	std	Y+12, r25	; 0x0c
    3718:	8b 87       	std	Y+11, r24	; 0x0b
    371a:	8b 85       	ldd	r24, Y+11	; 0x0b
    371c:	9c 85       	ldd	r25, Y+12	; 0x0c
    371e:	8c 01       	movw	r16, r24
    3720:	c8 01       	movw	r24, r16
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	f1 f7       	brne	.-4      	; 0x3722 <main+0xf2>
    3726:	8c 01       	movw	r16, r24
    3728:	1c 87       	std	Y+12, r17	; 0x0c
    372a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372c:	89 85       	ldd	r24, Y+9	; 0x09
    372e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	9a 87       	std	Y+10, r25	; 0x0a
    3734:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	51 f7       	brne	.-44     	; 0x3712 <main+0xe2>
    373e:	17 c0       	rjmp	.+46     	; 0x376e <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	6d 81       	ldd	r22, Y+5	; 0x05
    3742:	7e 81       	ldd	r23, Y+6	; 0x06
    3744:	8f 81       	ldd	r24, Y+7	; 0x07
    3746:	98 85       	ldd	r25, Y+8	; 0x08
    3748:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	9a 87       	std	Y+10, r25	; 0x0a
    3752:	89 87       	std	Y+9, r24	; 0x09
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	9a 85       	ldd	r25, Y+10	; 0x0a
    3758:	9e 87       	std	Y+14, r25	; 0x0e
    375a:	8d 87       	std	Y+13, r24	; 0x0d
    375c:	8d 85       	ldd	r24, Y+13	; 0x0d
    375e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3760:	8c 01       	movw	r16, r24
    3762:	f8 01       	movw	r30, r16
    3764:	31 97       	sbiw	r30, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <main+0x134>
    3768:	8f 01       	movw	r16, r30
    376a:	1e 87       	std	Y+14, r17	; 0x0e
    376c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(3000);
	connectDevice();
    376e:	0e 94 53 07 	call	0xea6	; 0xea6 <connectDevice>
	if(parseOK("AT"))
    3772:	85 e0       	ldi	r24, 0x05	; 5
    3774:	92 e0       	ldi	r25, 0x02	; 2
    3776:	0e 94 ef 04 	call	0x9de	; 0x9de <parseOK>
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	21 f0       	breq	.+8      	; 0x3786 <main+0x156>
	disp(st);
    377e:	88 ec       	ldi	r24, 0xC8	; 200
    3780:	93 e0       	ldi	r25, 0x03	; 3
    3782:	0e 94 64 18 	call	0x30c8	; 0x30c8 <disp>
	delay(5000);
    3786:	88 e8       	ldi	r24, 0x88	; 136
    3788:	93 e1       	ldi	r25, 0x13	; 19
    378a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay>
	if(connectIP4())
    378e:	0e 94 20 08 	call	0x1040	; 0x1040 <connectIP4>
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	29 f0       	breq	.+10     	; 0x37a0 <main+0x170>
	disp("Connctd Bot");
    3796:	8a e1       	ldi	r24, 0x1A	; 26
    3798:	93 e0       	ldi	r25, 0x03	; 3
    379a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <disp>
    379e:	04 c0       	rjmp	.+8      	; 0x37a8 <main+0x178>
	else
	disp("not conn");
    37a0:	86 e2       	ldi	r24, 0x26	; 38
    37a2:	93 e0       	ldi	r25, 0x03	; 3
    37a4:	0e 94 64 18 	call	0x30c8	; 0x30c8 <disp>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	aa ef       	ldi	r26, 0xFA	; 250
    37ae:	b4 e4       	ldi	r27, 0x44	; 68
    37b0:	8f 87       	std	Y+15, r24	; 0x0f
    37b2:	98 8b       	std	Y+16, r25	; 0x10
    37b4:	a9 8b       	std	Y+17, r26	; 0x11
    37b6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    37b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    37ba:	78 89       	ldd	r23, Y+16	; 0x10
    37bc:	89 89       	ldd	r24, Y+17	; 0x11
    37be:	9a 89       	ldd	r25, Y+18	; 0x12
    37c0:	26 e6       	ldi	r18, 0x66	; 102
    37c2:	36 e6       	ldi	r19, 0x66	; 102
    37c4:	46 e6       	ldi	r20, 0x66	; 102
    37c6:	55 e4       	ldi	r21, 0x45	; 69
    37c8:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	8b 8b       	std	Y+19, r24	; 0x13
    37d2:	9c 8b       	std	Y+20, r25	; 0x14
    37d4:	ad 8b       	std	Y+21, r26	; 0x15
    37d6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    37d8:	11 e0       	ldi	r17, 0x01	; 1
    37da:	6b 89       	ldd	r22, Y+19	; 0x13
    37dc:	7c 89       	ldd	r23, Y+20	; 0x14
    37de:	8d 89       	ldd	r24, Y+21	; 0x15
    37e0:	9e 89       	ldd	r25, Y+22	; 0x16
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	0c f0       	brlt	.+2      	; 0x37f4 <main+0x1c4>
    37f2:	10 e0       	ldi	r17, 0x00	; 0
    37f4:	11 23       	and	r17, r17
    37f6:	29 f0       	breq	.+10     	; 0x3802 <main+0x1d2>
		__ticks = 1;
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	98 8f       	std	Y+24, r25	; 0x18
    37fe:	8f 8b       	std	Y+23, r24	; 0x17
    3800:	46 c0       	rjmp	.+140    	; 0x388e <main+0x25e>
	else if (__tmp > 65535)
    3802:	11 e0       	ldi	r17, 0x01	; 1
    3804:	6b 89       	ldd	r22, Y+19	; 0x13
    3806:	7c 89       	ldd	r23, Y+20	; 0x14
    3808:	8d 89       	ldd	r24, Y+21	; 0x15
    380a:	9e 89       	ldd	r25, Y+22	; 0x16
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	3f ef       	ldi	r19, 0xFF	; 255
    3810:	4f e7       	ldi	r20, 0x7F	; 127
    3812:	57 e4       	ldi	r21, 0x47	; 71
    3814:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    3818:	18 16       	cp	r1, r24
    381a:	0c f0       	brlt	.+2      	; 0x381e <main+0x1ee>
    381c:	10 e0       	ldi	r17, 0x00	; 0
    381e:	11 23       	and	r17, r17
    3820:	61 f1       	breq	.+88     	; 0x387a <main+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3822:	6f 85       	ldd	r22, Y+15	; 0x0f
    3824:	78 89       	ldd	r23, Y+16	; 0x10
    3826:	89 89       	ldd	r24, Y+17	; 0x11
    3828:	9a 89       	ldd	r25, Y+18	; 0x12
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e2       	ldi	r20, 0x20	; 32
    3830:	51 e4       	ldi	r21, 0x41	; 65
    3832:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	98 8f       	std	Y+24, r25	; 0x18
    3848:	8f 8b       	std	Y+23, r24	; 0x17
    384a:	12 c0       	rjmp	.+36     	; 0x3870 <main+0x240>
    384c:	80 e7       	ldi	r24, 0x70	; 112
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	9a 8f       	std	Y+26, r25	; 0x1a
    3852:	89 8f       	std	Y+25, r24	; 0x19
    3854:	89 8d       	ldd	r24, Y+25	; 0x19
    3856:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3858:	8c 01       	movw	r16, r24
    385a:	c8 01       	movw	r24, r16
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	f1 f7       	brne	.-4      	; 0x385c <main+0x22c>
    3860:	8c 01       	movw	r16, r24
    3862:	1a 8f       	std	Y+26, r17	; 0x1a
    3864:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	8f 89       	ldd	r24, Y+23	; 0x17
    3868:	98 8d       	ldd	r25, Y+24	; 0x18
    386a:	01 97       	sbiw	r24, 0x01	; 1
    386c:	98 8f       	std	Y+24, r25	; 0x18
    386e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3870:	8f 89       	ldd	r24, Y+23	; 0x17
    3872:	98 8d       	ldd	r25, Y+24	; 0x18
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	51 f7       	brne	.-44     	; 0x384c <main+0x21c>
    3878:	17 c0       	rjmp	.+46     	; 0x38a8 <main+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387a:	6b 89       	ldd	r22, Y+19	; 0x13
    387c:	7c 89       	ldd	r23, Y+20	; 0x14
    387e:	8d 89       	ldd	r24, Y+21	; 0x15
    3880:	9e 89       	ldd	r25, Y+22	; 0x16
    3882:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	98 8f       	std	Y+24, r25	; 0x18
    388c:	8f 8b       	std	Y+23, r24	; 0x17
    388e:	8f 89       	ldd	r24, Y+23	; 0x17
    3890:	98 8d       	ldd	r25, Y+24	; 0x18
    3892:	9c 8f       	std	Y+28, r25	; 0x1c
    3894:	8b 8f       	std	Y+27, r24	; 0x1b
    3896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    389a:	8c 01       	movw	r16, r24
    389c:	f8 01       	movw	r30, r16
    389e:	31 97       	sbiw	r30, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <main+0x26e>
    38a2:	8f 01       	movw	r16, r30
    38a4:	1c 8f       	std	Y+28, r17	; 0x1c
    38a6:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(2000);
	sendmsgs("444`");
    38a8:	8f e2       	ldi	r24, 0x2F	; 47
    38aa:	93 e0       	ldi	r25, 0x03	; 3
    38ac:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <sendmsgs>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	aa ef       	ldi	r26, 0xFA	; 250
    38b6:	b3 e4       	ldi	r27, 0x43	; 67
    38b8:	8d 8f       	std	Y+29, r24	; 0x1d
    38ba:	9e 8f       	std	Y+30, r25	; 0x1e
    38bc:	af 8f       	std	Y+31, r26	; 0x1f
    38be:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    38c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    38c2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    38c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38c6:	98 a1       	lds	r25, 0x48
    38c8:	26 e6       	ldi	r18, 0x66	; 102
    38ca:	36 e6       	ldi	r19, 0x66	; 102
    38cc:	46 e6       	ldi	r20, 0x66	; 102
    38ce:	55 e4       	ldi	r21, 0x45	; 69
    38d0:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	89 a3       	lds	r24, 0x59
    38da:	9a a3       	lds	r25, 0x5a
    38dc:	ab a3       	lds	r26, 0x5b
    38de:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    38e0:	11 e0       	ldi	r17, 0x01	; 1
    38e2:	69 a1       	lds	r22, 0x49
    38e4:	7a a1       	lds	r23, 0x4a
    38e6:	8b a1       	lds	r24, 0x4b
    38e8:	9c a1       	lds	r25, 0x4c
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e8       	ldi	r20, 0x80	; 128
    38f0:	5f e3       	ldi	r21, 0x3F	; 63
    38f2:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    38f6:	88 23       	and	r24, r24
    38f8:	0c f0       	brlt	.+2      	; 0x38fc <main+0x2cc>
    38fa:	10 e0       	ldi	r17, 0x00	; 0
    38fc:	11 23       	and	r17, r17
    38fe:	29 f0       	breq	.+10     	; 0x390a <main+0x2da>
		__ticks = 1;
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	9e a3       	lds	r25, 0x5e
    3906:	8d a3       	lds	r24, 0x5d
    3908:	46 c0       	rjmp	.+140    	; 0x3996 <main+0x366>
	else if (__tmp > 65535)
    390a:	11 e0       	ldi	r17, 0x01	; 1
    390c:	69 a1       	lds	r22, 0x49
    390e:	7a a1       	lds	r23, 0x4a
    3910:	8b a1       	lds	r24, 0x4b
    3912:	9c a1       	lds	r25, 0x4c
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	3f ef       	ldi	r19, 0xFF	; 255
    3918:	4f e7       	ldi	r20, 0x7F	; 127
    391a:	57 e4       	ldi	r21, 0x47	; 71
    391c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    3920:	18 16       	cp	r1, r24
    3922:	0c f0       	brlt	.+2      	; 0x3926 <main+0x2f6>
    3924:	10 e0       	ldi	r17, 0x00	; 0
    3926:	11 23       	and	r17, r17
    3928:	61 f1       	breq	.+88     	; 0x3982 <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    392c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    392e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3930:	98 a1       	lds	r25, 0x48
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e2       	ldi	r20, 0x20	; 32
    3938:	51 e4       	ldi	r21, 0x41	; 65
    393a:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	9e a3       	lds	r25, 0x5e
    3950:	8d a3       	lds	r24, 0x5d
    3952:	12 c0       	rjmp	.+36     	; 0x3978 <main+0x348>
    3954:	80 e7       	ldi	r24, 0x70	; 112
    3956:	91 e0       	ldi	r25, 0x01	; 1
    3958:	98 a7       	lds	r25, 0x78
    395a:	8f a3       	lds	r24, 0x5f
    395c:	8f a1       	lds	r24, 0x4f
    395e:	98 a5       	lds	r25, 0x68
    3960:	8c 01       	movw	r16, r24
    3962:	c8 01       	movw	r24, r16
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <main+0x334>
    3968:	8c 01       	movw	r16, r24
    396a:	18 a7       	lds	r17, 0x78
    396c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396e:	8d a1       	lds	r24, 0x4d
    3970:	9e a1       	lds	r25, 0x4e
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	9e a3       	lds	r25, 0x5e
    3976:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3978:	8d a1       	lds	r24, 0x4d
    397a:	9e a1       	lds	r25, 0x4e
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	51 f7       	brne	.-44     	; 0x3954 <main+0x324>
    3980:	17 c0       	rjmp	.+46     	; 0x39b0 <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3982:	69 a1       	lds	r22, 0x49
    3984:	7a a1       	lds	r23, 0x4a
    3986:	8b a1       	lds	r24, 0x4b
    3988:	9c a1       	lds	r25, 0x4c
    398a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9e a3       	lds	r25, 0x5e
    3994:	8d a3       	lds	r24, 0x5d
    3996:	8d a1       	lds	r24, 0x4d
    3998:	9e a1       	lds	r25, 0x4e
    399a:	9a a7       	lds	r25, 0x7a
    399c:	89 a7       	lds	r24, 0x79
    399e:	89 a5       	lds	r24, 0x69
    39a0:	9a a5       	lds	r25, 0x6a
    39a2:	8c 01       	movw	r16, r24
    39a4:	f8 01       	movw	r30, r16
    39a6:	31 97       	sbiw	r30, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <main+0x376>
    39aa:	8f 01       	movw	r16, r30
    39ac:	1a a7       	lds	r17, 0x7a
    39ae:	09 a7       	lds	r16, 0x79
	_delay_ms(500);
	dmb_drive();
    39b0:	0e 94 13 0c 	call	0x1826	; 0x1826 <dmb_drive>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	aa e7       	ldi	r26, 0x7A	; 122
    39ba:	b4 e4       	ldi	r27, 0x44	; 68
    39bc:	8b a7       	lds	r24, 0x7b
    39be:	9c a7       	lds	r25, 0x7c
    39c0:	ad a7       	lds	r26, 0x7d
    39c2:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    39c4:	6b a5       	lds	r22, 0x6b
    39c6:	7c a5       	lds	r23, 0x6c
    39c8:	8d a5       	lds	r24, 0x6d
    39ca:	9e a5       	lds	r25, 0x6e
    39cc:	26 e6       	ldi	r18, 0x66	; 102
    39ce:	36 e6       	ldi	r19, 0x66	; 102
    39d0:	46 e6       	ldi	r20, 0x66	; 102
    39d2:	55 e4       	ldi	r21, 0x45	; 69
    39d4:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	8f a7       	lds	r24, 0x7f
    39de:	98 ab       	sts	0x58, r25
    39e0:	a9 ab       	sts	0x59, r26
    39e2:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    39e4:	11 e0       	ldi	r17, 0x01	; 1
    39e6:	6f a5       	lds	r22, 0x6f
    39e8:	78 a9       	sts	0x48, r23
    39ea:	89 a9       	sts	0x49, r24
    39ec:	9a a9       	sts	0x4a, r25
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e8       	ldi	r20, 0x80	; 128
    39f4:	5f e3       	ldi	r21, 0x3F	; 63
    39f6:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    39fa:	88 23       	and	r24, r24
    39fc:	0c f0       	brlt	.+2      	; 0x3a00 <main+0x3d0>
    39fe:	10 e0       	ldi	r17, 0x00	; 0
    3a00:	11 23       	and	r17, r17
    3a02:	29 f0       	breq	.+10     	; 0x3a0e <main+0x3de>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9c ab       	sts	0x5c, r25
    3a0a:	8b ab       	sts	0x5b, r24
    3a0c:	46 c0       	rjmp	.+140    	; 0x3a9a <main+0x46a>
	else if (__tmp > 65535)
    3a0e:	11 e0       	ldi	r17, 0x01	; 1
    3a10:	6f a5       	lds	r22, 0x6f
    3a12:	78 a9       	sts	0x48, r23
    3a14:	89 a9       	sts	0x49, r24
    3a16:	9a a9       	sts	0x4a, r25
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	3f ef       	ldi	r19, 0xFF	; 255
    3a1c:	4f e7       	ldi	r20, 0x7F	; 127
    3a1e:	57 e4       	ldi	r21, 0x47	; 71
    3a20:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    3a24:	18 16       	cp	r1, r24
    3a26:	0c f0       	brlt	.+2      	; 0x3a2a <main+0x3fa>
    3a28:	10 e0       	ldi	r17, 0x00	; 0
    3a2a:	11 23       	and	r17, r17
    3a2c:	61 f1       	breq	.+88     	; 0x3a86 <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	6b a5       	lds	r22, 0x6b
    3a30:	7c a5       	lds	r23, 0x6c
    3a32:	8d a5       	lds	r24, 0x6d
    3a34:	9e a5       	lds	r25, 0x6e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9c ab       	sts	0x5c, r25
    3a54:	8b ab       	sts	0x5b, r24
    3a56:	12 c0       	rjmp	.+36     	; 0x3a7c <main+0x44c>
    3a58:	80 e7       	ldi	r24, 0x70	; 112
    3a5a:	91 e0       	ldi	r25, 0x01	; 1
    3a5c:	9e ab       	sts	0x5e, r25
    3a5e:	8d ab       	sts	0x5d, r24
    3a60:	8d a9       	sts	0x4d, r24
    3a62:	9e a9       	sts	0x4e, r25
    3a64:	8c 01       	movw	r16, r24
    3a66:	c8 01       	movw	r24, r16
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <main+0x438>
    3a6c:	8c 01       	movw	r16, r24
    3a6e:	1e ab       	sts	0x5e, r17
    3a70:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a72:	8b a9       	sts	0x4b, r24
    3a74:	9c a9       	sts	0x4c, r25
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	9c ab       	sts	0x5c, r25
    3a7a:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a7c:	8b a9       	sts	0x4b, r24
    3a7e:	9c a9       	sts	0x4c, r25
    3a80:	00 97       	sbiw	r24, 0x00	; 0
    3a82:	51 f7       	brne	.-44     	; 0x3a58 <main+0x428>
    3a84:	17 c0       	rjmp	.+46     	; 0x3ab4 <main+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a86:	6f a5       	lds	r22, 0x6f
    3a88:	78 a9       	sts	0x48, r23
    3a8a:	89 a9       	sts	0x49, r24
    3a8c:	9a a9       	sts	0x4a, r25
    3a8e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	9c ab       	sts	0x5c, r25
    3a98:	8b ab       	sts	0x5b, r24
    3a9a:	8b a9       	sts	0x4b, r24
    3a9c:	9c a9       	sts	0x4c, r25
    3a9e:	98 af       	sts	0x78, r25
    3aa0:	8f ab       	sts	0x5f, r24
    3aa2:	8f a9       	sts	0x4f, r24
    3aa4:	98 ad       	sts	0x68, r25
    3aa6:	8c 01       	movw	r16, r24
    3aa8:	f8 01       	movw	r30, r16
    3aaa:	31 97       	sbiw	r30, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <main+0x47a>
    3aae:	8f 01       	movw	r16, r30
    3ab0:	18 af       	sts	0x78, r17
    3ab2:	0f ab       	sts	0x5f, r16
	_delay_ms(1000);
	
	forward_mm(200); //Moves robot forward 100mm
    3ab4:	88 ec       	ldi	r24, 0xC8	; 200
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <forward_mm>
	stop();
    3abc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <stop>
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	aa ef       	ldi	r26, 0xFA	; 250
    3ac6:	b3 e4       	ldi	r27, 0x43	; 67
    3ac8:	89 af       	sts	0x79, r24
    3aca:	9a af       	sts	0x7a, r25
    3acc:	ab af       	sts	0x7b, r26
    3ace:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3ad0:	69 ad       	sts	0x69, r22
    3ad2:	7a ad       	sts	0x6a, r23
    3ad4:	8b ad       	sts	0x6b, r24
    3ad6:	9c ad       	sts	0x6c, r25
    3ad8:	26 e6       	ldi	r18, 0x66	; 102
    3ada:	36 e6       	ldi	r19, 0x66	; 102
    3adc:	46 e6       	ldi	r20, 0x66	; 102
    3ade:	55 e4       	ldi	r21, 0x45	; 69
    3ae0:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	9e 01       	movw	r18, r28
    3aea:	23 5c       	subi	r18, 0xC3	; 195
    3aec:	3f 4f       	sbci	r19, 0xFF	; 255
    3aee:	f9 01       	movw	r30, r18
    3af0:	80 83       	st	Z, r24
    3af2:	91 83       	std	Z+1, r25	; 0x01
    3af4:	a2 83       	std	Z+2, r26	; 0x02
    3af6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3af8:	11 e0       	ldi	r17, 0x01	; 1
    3afa:	ce 01       	movw	r24, r28
    3afc:	cd 96       	adiw	r24, 0x3d	; 61
    3afe:	fc 01       	movw	r30, r24
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	5f e3       	ldi	r21, 0x3F	; 63
    3b10:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__cmpsf2>
    3b14:	88 23       	and	r24, r24
    3b16:	0c f0       	brlt	.+2      	; 0x3b1a <main+0x4ea>
    3b18:	10 e0       	ldi	r17, 0x00	; 0
    3b1a:	11 23       	and	r17, r17
    3b1c:	49 f0       	breq	.+18     	; 0x3b30 <main+0x500>
		__ticks = 1;
    3b1e:	ce 01       	movw	r24, r28
    3b20:	8f 5b       	subi	r24, 0xBF	; 191
    3b22:	9f 4f       	sbci	r25, 0xFF	; 255
    3b24:	21 e0       	ldi	r18, 0x01	; 1
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	fc 01       	movw	r30, r24
    3b2a:	31 83       	std	Z+1, r19	; 0x01
    3b2c:	20 83       	st	Z, r18
    3b2e:	6e c0       	rjmp	.+220    	; 0x3c0c <main+0x5dc>
	else if (__tmp > 65535)
    3b30:	11 e0       	ldi	r17, 0x01	; 1
    3b32:	ce 01       	movw	r24, r28
    3b34:	cd 96       	adiw	r24, 0x3d	; 61
    3b36:	fc 01       	movw	r30, r24
    3b38:	60 81       	ld	r22, Z
    3b3a:	71 81       	ldd	r23, Z+1	; 0x01
    3b3c:	82 81       	ldd	r24, Z+2	; 0x02
    3b3e:	93 81       	ldd	r25, Z+3	; 0x03
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	3f ef       	ldi	r19, 0xFF	; 255
    3b44:	4f e7       	ldi	r20, 0x7F	; 127
    3b46:	57 e4       	ldi	r21, 0x47	; 71
    3b48:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__gesf2>
    3b4c:	18 16       	cp	r1, r24
    3b4e:	0c f0       	brlt	.+2      	; 0x3b52 <main+0x522>
    3b50:	10 e0       	ldi	r17, 0x00	; 0
    3b52:	11 23       	and	r17, r17
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <main+0x528>
    3b56:	49 c0       	rjmp	.+146    	; 0x3bea <main+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b58:	69 ad       	sts	0x69, r22
    3b5a:	7a ad       	sts	0x6a, r23
    3b5c:	8b ad       	sts	0x6b, r24
    3b5e:	9c ad       	sts	0x6c, r25
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e2       	ldi	r20, 0x20	; 32
    3b66:	51 e4       	ldi	r21, 0x41	; 65
    3b68:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	8e 01       	movw	r16, r28
    3b72:	0f 5b       	subi	r16, 0xBF	; 191
    3b74:	1f 4f       	sbci	r17, 0xFF	; 255
    3b76:	bc 01       	movw	r22, r24
    3b78:	cd 01       	movw	r24, r26
    3b7a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	f8 01       	movw	r30, r16
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	27 c0       	rjmp	.+78     	; 0x3bd8 <main+0x5a8>
    3b8a:	ce 01       	movw	r24, r28
    3b8c:	8d 5b       	subi	r24, 0xBD	; 189
    3b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b90:	20 e7       	ldi	r18, 0x70	; 112
    3b92:	31 e0       	ldi	r19, 0x01	; 1
    3b94:	fc 01       	movw	r30, r24
    3b96:	31 83       	std	Z+1, r19	; 0x01
    3b98:	20 83       	st	Z, r18
    3b9a:	ce 01       	movw	r24, r28
    3b9c:	8d 5b       	subi	r24, 0xBD	; 189
    3b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	8c 01       	movw	r16, r24
    3ba8:	c8 01       	movw	r24, r16
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <main+0x57a>
    3bae:	8c 01       	movw	r16, r24
    3bb0:	ce 01       	movw	r24, r28
    3bb2:	8d 5b       	subi	r24, 0xBD	; 189
    3bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	11 83       	std	Z+1, r17	; 0x01
    3bba:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	8f 5b       	subi	r24, 0xBF	; 191
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	9e 01       	movw	r18, r28
    3bc4:	2f 5b       	subi	r18, 0xBF	; 191
    3bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc8:	f9 01       	movw	r30, r18
    3bca:	20 81       	ld	r18, Z
    3bcc:	31 81       	ldd	r19, Z+1	; 0x01
    3bce:	21 50       	subi	r18, 0x01	; 1
    3bd0:	30 40       	sbci	r19, 0x00	; 0
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	31 83       	std	Z+1, r19	; 0x01
    3bd6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd8:	ce 01       	movw	r24, r28
    3bda:	8f 5b       	subi	r24, 0xBF	; 191
    3bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bde:	fc 01       	movw	r30, r24
    3be0:	80 81       	ld	r24, Z
    3be2:	91 81       	ldd	r25, Z+1	; 0x01
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	89 f6       	brne	.-94     	; 0x3b8a <main+0x55a>
    3be8:	2e c0       	rjmp	.+92     	; 0x3c46 <main+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bea:	8e 01       	movw	r16, r28
    3bec:	0f 5b       	subi	r16, 0xBF	; 191
    3bee:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	cd 96       	adiw	r24, 0x3d	; 61
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	60 81       	ld	r22, Z
    3bf8:	71 81       	ldd	r23, Z+1	; 0x01
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	93 81       	ldd	r25, Z+3	; 0x03
    3bfe:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	f8 01       	movw	r30, r16
    3c08:	91 83       	std	Z+1, r25	; 0x01
    3c0a:	80 83       	st	Z, r24
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	8b 5b       	subi	r24, 0xBB	; 187
    3c10:	9f 4f       	sbci	r25, 0xFF	; 255
    3c12:	9e 01       	movw	r18, r28
    3c14:	2f 5b       	subi	r18, 0xBF	; 191
    3c16:	3f 4f       	sbci	r19, 0xFF	; 255
    3c18:	f9 01       	movw	r30, r18
    3c1a:	20 81       	ld	r18, Z
    3c1c:	31 81       	ldd	r19, Z+1	; 0x01
    3c1e:	fc 01       	movw	r30, r24
    3c20:	31 83       	std	Z+1, r19	; 0x01
    3c22:	20 83       	st	Z, r18
    3c24:	ce 01       	movw	r24, r28
    3c26:	8b 5b       	subi	r24, 0xBB	; 187
    3c28:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	80 81       	ld	r24, Z
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	8c 01       	movw	r16, r24
    3c32:	c8 01       	movw	r24, r16
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <main+0x604>
    3c38:	8c 01       	movw	r16, r24
    3c3a:	ce 01       	movw	r24, r28
    3c3c:	8b 5b       	subi	r24, 0xBB	; 187
    3c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c40:	fc 01       	movw	r30, r24
    3c42:	11 83       	std	Z+1, r17	; 0x01
    3c44:	00 83       	st	Z, r16
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(500);
	
		
	}		
    3c4a:	ca 5b       	subi	r28, 0xBA	; 186
    3c4c:	df 4f       	sbci	r29, 0xFF	; 255
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	08 95       	ret

00003c62 <__cmpsf2>:
    3c62:	d4 d0       	rcall	.+424    	; 0x3e0c <__fp_cmp>
    3c64:	08 f4       	brcc	.+2      	; 0x3c68 <__cmpsf2+0x6>
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	08 95       	ret

00003c6a <__divsf3>:
    3c6a:	0c d0       	rcall	.+24     	; 0x3c84 <__divsf3x>
    3c6c:	0a c1       	rjmp	.+532    	; 0x3e82 <__fp_round>
    3c6e:	02 d1       	rcall	.+516    	; 0x3e74 <__fp_pscB>
    3c70:	40 f0       	brcs	.+16     	; 0x3c82 <__divsf3+0x18>
    3c72:	f9 d0       	rcall	.+498    	; 0x3e66 <__fp_pscA>
    3c74:	30 f0       	brcs	.+12     	; 0x3c82 <__divsf3+0x18>
    3c76:	21 f4       	brne	.+8      	; 0x3c80 <__divsf3+0x16>
    3c78:	5f 3f       	cpi	r21, 0xFF	; 255
    3c7a:	19 f0       	breq	.+6      	; 0x3c82 <__divsf3+0x18>
    3c7c:	eb c0       	rjmp	.+470    	; 0x3e54 <__fp_inf>
    3c7e:	51 11       	cpse	r21, r1
    3c80:	34 c1       	rjmp	.+616    	; 0x3eea <__fp_szero>
    3c82:	ee c0       	rjmp	.+476    	; 0x3e60 <__fp_nan>

00003c84 <__divsf3x>:
    3c84:	0f d1       	rcall	.+542    	; 0x3ea4 <__fp_split3>
    3c86:	98 f3       	brcs	.-26     	; 0x3c6e <__divsf3+0x4>

00003c88 <__divsf3_pse>:
    3c88:	99 23       	and	r25, r25
    3c8a:	c9 f3       	breq	.-14     	; 0x3c7e <__divsf3+0x14>
    3c8c:	55 23       	and	r21, r21
    3c8e:	b1 f3       	breq	.-20     	; 0x3c7c <__divsf3+0x12>
    3c90:	95 1b       	sub	r25, r21
    3c92:	55 0b       	sbc	r21, r21
    3c94:	bb 27       	eor	r27, r27
    3c96:	aa 27       	eor	r26, r26
    3c98:	62 17       	cp	r22, r18
    3c9a:	73 07       	cpc	r23, r19
    3c9c:	84 07       	cpc	r24, r20
    3c9e:	38 f0       	brcs	.+14     	; 0x3cae <__divsf3_pse+0x26>
    3ca0:	9f 5f       	subi	r25, 0xFF	; 255
    3ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca4:	22 0f       	add	r18, r18
    3ca6:	33 1f       	adc	r19, r19
    3ca8:	44 1f       	adc	r20, r20
    3caa:	aa 1f       	adc	r26, r26
    3cac:	a9 f3       	breq	.-22     	; 0x3c98 <__divsf3_pse+0x10>
    3cae:	33 d0       	rcall	.+102    	; 0x3d16 <__divsf3_pse+0x8e>
    3cb0:	0e 2e       	mov	r0, r30
    3cb2:	3a f0       	brmi	.+14     	; 0x3cc2 <__divsf3_pse+0x3a>
    3cb4:	e0 e8       	ldi	r30, 0x80	; 128
    3cb6:	30 d0       	rcall	.+96     	; 0x3d18 <__divsf3_pse+0x90>
    3cb8:	91 50       	subi	r25, 0x01	; 1
    3cba:	50 40       	sbci	r21, 0x00	; 0
    3cbc:	e6 95       	lsr	r30
    3cbe:	00 1c       	adc	r0, r0
    3cc0:	ca f7       	brpl	.-14     	; 0x3cb4 <__divsf3_pse+0x2c>
    3cc2:	29 d0       	rcall	.+82     	; 0x3d16 <__divsf3_pse+0x8e>
    3cc4:	fe 2f       	mov	r31, r30
    3cc6:	27 d0       	rcall	.+78     	; 0x3d16 <__divsf3_pse+0x8e>
    3cc8:	66 0f       	add	r22, r22
    3cca:	77 1f       	adc	r23, r23
    3ccc:	88 1f       	adc	r24, r24
    3cce:	bb 1f       	adc	r27, r27
    3cd0:	26 17       	cp	r18, r22
    3cd2:	37 07       	cpc	r19, r23
    3cd4:	48 07       	cpc	r20, r24
    3cd6:	ab 07       	cpc	r26, r27
    3cd8:	b0 e8       	ldi	r27, 0x80	; 128
    3cda:	09 f0       	breq	.+2      	; 0x3cde <__divsf3_pse+0x56>
    3cdc:	bb 0b       	sbc	r27, r27
    3cde:	80 2d       	mov	r24, r0
    3ce0:	bf 01       	movw	r22, r30
    3ce2:	ff 27       	eor	r31, r31
    3ce4:	93 58       	subi	r25, 0x83	; 131
    3ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce8:	2a f0       	brmi	.+10     	; 0x3cf4 <__divsf3_pse+0x6c>
    3cea:	9e 3f       	cpi	r25, 0xFE	; 254
    3cec:	51 05       	cpc	r21, r1
    3cee:	68 f0       	brcs	.+26     	; 0x3d0a <__divsf3_pse+0x82>
    3cf0:	b1 c0       	rjmp	.+354    	; 0x3e54 <__fp_inf>
    3cf2:	fb c0       	rjmp	.+502    	; 0x3eea <__fp_szero>
    3cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cf6:	ec f3       	brlt	.-6      	; 0x3cf2 <__divsf3_pse+0x6a>
    3cf8:	98 3e       	cpi	r25, 0xE8	; 232
    3cfa:	dc f3       	brlt	.-10     	; 0x3cf2 <__divsf3_pse+0x6a>
    3cfc:	86 95       	lsr	r24
    3cfe:	77 95       	ror	r23
    3d00:	67 95       	ror	r22
    3d02:	b7 95       	ror	r27
    3d04:	f7 95       	ror	r31
    3d06:	9f 5f       	subi	r25, 0xFF	; 255
    3d08:	c9 f7       	brne	.-14     	; 0x3cfc <__divsf3_pse+0x74>
    3d0a:	88 0f       	add	r24, r24
    3d0c:	91 1d       	adc	r25, r1
    3d0e:	96 95       	lsr	r25
    3d10:	87 95       	ror	r24
    3d12:	97 f9       	bld	r25, 7
    3d14:	08 95       	ret
    3d16:	e1 e0       	ldi	r30, 0x01	; 1
    3d18:	66 0f       	add	r22, r22
    3d1a:	77 1f       	adc	r23, r23
    3d1c:	88 1f       	adc	r24, r24
    3d1e:	bb 1f       	adc	r27, r27
    3d20:	62 17       	cp	r22, r18
    3d22:	73 07       	cpc	r23, r19
    3d24:	84 07       	cpc	r24, r20
    3d26:	ba 07       	cpc	r27, r26
    3d28:	20 f0       	brcs	.+8      	; 0x3d32 <__divsf3_pse+0xaa>
    3d2a:	62 1b       	sub	r22, r18
    3d2c:	73 0b       	sbc	r23, r19
    3d2e:	84 0b       	sbc	r24, r20
    3d30:	ba 0b       	sbc	r27, r26
    3d32:	ee 1f       	adc	r30, r30
    3d34:	88 f7       	brcc	.-30     	; 0x3d18 <__divsf3_pse+0x90>
    3d36:	e0 95       	com	r30
    3d38:	08 95       	ret

00003d3a <__fixunssfsi>:
    3d3a:	bc d0       	rcall	.+376    	; 0x3eb4 <__fp_splitA>
    3d3c:	88 f0       	brcs	.+34     	; 0x3d60 <__fixunssfsi+0x26>
    3d3e:	9f 57       	subi	r25, 0x7F	; 127
    3d40:	90 f0       	brcs	.+36     	; 0x3d66 <__fixunssfsi+0x2c>
    3d42:	b9 2f       	mov	r27, r25
    3d44:	99 27       	eor	r25, r25
    3d46:	b7 51       	subi	r27, 0x17	; 23
    3d48:	a0 f0       	brcs	.+40     	; 0x3d72 <__fixunssfsi+0x38>
    3d4a:	d1 f0       	breq	.+52     	; 0x3d80 <__fixunssfsi+0x46>
    3d4c:	66 0f       	add	r22, r22
    3d4e:	77 1f       	adc	r23, r23
    3d50:	88 1f       	adc	r24, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	1a f0       	brmi	.+6      	; 0x3d5c <__fixunssfsi+0x22>
    3d56:	ba 95       	dec	r27
    3d58:	c9 f7       	brne	.-14     	; 0x3d4c <__fixunssfsi+0x12>
    3d5a:	12 c0       	rjmp	.+36     	; 0x3d80 <__fixunssfsi+0x46>
    3d5c:	b1 30       	cpi	r27, 0x01	; 1
    3d5e:	81 f0       	breq	.+32     	; 0x3d80 <__fixunssfsi+0x46>
    3d60:	c3 d0       	rcall	.+390    	; 0x3ee8 <__fp_zero>
    3d62:	b1 e0       	ldi	r27, 0x01	; 1
    3d64:	08 95       	ret
    3d66:	c0 c0       	rjmp	.+384    	; 0x3ee8 <__fp_zero>
    3d68:	67 2f       	mov	r22, r23
    3d6a:	78 2f       	mov	r23, r24
    3d6c:	88 27       	eor	r24, r24
    3d6e:	b8 5f       	subi	r27, 0xF8	; 248
    3d70:	39 f0       	breq	.+14     	; 0x3d80 <__fixunssfsi+0x46>
    3d72:	b9 3f       	cpi	r27, 0xF9	; 249
    3d74:	cc f3       	brlt	.-14     	; 0x3d68 <__fixunssfsi+0x2e>
    3d76:	86 95       	lsr	r24
    3d78:	77 95       	ror	r23
    3d7a:	67 95       	ror	r22
    3d7c:	b3 95       	inc	r27
    3d7e:	d9 f7       	brne	.-10     	; 0x3d76 <__fixunssfsi+0x3c>
    3d80:	3e f4       	brtc	.+14     	; 0x3d90 <__fixunssfsi+0x56>
    3d82:	90 95       	com	r25
    3d84:	80 95       	com	r24
    3d86:	70 95       	com	r23
    3d88:	61 95       	neg	r22
    3d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d90:	08 95       	ret

00003d92 <__floatunsisf>:
    3d92:	e8 94       	clt
    3d94:	09 c0       	rjmp	.+18     	; 0x3da8 <__floatsisf+0x12>

00003d96 <__floatsisf>:
    3d96:	97 fb       	bst	r25, 7
    3d98:	3e f4       	brtc	.+14     	; 0x3da8 <__floatsisf+0x12>
    3d9a:	90 95       	com	r25
    3d9c:	80 95       	com	r24
    3d9e:	70 95       	com	r23
    3da0:	61 95       	neg	r22
    3da2:	7f 4f       	sbci	r23, 0xFF	; 255
    3da4:	8f 4f       	sbci	r24, 0xFF	; 255
    3da6:	9f 4f       	sbci	r25, 0xFF	; 255
    3da8:	99 23       	and	r25, r25
    3daa:	a9 f0       	breq	.+42     	; 0x3dd6 <__floatsisf+0x40>
    3dac:	f9 2f       	mov	r31, r25
    3dae:	96 e9       	ldi	r25, 0x96	; 150
    3db0:	bb 27       	eor	r27, r27
    3db2:	93 95       	inc	r25
    3db4:	f6 95       	lsr	r31
    3db6:	87 95       	ror	r24
    3db8:	77 95       	ror	r23
    3dba:	67 95       	ror	r22
    3dbc:	b7 95       	ror	r27
    3dbe:	f1 11       	cpse	r31, r1
    3dc0:	f8 cf       	rjmp	.-16     	; 0x3db2 <__floatsisf+0x1c>
    3dc2:	fa f4       	brpl	.+62     	; 0x3e02 <__floatsisf+0x6c>
    3dc4:	bb 0f       	add	r27, r27
    3dc6:	11 f4       	brne	.+4      	; 0x3dcc <__floatsisf+0x36>
    3dc8:	60 ff       	sbrs	r22, 0
    3dca:	1b c0       	rjmp	.+54     	; 0x3e02 <__floatsisf+0x6c>
    3dcc:	6f 5f       	subi	r22, 0xFF	; 255
    3dce:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd4:	16 c0       	rjmp	.+44     	; 0x3e02 <__floatsisf+0x6c>
    3dd6:	88 23       	and	r24, r24
    3dd8:	11 f0       	breq	.+4      	; 0x3dde <__floatsisf+0x48>
    3dda:	96 e9       	ldi	r25, 0x96	; 150
    3ddc:	11 c0       	rjmp	.+34     	; 0x3e00 <__floatsisf+0x6a>
    3dde:	77 23       	and	r23, r23
    3de0:	21 f0       	breq	.+8      	; 0x3dea <__floatsisf+0x54>
    3de2:	9e e8       	ldi	r25, 0x8E	; 142
    3de4:	87 2f       	mov	r24, r23
    3de6:	76 2f       	mov	r23, r22
    3de8:	05 c0       	rjmp	.+10     	; 0x3df4 <__floatsisf+0x5e>
    3dea:	66 23       	and	r22, r22
    3dec:	71 f0       	breq	.+28     	; 0x3e0a <__floatsisf+0x74>
    3dee:	96 e8       	ldi	r25, 0x86	; 134
    3df0:	86 2f       	mov	r24, r22
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	2a f0       	brmi	.+10     	; 0x3e02 <__floatsisf+0x6c>
    3df8:	9a 95       	dec	r25
    3dfa:	66 0f       	add	r22, r22
    3dfc:	77 1f       	adc	r23, r23
    3dfe:	88 1f       	adc	r24, r24
    3e00:	da f7       	brpl	.-10     	; 0x3df8 <__floatsisf+0x62>
    3e02:	88 0f       	add	r24, r24
    3e04:	96 95       	lsr	r25
    3e06:	87 95       	ror	r24
    3e08:	97 f9       	bld	r25, 7
    3e0a:	08 95       	ret

00003e0c <__fp_cmp>:
    3e0c:	99 0f       	add	r25, r25
    3e0e:	00 08       	sbc	r0, r0
    3e10:	55 0f       	add	r21, r21
    3e12:	aa 0b       	sbc	r26, r26
    3e14:	e0 e8       	ldi	r30, 0x80	; 128
    3e16:	fe ef       	ldi	r31, 0xFE	; 254
    3e18:	16 16       	cp	r1, r22
    3e1a:	17 06       	cpc	r1, r23
    3e1c:	e8 07       	cpc	r30, r24
    3e1e:	f9 07       	cpc	r31, r25
    3e20:	c0 f0       	brcs	.+48     	; 0x3e52 <__fp_cmp+0x46>
    3e22:	12 16       	cp	r1, r18
    3e24:	13 06       	cpc	r1, r19
    3e26:	e4 07       	cpc	r30, r20
    3e28:	f5 07       	cpc	r31, r21
    3e2a:	98 f0       	brcs	.+38     	; 0x3e52 <__fp_cmp+0x46>
    3e2c:	62 1b       	sub	r22, r18
    3e2e:	73 0b       	sbc	r23, r19
    3e30:	84 0b       	sbc	r24, r20
    3e32:	95 0b       	sbc	r25, r21
    3e34:	39 f4       	brne	.+14     	; 0x3e44 <__fp_cmp+0x38>
    3e36:	0a 26       	eor	r0, r26
    3e38:	61 f0       	breq	.+24     	; 0x3e52 <__fp_cmp+0x46>
    3e3a:	23 2b       	or	r18, r19
    3e3c:	24 2b       	or	r18, r20
    3e3e:	25 2b       	or	r18, r21
    3e40:	21 f4       	brne	.+8      	; 0x3e4a <__fp_cmp+0x3e>
    3e42:	08 95       	ret
    3e44:	0a 26       	eor	r0, r26
    3e46:	09 f4       	brne	.+2      	; 0x3e4a <__fp_cmp+0x3e>
    3e48:	a1 40       	sbci	r26, 0x01	; 1
    3e4a:	a6 95       	lsr	r26
    3e4c:	8f ef       	ldi	r24, 0xFF	; 255
    3e4e:	81 1d       	adc	r24, r1
    3e50:	81 1d       	adc	r24, r1
    3e52:	08 95       	ret

00003e54 <__fp_inf>:
    3e54:	97 f9       	bld	r25, 7
    3e56:	9f 67       	ori	r25, 0x7F	; 127
    3e58:	80 e8       	ldi	r24, 0x80	; 128
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	60 e0       	ldi	r22, 0x00	; 0
    3e5e:	08 95       	ret

00003e60 <__fp_nan>:
    3e60:	9f ef       	ldi	r25, 0xFF	; 255
    3e62:	80 ec       	ldi	r24, 0xC0	; 192
    3e64:	08 95       	ret

00003e66 <__fp_pscA>:
    3e66:	00 24       	eor	r0, r0
    3e68:	0a 94       	dec	r0
    3e6a:	16 16       	cp	r1, r22
    3e6c:	17 06       	cpc	r1, r23
    3e6e:	18 06       	cpc	r1, r24
    3e70:	09 06       	cpc	r0, r25
    3e72:	08 95       	ret

00003e74 <__fp_pscB>:
    3e74:	00 24       	eor	r0, r0
    3e76:	0a 94       	dec	r0
    3e78:	12 16       	cp	r1, r18
    3e7a:	13 06       	cpc	r1, r19
    3e7c:	14 06       	cpc	r1, r20
    3e7e:	05 06       	cpc	r0, r21
    3e80:	08 95       	ret

00003e82 <__fp_round>:
    3e82:	09 2e       	mov	r0, r25
    3e84:	03 94       	inc	r0
    3e86:	00 0c       	add	r0, r0
    3e88:	11 f4       	brne	.+4      	; 0x3e8e <__fp_round+0xc>
    3e8a:	88 23       	and	r24, r24
    3e8c:	52 f0       	brmi	.+20     	; 0x3ea2 <__fp_round+0x20>
    3e8e:	bb 0f       	add	r27, r27
    3e90:	40 f4       	brcc	.+16     	; 0x3ea2 <__fp_round+0x20>
    3e92:	bf 2b       	or	r27, r31
    3e94:	11 f4       	brne	.+4      	; 0x3e9a <__fp_round+0x18>
    3e96:	60 ff       	sbrs	r22, 0
    3e98:	04 c0       	rjmp	.+8      	; 0x3ea2 <__fp_round+0x20>
    3e9a:	6f 5f       	subi	r22, 0xFF	; 255
    3e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea2:	08 95       	ret

00003ea4 <__fp_split3>:
    3ea4:	57 fd       	sbrc	r21, 7
    3ea6:	90 58       	subi	r25, 0x80	; 128
    3ea8:	44 0f       	add	r20, r20
    3eaa:	55 1f       	adc	r21, r21
    3eac:	59 f0       	breq	.+22     	; 0x3ec4 <__fp_splitA+0x10>
    3eae:	5f 3f       	cpi	r21, 0xFF	; 255
    3eb0:	71 f0       	breq	.+28     	; 0x3ece <__fp_splitA+0x1a>
    3eb2:	47 95       	ror	r20

00003eb4 <__fp_splitA>:
    3eb4:	88 0f       	add	r24, r24
    3eb6:	97 fb       	bst	r25, 7
    3eb8:	99 1f       	adc	r25, r25
    3eba:	61 f0       	breq	.+24     	; 0x3ed4 <__fp_splitA+0x20>
    3ebc:	9f 3f       	cpi	r25, 0xFF	; 255
    3ebe:	79 f0       	breq	.+30     	; 0x3ede <__fp_splitA+0x2a>
    3ec0:	87 95       	ror	r24
    3ec2:	08 95       	ret
    3ec4:	12 16       	cp	r1, r18
    3ec6:	13 06       	cpc	r1, r19
    3ec8:	14 06       	cpc	r1, r20
    3eca:	55 1f       	adc	r21, r21
    3ecc:	f2 cf       	rjmp	.-28     	; 0x3eb2 <__fp_split3+0xe>
    3ece:	46 95       	lsr	r20
    3ed0:	f1 df       	rcall	.-30     	; 0x3eb4 <__fp_splitA>
    3ed2:	08 c0       	rjmp	.+16     	; 0x3ee4 <__fp_splitA+0x30>
    3ed4:	16 16       	cp	r1, r22
    3ed6:	17 06       	cpc	r1, r23
    3ed8:	18 06       	cpc	r1, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	f1 cf       	rjmp	.-30     	; 0x3ec0 <__fp_splitA+0xc>
    3ede:	86 95       	lsr	r24
    3ee0:	71 05       	cpc	r23, r1
    3ee2:	61 05       	cpc	r22, r1
    3ee4:	08 94       	sec
    3ee6:	08 95       	ret

00003ee8 <__fp_zero>:
    3ee8:	e8 94       	clt

00003eea <__fp_szero>:
    3eea:	bb 27       	eor	r27, r27
    3eec:	66 27       	eor	r22, r22
    3eee:	77 27       	eor	r23, r23
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	97 f9       	bld	r25, 7
    3ef4:	08 95       	ret

00003ef6 <__gesf2>:
    3ef6:	8a df       	rcall	.-236    	; 0x3e0c <__fp_cmp>
    3ef8:	08 f4       	brcc	.+2      	; 0x3efc <__gesf2+0x6>
    3efa:	8f ef       	ldi	r24, 0xFF	; 255
    3efc:	08 95       	ret

00003efe <__mulsf3>:
    3efe:	0b d0       	rcall	.+22     	; 0x3f16 <__mulsf3x>
    3f00:	c0 cf       	rjmp	.-128    	; 0x3e82 <__fp_round>
    3f02:	b1 df       	rcall	.-158    	; 0x3e66 <__fp_pscA>
    3f04:	28 f0       	brcs	.+10     	; 0x3f10 <__mulsf3+0x12>
    3f06:	b6 df       	rcall	.-148    	; 0x3e74 <__fp_pscB>
    3f08:	18 f0       	brcs	.+6      	; 0x3f10 <__mulsf3+0x12>
    3f0a:	95 23       	and	r25, r21
    3f0c:	09 f0       	breq	.+2      	; 0x3f10 <__mulsf3+0x12>
    3f0e:	a2 cf       	rjmp	.-188    	; 0x3e54 <__fp_inf>
    3f10:	a7 cf       	rjmp	.-178    	; 0x3e60 <__fp_nan>
    3f12:	11 24       	eor	r1, r1
    3f14:	ea cf       	rjmp	.-44     	; 0x3eea <__fp_szero>

00003f16 <__mulsf3x>:
    3f16:	c6 df       	rcall	.-116    	; 0x3ea4 <__fp_split3>
    3f18:	a0 f3       	brcs	.-24     	; 0x3f02 <__mulsf3+0x4>

00003f1a <__mulsf3_pse>:
    3f1a:	95 9f       	mul	r25, r21
    3f1c:	d1 f3       	breq	.-12     	; 0x3f12 <__mulsf3+0x14>
    3f1e:	95 0f       	add	r25, r21
    3f20:	50 e0       	ldi	r21, 0x00	; 0
    3f22:	55 1f       	adc	r21, r21
    3f24:	62 9f       	mul	r22, r18
    3f26:	f0 01       	movw	r30, r0
    3f28:	72 9f       	mul	r23, r18
    3f2a:	bb 27       	eor	r27, r27
    3f2c:	f0 0d       	add	r31, r0
    3f2e:	b1 1d       	adc	r27, r1
    3f30:	63 9f       	mul	r22, r19
    3f32:	aa 27       	eor	r26, r26
    3f34:	f0 0d       	add	r31, r0
    3f36:	b1 1d       	adc	r27, r1
    3f38:	aa 1f       	adc	r26, r26
    3f3a:	64 9f       	mul	r22, r20
    3f3c:	66 27       	eor	r22, r22
    3f3e:	b0 0d       	add	r27, r0
    3f40:	a1 1d       	adc	r26, r1
    3f42:	66 1f       	adc	r22, r22
    3f44:	82 9f       	mul	r24, r18
    3f46:	22 27       	eor	r18, r18
    3f48:	b0 0d       	add	r27, r0
    3f4a:	a1 1d       	adc	r26, r1
    3f4c:	62 1f       	adc	r22, r18
    3f4e:	73 9f       	mul	r23, r19
    3f50:	b0 0d       	add	r27, r0
    3f52:	a1 1d       	adc	r26, r1
    3f54:	62 1f       	adc	r22, r18
    3f56:	83 9f       	mul	r24, r19
    3f58:	a0 0d       	add	r26, r0
    3f5a:	61 1d       	adc	r22, r1
    3f5c:	22 1f       	adc	r18, r18
    3f5e:	74 9f       	mul	r23, r20
    3f60:	33 27       	eor	r19, r19
    3f62:	a0 0d       	add	r26, r0
    3f64:	61 1d       	adc	r22, r1
    3f66:	23 1f       	adc	r18, r19
    3f68:	84 9f       	mul	r24, r20
    3f6a:	60 0d       	add	r22, r0
    3f6c:	21 1d       	adc	r18, r1
    3f6e:	82 2f       	mov	r24, r18
    3f70:	76 2f       	mov	r23, r22
    3f72:	6a 2f       	mov	r22, r26
    3f74:	11 24       	eor	r1, r1
    3f76:	9f 57       	subi	r25, 0x7F	; 127
    3f78:	50 40       	sbci	r21, 0x00	; 0
    3f7a:	8a f0       	brmi	.+34     	; 0x3f9e <__mulsf3_pse+0x84>
    3f7c:	e1 f0       	breq	.+56     	; 0x3fb6 <__mulsf3_pse+0x9c>
    3f7e:	88 23       	and	r24, r24
    3f80:	4a f0       	brmi	.+18     	; 0x3f94 <__mulsf3_pse+0x7a>
    3f82:	ee 0f       	add	r30, r30
    3f84:	ff 1f       	adc	r31, r31
    3f86:	bb 1f       	adc	r27, r27
    3f88:	66 1f       	adc	r22, r22
    3f8a:	77 1f       	adc	r23, r23
    3f8c:	88 1f       	adc	r24, r24
    3f8e:	91 50       	subi	r25, 0x01	; 1
    3f90:	50 40       	sbci	r21, 0x00	; 0
    3f92:	a9 f7       	brne	.-22     	; 0x3f7e <__mulsf3_pse+0x64>
    3f94:	9e 3f       	cpi	r25, 0xFE	; 254
    3f96:	51 05       	cpc	r21, r1
    3f98:	70 f0       	brcs	.+28     	; 0x3fb6 <__mulsf3_pse+0x9c>
    3f9a:	5c cf       	rjmp	.-328    	; 0x3e54 <__fp_inf>
    3f9c:	a6 cf       	rjmp	.-180    	; 0x3eea <__fp_szero>
    3f9e:	5f 3f       	cpi	r21, 0xFF	; 255
    3fa0:	ec f3       	brlt	.-6      	; 0x3f9c <__mulsf3_pse+0x82>
    3fa2:	98 3e       	cpi	r25, 0xE8	; 232
    3fa4:	dc f3       	brlt	.-10     	; 0x3f9c <__mulsf3_pse+0x82>
    3fa6:	86 95       	lsr	r24
    3fa8:	77 95       	ror	r23
    3faa:	67 95       	ror	r22
    3fac:	b7 95       	ror	r27
    3fae:	f7 95       	ror	r31
    3fb0:	e7 95       	ror	r30
    3fb2:	9f 5f       	subi	r25, 0xFF	; 255
    3fb4:	c1 f7       	brne	.-16     	; 0x3fa6 <__mulsf3_pse+0x8c>
    3fb6:	fe 2b       	or	r31, r30
    3fb8:	88 0f       	add	r24, r24
    3fba:	91 1d       	adc	r25, r1
    3fbc:	96 95       	lsr	r25
    3fbe:	87 95       	ror	r24
    3fc0:	97 f9       	bld	r25, 7
    3fc2:	08 95       	ret

00003fc4 <__udivmodhi4>:
    3fc4:	aa 1b       	sub	r26, r26
    3fc6:	bb 1b       	sub	r27, r27
    3fc8:	51 e1       	ldi	r21, 0x11	; 17
    3fca:	07 c0       	rjmp	.+14     	; 0x3fda <__udivmodhi4_ep>

00003fcc <__udivmodhi4_loop>:
    3fcc:	aa 1f       	adc	r26, r26
    3fce:	bb 1f       	adc	r27, r27
    3fd0:	a6 17       	cp	r26, r22
    3fd2:	b7 07       	cpc	r27, r23
    3fd4:	10 f0       	brcs	.+4      	; 0x3fda <__udivmodhi4_ep>
    3fd6:	a6 1b       	sub	r26, r22
    3fd8:	b7 0b       	sbc	r27, r23

00003fda <__udivmodhi4_ep>:
    3fda:	88 1f       	adc	r24, r24
    3fdc:	99 1f       	adc	r25, r25
    3fde:	5a 95       	dec	r21
    3fe0:	a9 f7       	brne	.-22     	; 0x3fcc <__udivmodhi4_loop>
    3fe2:	80 95       	com	r24
    3fe4:	90 95       	com	r25
    3fe6:	bc 01       	movw	r22, r24
    3fe8:	cd 01       	movw	r24, r26
    3fea:	08 95       	ret

00003fec <strcmp>:
    3fec:	fb 01       	movw	r30, r22
    3fee:	dc 01       	movw	r26, r24
    3ff0:	8d 91       	ld	r24, X+
    3ff2:	01 90       	ld	r0, Z+
    3ff4:	80 19       	sub	r24, r0
    3ff6:	01 10       	cpse	r0, r1
    3ff8:	d9 f3       	breq	.-10     	; 0x3ff0 <strcmp+0x4>
    3ffa:	99 0b       	sbc	r25, r25
    3ffc:	08 95       	ret

00003ffe <_exit>:
    3ffe:	f8 94       	cli

00004000 <__stop_program>:
    4000:	ff cf       	rjmp	.-2      	; 0x4000 <__stop_program>
